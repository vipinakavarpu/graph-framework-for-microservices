// Code generated by nexus. DO NOT EDIT.

package v1

import (
	customtsmtanzuvmwarecomv1 "nexustempmodule/apis/custom.tsm.tanzu.vmware.com/v1"

	"github.com/vmware-tanzu/graph-framework-for-microservices/nexus/nexus"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"nexustempmodule/common"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type NexusStatus struct {
	SourceGeneration int64 `json:"sourceGeneration" yaml:"sourceGeneration"`
	RemoteGeneration int64 `json:"remoteGeneration" yaml:"remoteGeneration"`
}

/* ------------------- CRDs definitions ------------------- */

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AccessToken struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AccessTokenSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AccessTokenNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AccessTokenNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AccessToken) CRDName() string {
	return "accesstokens.global.tsm.tanzu.vmware.com"
}

func (c *AccessToken) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AccessTokenSpec struct {
	Ttl     int    `json:"ttl" yaml:"ttl"`
	Created string `json:"created" yaml:"created"`
	UserId  string `json:"userId" yaml:"userId"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AccessTokenList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AccessToken `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ACPConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ACPConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ACPConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ACPConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ACPConfig) CRDName() string {
	return "acpconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ACPConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ACPConfigSpec struct {
	DisplayName        string                                     `json:"displayName" yaml:"displayName"`
	Gns                string                                     `json:"gns" yaml:"gns"`
	Description        string                                     `json:"description" yaml:"description"`
	Tags               []string                                   `json:"tags" yaml:"tags"`
	ProjectId          string                                     `json:"projectId" yaml:"projectId"`
	DestGroups         customtsmtanzuvmwarecomv1.ResourceGroupIDs `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/config/policy/policy-config/policy-config.ts\", gofile:\"policy-config.go\", name: \"ResourceGroupIDs\")"`
	SourceGroups       customtsmtanzuvmwarecomv1.ResourceGroupIDs `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/config/policy/policy-config/policy-config.ts\", gofile:\"policy-config.go\", name: \"ResourceGroupIDs\")"`
	Conditions         []string                                   `json:"conditions" yaml:"conditions"`
	Actions            customtsmtanzuvmwarecomv1.PolicyCfgActions `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/config/policy/policy-config/policy-config.ts\", gofile:\"policy-config.go\", name: \"PolicyCfgActions\")"`
	DestSvcGroupsGvk   map[string]Link                            `json:"destSvcGroupsGvk,omitempty" yaml:"destSvcGroupsGvk,omitempty" nexus:"links"`
	SourceSvcGroupsGvk map[string]Link                            `json:"sourceSvcGroupsGvk,omitempty" yaml:"sourceSvcGroupsGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ACPConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ACPConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AdditionalAttributes struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AdditionalAttributesSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AdditionalAttributesNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AdditionalAttributesNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AdditionalAttributes) CRDName() string {
	return "additionalattributeses.global.tsm.tanzu.vmware.com"
}

func (c *AdditionalAttributes) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AdditionalAttributesSpec struct {
	Name    string                                   `json:"name" yaml:"name"`
	Value   customtsmtanzuvmwarecomv1.AttributeValue `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"AttributeValue\")"`
	Context string                                   `json:"context" yaml:"context"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AdditionalAttributesList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AdditionalAttributes `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AllSparkServices struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AllSparkServicesSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AllSparkServicesNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AllSparkServicesNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AllSparkServices) CRDName() string {
	return "allsparkserviceses.global.tsm.tanzu.vmware.com"
}

func (c *AllSparkServices) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AllSparkServicesSpec struct {
	GlobalRegistrationServiceGvk *Child `json:"globalRegistrationServiceGvk,omitempty" yaml:"globalRegistrationServiceGvk,omitempty" nexus:"child"`
	LocalRegistrationServiceGvk  *Child `json:"localRegistrationServiceGvk,omitempty" yaml:"localRegistrationServiceGvk,omitempty" nexus:"child"`
	AwsConnectorGvk              *Child `json:"awsConnectorGvk,omitempty" yaml:"awsConnectorGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AllSparkServicesList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AllSparkServices `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Annotation struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AnnotationSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AnnotationNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AnnotationNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Annotation) CRDName() string {
	return "annotations.global.tsm.tanzu.vmware.com"
}

func (c *Annotation) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AnnotationSpec struct {
	Name string `nexus-graphql-nullable:"false"`
	Data string `nexus-graphql-tsm-directive:"@jsonencoded"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AnnotationList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Annotation `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ApiDiscoveryRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ApiDiscoveryRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ApiDiscoveryRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ApiDiscoveryRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ApiDiscoveryRT) CRDName() string {
	return "apidiscoveryrts.global.tsm.tanzu.vmware.com"
}

func (c *ApiDiscoveryRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ApiDiscoveryRTSpec struct {
	Gnsid                  string                                                          `json:"gnsid" yaml:"gnsid"`
	Selectors              customtsmtanzuvmwarecomv1.ApiDiscoveryClusterResourceSelectorRT `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"gns_api_discovery.go\", name:\"ApiDiscoveryClusterResourceSelectorRT\")"`
	Spec                   customtsmtanzuvmwarecomv1.ApiDiscoveryApplicationConfigList     `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsApiDiscovery\", gofile:\"gns_api_discovery.go\", name:\"ApiDiscoveryApplicationConfigList\")"`
	CompressionEnabled     bool                                                            `json:"compressionEnabled" yaml:"compressionEnabled"`
	IsEndpointApiPrechecks customtsmtanzuvmwarecomv1.APIDiscoveryIsEndpointApiPrechecks    `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsApiDiscovery\", gofile:\"gns_api_discovery.go\", name:\"APIDiscoveryIsEndpointApiPrechecks\")"`
	ProcessingToggles      customtsmtanzuvmwarecomv1.APIDiscoveryProcessingToggles         `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsApiDiscovery\", gofile:\"gns_api_discovery.go\", name:\"APIDiscoveryProcessingToggles\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ApiDiscoveryRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ApiDiscoveryRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ApiDiscovery struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ApiDiscoverySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ApiDiscoveryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ApiDiscoveryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ApiDiscovery) CRDName() string {
	return "apidiscoveries.global.tsm.tanzu.vmware.com"
}

func (c *ApiDiscovery) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ApiDiscoverySpec struct {
	Description string                                       `json:"description" yaml:"description"`
	Labels      customtsmtanzuvmwarecomv1.LabelsList         `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"LabelsList\")"`
	Spec        customtsmtanzuvmwarecomv1.ApiDiscoveryConfig `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsApiDiscovery\", name:\"ApiDiscoveryConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ApiDiscoveryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ApiDiscovery `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AppFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AppFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AppFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AppFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AppFolder) CRDName() string {
	return "appfolders.global.tsm.tanzu.vmware.com"
}

func (c *AppFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AppFolderSpec struct {
	AppGvk map[string]Child `json:"appGvk,omitempty" yaml:"appGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AppFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AppFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AppGroup struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AppGroupSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AppGroupNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AppGroupNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AppGroup) CRDName() string {
	return "appgroups.global.tsm.tanzu.vmware.com"
}

func (c *AppGroup) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AppGroupSpec struct {
	Rules       string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/resourceGroup\", gofile:\"resource_group.go\", name:\"Rules\")"`
	ServicesGvk map[string]Link `json:"servicesGvk,omitempty" yaml:"servicesGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AppGroupList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AppGroup `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AppTemplateServiceDefinition struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AppTemplateServiceDefinitionSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AppTemplateServiceDefinitionNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AppTemplateServiceDefinitionNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AppTemplateServiceDefinition) CRDName() string {
	return "apptemplateservicedefinitions.global.tsm.tanzu.vmware.com"
}

func (c *AppTemplateServiceDefinition) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AppTemplateServiceDefinitionSpec struct {
	Type         string   `nexus-graphql-nullable:"false"`
	Version      string   `nexus-graphql-nullable:"false"`
	Template     string   `nexus-graphql-nullable:"false"`
	TemplateArgs []string `nexus-graphql-nullable:"false"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AppTemplateServiceDefinitionList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AppTemplateServiceDefinition `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AppTemplate struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AppTemplateSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AppTemplateNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AppTemplateNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AppTemplate) CRDName() string {
	return "apptemplates.global.tsm.tanzu.vmware.com"
}

func (c *AppTemplate) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AppTemplateSpec struct {
	Version               string           `json:"version" yaml:"version"`
	ServiceDefinitionsGvk map[string]Child `json:"serviceDefinitionsGvk,omitempty" yaml:"serviceDefinitionsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AppTemplateList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AppTemplate `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AppUser struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`

	Status AppUserNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AppUserNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AppUser) CRDName() string {
	return "appusers.global.tsm.tanzu.vmware.com"
}

func (c *AppUser) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AppUserList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AppUser `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AppVersion struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AppVersionSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AppVersionNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AppVersionNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AppVersion) CRDName() string {
	return "appversions.global.tsm.tanzu.vmware.com"
}

func (c *AppVersion) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AppVersionSpec struct {
	TemplateGvk  *Link `json:"templateGvk,omitempty" yaml:"templateGvk,omitempty" nexus:"link"`
	InventoryGvk *Link `json:"inventoryGvk,omitempty" yaml:"inventoryGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AppVersionList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AppVersion `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type App struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AppSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AppNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AppNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *App) CRDName() string {
	return "apps.global.tsm.tanzu.vmware.com"
}

func (c *App) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AppSpec struct {
	VersionGvk *Child `json:"versionGvk,omitempty" yaml:"versionGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AppList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []App `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ApplicationInfo struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ApplicationInfoSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ApplicationInfoNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ApplicationInfoNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ApplicationInfo) CRDName() string {
	return "applicationinfos.global.tsm.tanzu.vmware.com"
}

func (c *ApplicationInfo) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ApplicationInfoSpec struct {
	App string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle.ts\", gofile:\"cluster_lifecycle.go\", name:\"ApplicationInstance\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ApplicationInfoList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ApplicationInfo `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AttackDiscoveryRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AttackDiscoveryRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AttackDiscoveryRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AttackDiscoveryRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AttackDiscoveryRT) CRDName() string {
	return "attackdiscoveryrts.global.tsm.tanzu.vmware.com"
}

func (c *AttackDiscoveryRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AttackDiscoveryRTSpec struct {
	Gnsid     string `json:"gnsid" yaml:"gnsid"`
	Selectors string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"gns_attack_discovery.go\", name:\"AttackDiscoveryClusterResourceSelectorRT\")"`
	Spec      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsAttackDiscovery\", gofile:\"gns_attack_discovery.go\", name:\"AttackDiscoveryApplicationConfigList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AttackDiscoveryRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AttackDiscoveryRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AttackDiscovery struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AttackDiscoverySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AttackDiscoveryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AttackDiscoveryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AttackDiscovery) CRDName() string {
	return "attackdiscoveries.global.tsm.tanzu.vmware.com"
}

func (c *AttackDiscovery) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AttackDiscoverySpec struct {
	Description string `json:"description" yaml:"description"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"LabelsList\")"`
	Spec        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsAttackDiscovery\", gofile:\"gns_attack_discovery.go\", name:\"AttackDiscoveryConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AttackDiscoveryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AttackDiscovery `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AuthenticationPolicy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AuthenticationPolicySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AuthenticationPolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AuthenticationPolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AuthenticationPolicy) CRDName() string {
	return "authenticationpolicies.global.tsm.tanzu.vmware.com"
}

func (c *AuthenticationPolicy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AuthenticationPolicySpec struct {
	Name        string `json:"name" yaml:"name"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Annotations string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Spec        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/inventory/cluster/domain/authentication-policy/istio.d.ts\", gofile:\"istio.go\", name:\"PolicySpec\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AuthenticationPolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AuthenticationPolicy `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AutoscalerFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AutoscalerFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AutoscalerFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AutoscalerFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AutoscalerFolder) CRDName() string {
	return "autoscalerfolders.global.tsm.tanzu.vmware.com"
}

func (c *AutoscalerFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AutoscalerFolderSpec struct {
	AutoscalersGvk map[string]Child `json:"autoscalersGvk,omitempty" yaml:"autoscalersGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AutoscalerFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AutoscalerFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AutoscalerConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AutoscalerConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AutoscalerConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AutoscalerConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AutoscalerConfig) CRDName() string {
	return "autoscalerconfigs.global.tsm.tanzu.vmware.com"
}

func (c *AutoscalerConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AutoscalerConfigSpec struct {
	Name         string `json:"name" yaml:"name"`
	ConfigSource string `json:"configSource" yaml:"configSource"`
	DesiredState string `nexus-graphql-tsm-directive:"@protobuf(file:\"./common-apis/protos/autoscaling/autoscaling.proto\", name:\"AutoscalingDefinition\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AutoscalerConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AutoscalerConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Autoscaler struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AutoscalerSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AutoscalerNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AutoscalerNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Autoscaler) CRDName() string {
	return "autoscalers.global.tsm.tanzu.vmware.com"
}

func (c *Autoscaler) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AutoscalerSpec struct {
	Name          string `json:"name" yaml:"name"`
	ProjectId     string `json:"projectId" yaml:"projectId"`
	AutoscalerGvk *Link  `json:"autoscalerGvk,omitempty" yaml:"autoscalerGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AutoscalerList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Autoscaler `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AutoscalerCR struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AutoscalerCRSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AutoscalerCRNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AutoscalerCRNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AutoscalerCR) CRDName() string {
	return "autoscalercrs.global.tsm.tanzu.vmware.com"
}

func (c *AutoscalerCR) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AutoscalerCRSpec struct {
	Name                  string `json:"name" yaml:"name"`
	AutoscalingDefinition string `nexus-graphql-tsm-directive:"@protobuf(file:\"./common-apis/protos/autoscaling/autoscaling.proto\", name:\"AutoscalingDefinition\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AutoscalerCRList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AutoscalerCR `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AutoscalingPolicy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AutoscalingPolicySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AutoscalingPolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AutoscalingPolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AutoscalingPolicy) CRDName() string {
	return "autoscalingpolicies.global.tsm.tanzu.vmware.com"
}

func (c *AutoscalingPolicy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AutoscalingPolicySpec struct {
	Name           string `json:"name" yaml:"name"`
	Description    string `json:"description" yaml:"description"`
	Labels         string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	ServiceName    string `json:"serviceName" yaml:"serviceName"`
	AutoscalerSpec string `nexus-graphql-tsm-directive:"@protobuf(file:\"./common-apis/protos/autoscaling/autoscaling.proto\" name:\"AutoscalingDefinition\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AutoscalingPolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AutoscalingPolicy `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AwsConnector struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AwsConnectorSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AwsConnectorNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AwsConnectorNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AwsConnector) CRDName() string {
	return "awsconnectors.global.tsm.tanzu.vmware.com"
}

func (c *AwsConnector) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AwsConnectorSpec struct {
	GnsGvk map[string]Child `json:"gnsGvk,omitempty" yaml:"gnsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AwsConnectorList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AwsConnector `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Bucket struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              BucketSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            BucketNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type BucketNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Bucket) CRDName() string {
	return "buckets.global.tsm.tanzu.vmware.com"
}

func (c *Bucket) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type BucketSpec struct {
	TemplateGvk  *Link `json:"templateGvk,omitempty" yaml:"templateGvk,omitempty" nexus:"link"`
	InventoryGvk *Link `json:"inventoryGvk,omitempty" yaml:"inventoryGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type BucketList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Bucket `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type CertificateAuthorityRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              CertificateAuthorityRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            CertificateAuthorityRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type CertificateAuthorityRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *CertificateAuthorityRT) CRDName() string {
	return "certificateauthorityrts.global.tsm.tanzu.vmware.com"
}

func (c *CertificateAuthorityRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type CertificateAuthorityRTSpec struct {
	Url          string `json:"url" yaml:"url"`
	Type         string `json:"type" yaml:"type"`
	TemplatePath string `json:"templatePath" yaml:"templatePath"`
	SecretRef    string `json:"secretRef" yaml:"secretRef"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type CertificateAuthorityRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []CertificateAuthorityRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type CertificateAuthorityConfigN struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              CertificateAuthorityConfigNSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            CertificateAuthorityConfigNNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type CertificateAuthorityConfigNNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *CertificateAuthorityConfigN) CRDName() string {
	return "certificateauthorityconfigns.global.tsm.tanzu.vmware.com"
}

func (c *CertificateAuthorityConfigN) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type CertificateAuthorityConfigNSpec struct {
	Config string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/certificateAuthority\", gofile:\"certificate_authority.go\", name: \"CertificateAuthorityConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type CertificateAuthorityConfigNList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []CertificateAuthorityConfigN `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type CertificateConfigN struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              CertificateConfigNSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            CertificateConfigNNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type CertificateConfigNNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *CertificateConfigN) CRDName() string {
	return "certificateconfigns.global.tsm.tanzu.vmware.com"
}

func (c *CertificateConfigN) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type CertificateConfigNSpec struct {
	ProjectId  string `json:"projectId" yaml:"projectId"`
	BeginsOn   string `json:"beginsOn" yaml:"beginsOn"`
	ExpiresOn  string `json:"expiresOn" yaml:"expiresOn"`
	IssuedToCN string `json:"issuedToCN" yaml:"issuedToCN"`
	Config     string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/certificate\", gofile:\"certificate.go\", name: \"CertificateConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type CertificateConfigNList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []CertificateConfigN `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type CertificateRequest struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              CertificateRequestSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            CertificateRequestNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type CertificateRequestNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *CertificateRequest) CRDName() string {
	return "certificaterequests.global.tsm.tanzu.vmware.com"
}

func (c *CertificateRequest) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type CertificateRequestSpec struct {
	Name      string `json:"name" yaml:"name"`
	Metadata  string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	IssuerRef string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Request   string `json:"request" yaml:"request"`
	Duration  string `json:"duration" yaml:"duration"`
	Uid       string `json:"uid" yaml:"uid"`
	IsCA      bool   `json:"isCA" yaml:"isCA"`
	Username  string `json:"username" yaml:"username"`
	Usages    string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Groups    string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Extra     string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Status    string `nexus-graphql-tsm-directive:"@jsonencoded"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type CertificateRequestList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []CertificateRequest `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Certificate struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              CertificateSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            CertificateNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type CertificateNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Certificate) CRDName() string {
	return "certificates.global.tsm.tanzu.vmware.com"
}

func (c *Certificate) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type CertificateSpec struct {
	Name                    string   `json:"name" yaml:"name"`
	Metadata                string   `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	IssuerRef               string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	PrivateKey              string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	Subject                 string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	CommonName              string   `json:"commonName" yaml:"commonName"`
	Duration                string   `json:"duration" yaml:"duration"`
	DnsNames                []string `json:"dnsNames" yaml:"dnsNames"`
	IpAddresses             []string `json:"ipAddresses" yaml:"ipAddresses"`
	SecretName              string   `json:"secretName" yaml:"secretName"`
	RenewBefore             string   `json:"renewBefore" yaml:"renewBefore"`
	EmailAddresses          []string `json:"emailAddresses" yaml:"emailAddresses"`
	Uris                    []string `json:"uris" yaml:"uris"`
	SecretTemplate          string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	KeyStores               string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	IsCA                    bool     `json:"isCA" yaml:"isCA"`
	EncodeUsagesInRequest   string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	Usages                  string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	RevisionHistoryLimit    int      `json:"revisionHistoryLimit" yaml:"revisionHistoryLimit"`
	AdditionalOutputFormats string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	Status                  string   `nexus-graphql-tsm-directive:"@jsonencoded"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type CertificateList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Certificate `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ClusterConfigFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ClusterConfigFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ClusterConfigFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ClusterConfigFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ClusterConfigFolder) CRDName() string {
	return "clusterconfigfolders.global.tsm.tanzu.vmware.com"
}

func (c *ClusterConfigFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ClusterConfigFolderSpec struct {
	ClustersGvk map[string]Child `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ClusterConfigFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ClusterConfigFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ClusterConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ClusterConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ClusterConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ClusterConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ClusterConfig) CRDName() string {
	return "clusterconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ClusterConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ClusterConfigSpec struct {
	Name                          string           `json:"name" yaml:"name"`
	DomainsGvk                    map[string]Child `json:"domainsGvk,omitempty" yaml:"domainsGvk,omitempty" nexus:"children"`
	HostConfigGvk                 map[string]Child `json:"hostConfigGvk,omitempty" yaml:"hostConfigGvk,omitempty" nexus:"children"`
	DnsConfigFolderGvk            *Child           `json:"dnsConfigFolderGvk,omitempty" yaml:"dnsConfigFolderGvk,omitempty" nexus:"child"`
	DnsProbesConfigFolderGvk      *Child           `json:"dnsProbesConfigFolderGvk,omitempty" yaml:"dnsProbesConfigFolderGvk,omitempty" nexus:"child"`
	LogFolderGvk                  *Child           `json:"logFolderGvk,omitempty" yaml:"logFolderGvk,omitempty" nexus:"child"`
	GnsBindingGvk                 map[string]Child `json:"gnsBindingGvk,omitempty" yaml:"gnsBindingGvk,omitempty" nexus:"children"`
	SecurityContextConstraintsGvk map[string]Child `json:"securityContextConstraintsGvk,omitempty" yaml:"securityContextConstraintsGvk,omitempty" nexus:"children"`
	ResourceGroupGvk              *Child           `json:"resourceGroupGvk,omitempty" yaml:"resourceGroupGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ClusterConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ClusterConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ClusterFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ClusterFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ClusterFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ClusterFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ClusterFolder) CRDName() string {
	return "clusterfolders.global.tsm.tanzu.vmware.com"
}

func (c *ClusterFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ClusterFolderSpec struct {
	Name                           string           `json:"name" yaml:"name"`
	ClustersGvk                    map[string]Child `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"children"`
	RemoteGatewayServiceConfigsGvk map[string]Child `json:"remoteGatewayServiceConfigsGvk,omitempty" yaml:"remoteGatewayServiceConfigsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ClusterFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ClusterFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ClusterSettings struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ClusterSettingsSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ClusterSettingsNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ClusterSettingsNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ClusterSettings) CRDName() string {
	return "clustersettingses.global.tsm.tanzu.vmware.com"
}

func (c *ClusterSettings) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ClusterSettingsSpec struct {
	ProjectId                    string `json:"projectId" yaml:"projectId"`
	DisplayName                  string `json:"displayName" yaml:"displayName"`
	Description                  string `json:"description" yaml:"description"`
	Tags                         string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name: \"StringList\")"`
	Labels                       string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	AutoInstallServiceMesh       bool   `json:"autoInstallServiceMesh" yaml:"autoInstallServiceMesh"`
	EnableNamespaceExclusions    bool   `json:"enableNamespaceExclusions" yaml:"enableNamespaceExclusions"`
	NamespaceExclusions          string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"Conditions\")"`
	SystemNamespaceExclusions    string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"Conditions\")"`
	AgentDomain                  string `json:"agentDomain" yaml:"agentDomain"`
	ProxyConfig                  string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle\", gofile:\"cluster_lifecycle.go\", name: \"ProxyConfigRequest\")"`
	AutoInstallServiceMeshConfig string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle\", gofile:\"cluster_lifecycle.go\", name: \"AutoInstallServiceMeshConfig\")"`
	RegistryAccount              string `json:"registryAccount" yaml:"registryAccount"`
	CaLabels                     string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"CaLabels\")"`
	EnableInternalGateway        bool   `json:"enableInternalGateway" yaml:"enableInternalGateway"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ClusterSettingsList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ClusterSettings `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Cluster struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ClusterSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ClusterNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ClusterNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Cluster) CRDName() string {
	return "clusters.global.tsm.tanzu.vmware.com"
}

func (c *Cluster) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ClusterSpec struct {
	Name                          string           `json:"name" yaml:"name"`
	Uuid                          string           `json:"uuid" yaml:"uuid"`
	Connected                     bool             `json:"connected" yaml:"connected"`
	IstioState                    string           `json:"istioState" yaml:"istioState"`
	Status                        string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle.ts\", gofile:\"cluster_lifecycle.go\", name:\"ClusterStatus\")"`
	StatusHistory                 string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle.ts\", gofile:\"cluster_lifecycle.go\", name:\"ClusterStatusHistory\")"`
	Castatus                      string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle.ts\", gofile:\"cluster_lifecycle.go\", name:\"CaStatus\")"`
	CaStatusHistory               string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle.ts\", gofile:\"cluster_lifecycle.go\", name:\"CaStatusHistory\")"`
	ComponentStatuses             string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle.ts\", gofile:\"cluster_lifecycle.go\", name:\"ComponentStatuses\")"`
	ComponentStatusesHistory      string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle.ts\", gofile:\"cluster_lifecycle.go\", name:\"ComponentStatusesHistory\")"`
	Type                          string           `json:"type" yaml:"type"`
	ProjectId                     string           `json:"projectId" yaml:"projectId"`
	ConnectionStatusGvk           *Child           `json:"connectionStatusGvk,omitempty" yaml:"connectionStatusGvk,omitempty" nexus:"child"`
	AppsGvk                       map[string]Child `json:"appsGvk,omitempty" yaml:"appsGvk,omitempty" nexus:"children"`
	DnsProbeStatusGvk             map[string]Child `json:"dnsProbeStatusGvk,omitempty" yaml:"dnsProbeStatusGvk,omitempty" nexus:"children"`
	SecurityContextConstraintsGvk map[string]Child `json:"securityContextConstraintsGvk,omitempty" yaml:"securityContextConstraintsGvk,omitempty" nexus:"children"`
	DomainsGvk                    map[string]Child `json:"domainsGvk,omitempty" yaml:"domainsGvk,omitempty" nexus:"children"`
	NodesGvk                      map[string]Child `json:"nodesGvk,omitempty" yaml:"nodesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ClusterList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Cluster `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ConfigMap struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ConfigMapSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ConfigMapNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ConfigMapNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ConfigMap) CRDName() string {
	return "configmaps.global.tsm.tanzu.vmware.com"
}

func (c *ConfigMap) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ConfigMapSpec struct {
	Name        string `json:"name" yaml:"name"`
	Annotations string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Metadata    string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Data        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/inventory/cluster/domain/config-map/configmap.d.ts\", gofile:\"configmap.go\", name:\"ConfigMapData\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ConfigMapList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ConfigMap `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Config struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Config) CRDName() string {
	return "configs.global.tsm.tanzu.vmware.com"
}

func (c *Config) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ConfigSpec struct {
	ResourceGroupsGvk        *Child           `json:"resourceGroupsGvk,omitempty" yaml:"resourceGroupsGvk,omitempty" nexus:"child"`
	GlobalNamespaceGvk       *Child           `json:"globalNamespaceGvk,omitempty" yaml:"globalNamespaceGvk,omitempty" nexus:"child"`
	PolicyGvk                *Child           `json:"policyGvk,omitempty" yaml:"policyGvk,omitempty" nexus:"child"`
	TemplatesGvk             *Child           `json:"templatesGvk,omitempty" yaml:"templatesGvk,omitempty" nexus:"child"`
	ProgressiveUpgradeGvk    *Child           `json:"progressiveUpgradeGvk,omitempty" yaml:"progressiveUpgradeGvk,omitempty" nexus:"child"`
	ExternalPluginsGvk       *Child           `json:"externalPluginsGvk,omitempty" yaml:"externalPluginsGvk,omitempty" nexus:"child"`
	CertificatesGvk          map[string]Child `json:"certificatesGvk,omitempty" yaml:"certificatesGvk,omitempty" nexus:"children"`
	ExternalAccountsGvk      map[string]Child `json:"externalAccountsGvk,omitempty" yaml:"externalAccountsGvk,omitempty" nexus:"children"`
	ExternalAuditStorageGvk  *Child           `json:"externalAuditStorageGvk,omitempty" yaml:"externalAuditStorageGvk,omitempty" nexus:"child"`
	ExternalDNSGvk           map[string]Child `json:"externalDNSGvk,omitempty" yaml:"externalDNSGvk,omitempty" nexus:"children"`
	ExternalLBGvk            map[string]Child `json:"externalLBGvk,omitempty" yaml:"externalLBGvk,omitempty" nexus:"children"`
	AutoscalerFolderGvk      *Child           `json:"autoscalerFolderGvk,omitempty" yaml:"autoscalerFolderGvk,omitempty" nexus:"child"`
	ClustersGvk              *Child           `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"child"`
	ServiceLevelObjectiveGvk *Child           `json:"serviceLevelObjectiveGvk,omitempty" yaml:"serviceLevelObjectiveGvk,omitempty" nexus:"child"`
	FeatureFlagsGvk          map[string]Child `json:"featureFlagsGvk,omitempty" yaml:"featureFlagsGvk,omitempty" nexus:"children"`
	ProjectsGvk              map[string]Child `json:"projectsGvk,omitempty" yaml:"projectsGvk,omitempty" nexus:"children"`
	ServiceDirectoryGvk      map[string]Child `json:"serviceDirectoryGvk,omitempty" yaml:"serviceDirectoryGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Config `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ConnectionStatus struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ConnectionStatusSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ConnectionStatusNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ConnectionStatusNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ConnectionStatus) CRDName() string {
	return "connectionstatuses.global.tsm.tanzu.vmware.com"
}

func (c *ConnectionStatus) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ConnectionStatusSpec struct {
	Connected bool   `json:"connected" yaml:"connected"`
	Message   string `json:"message" yaml:"message"`
	Code      int    `json:"code" yaml:"code"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ConnectionStatusList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ConnectionStatus `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DataFolderDomainCluster struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`

	Status DataFolderDomainClusterNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DataFolderDomainClusterNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DataFolderDomainCluster) CRDName() string {
	return "datafolderdomainclusters.global.tsm.tanzu.vmware.com"
}

func (c *DataFolderDomainCluster) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DataFolderDomainClusterList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DataFolderDomainCluster `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DataFolderDomainServiceVersion struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`

	Status DataFolderDomainServiceVersionNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DataFolderDomainServiceVersionNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DataFolderDomainServiceVersion) CRDName() string {
	return "datafolderdomainserviceversions.global.tsm.tanzu.vmware.com"
}

func (c *DataFolderDomainServiceVersion) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DataFolderDomainServiceVersionList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DataFolderDomainServiceVersion `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DataFolderDomainService struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DataFolderDomainServiceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DataFolderDomainServiceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DataFolderDomainServiceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DataFolderDomainService) CRDName() string {
	return "datafolderdomainservices.global.tsm.tanzu.vmware.com"
}

func (c *DataFolderDomainService) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DataFolderDomainServiceSpec struct {
	VersionsGvk map[string]Child `json:"versionsGvk,omitempty" yaml:"versionsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DataFolderDomainServiceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DataFolderDomainService `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DataFolderDomain struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DataFolderDomainSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DataFolderDomainNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DataFolderDomainNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DataFolderDomain) CRDName() string {
	return "datafolderdomains.global.tsm.tanzu.vmware.com"
}

func (c *DataFolderDomain) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DataFolderDomainSpec struct {
	ClusterGvk  *Child           `json:"clusterGvk,omitempty" yaml:"clusterGvk,omitempty" nexus:"child"`
	ServiceGvk  map[string]Child `json:"serviceGvk,omitempty" yaml:"serviceGvk,omitempty" nexus:"children"`
	DatabaseGvk *Child           `json:"databaseGvk,omitempty" yaml:"databaseGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DataFolderDomainList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DataFolderDomain `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DataFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DataFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DataFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DataFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DataFolder) CRDName() string {
	return "datafolders.global.tsm.tanzu.vmware.com"
}

func (c *DataFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DataFolderSpec struct {
	DomainGvk *Child `json:"domainGvk,omitempty" yaml:"domainGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DataFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DataFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DataGroup struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DataGroupSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DataGroupNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DataGroupNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DataGroup) CRDName() string {
	return "datagroups.global.tsm.tanzu.vmware.com"
}

func (c *DataGroup) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DataGroupSpec struct {
	DisplayName string `json:"displayName" yaml:"displayName"`
	Description string `json:"description" yaml:"description"`
	Scope       string `json:"scope" yaml:"scope"`
	Color       string `json:"color" yaml:"color"`
	Rules       string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/resourceGroup\", gofile:\"resource_group.go\", name:\"Rules\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DataGroupList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DataGroup `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DataTemplate struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`

	Status DataTemplateNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DataTemplateNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DataTemplate) CRDName() string {
	return "datatemplates.global.tsm.tanzu.vmware.com"
}

func (c *DataTemplate) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DataTemplateList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DataTemplate `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Database struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DatabaseSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DatabaseNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DatabaseNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Database) CRDName() string {
	return "databases.global.tsm.tanzu.vmware.com"
}

func (c *Database) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DatabaseSpec struct {
	TablesGvk      map[string]Child `json:"tablesGvk,omitempty" yaml:"tablesGvk,omitempty" nexus:"children"`
	DirectoriesGvk map[string]Child `json:"directoriesGvk,omitempty" yaml:"directoriesGvk,omitempty" nexus:"children"`
	BucketsGvk     map[string]Child `json:"bucketsGvk,omitempty" yaml:"bucketsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DatabaseList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Database `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DCRegion struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DCRegionSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DCRegionNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DCRegionNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DCRegion) CRDName() string {
	return "dcregions.global.tsm.tanzu.vmware.com"
}

func (c *DCRegion) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DCRegionSpec struct {
	Name     string           `json:"name" yaml:"name"`
	ZonesGvk map[string]Child `json:"zonesGvk,omitempty" yaml:"zonesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DCRegionList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DCRegion `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DCZone struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DCZoneSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DCZoneNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DCZoneNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DCZone) CRDName() string {
	return "dczones.global.tsm.tanzu.vmware.com"
}

func (c *DCZone) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DCZoneSpec struct {
	Name        string          `json:"name" yaml:"name"`
	ClustersGvk map[string]Link `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DCZoneList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DCZone `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DestinationRule struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DestinationRuleSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DestinationRuleNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DestinationRuleNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DestinationRule) CRDName() string {
	return "destinationrules.global.tsm.tanzu.vmware.com"
}

func (c *DestinationRule) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DestinationRuleSpec struct {
	Name                   string          `json:"name" yaml:"name"`
	Annotations            string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	Labels                 string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	CreationTimestamp      string          `json:"creationTimestamp" yaml:"creationTimestamp"`
	ApiLink                string          `json:"apiLink" yaml:"apiLink"`
	Uid                    string          `json:"uid" yaml:"uid"`
	Host                   string          `json:"host" yaml:"host"`
	TrafficPolicy          string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	Subsets                string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	ExportTo               []string        `nexus-graphql-nullable:"false"`
	ServiceGvk             *Link           `json:"serviceGvk,omitempty" yaml:"serviceGvk,omitempty" nexus:"link"`
	ServiceDeploymentsGvk  map[string]Link `json:"serviceDeploymentsGvk,omitempty" yaml:"serviceDeploymentsGvk,omitempty" nexus:"links"`
	ServiceReplicaSetsGvk  map[string]Link `json:"serviceReplicaSetsGvk,omitempty" yaml:"serviceReplicaSetsGvk,omitempty" nexus:"links"`
	ServiceStatefulSetsGvk map[string]Link `json:"serviceStatefulSetsGvk,omitempty" yaml:"serviceStatefulSetsGvk,omitempty" nexus:"links"`
	ServiceDaemonSetsGvk   map[string]Link `json:"serviceDaemonSetsGvk,omitempty" yaml:"serviceDaemonSetsGvk,omitempty" nexus:"links"`
	ServiceJobsGvk         map[string]Link `json:"serviceJobsGvk,omitempty" yaml:"serviceJobsGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DestinationRuleList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DestinationRule `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Directory struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DirectorySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DirectoryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DirectoryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Directory) CRDName() string {
	return "directories.global.tsm.tanzu.vmware.com"
}

func (c *Directory) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DirectorySpec struct {
	TemplateGvk  *Link `json:"templateGvk,omitempty" yaml:"templateGvk,omitempty" nexus:"link"`
	InventoryGvk *Link `json:"inventoryGvk,omitempty" yaml:"inventoryGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DirectoryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Directory `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DNSConfigFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DNSConfigFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DNSConfigFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DNSConfigFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DNSConfigFolder) CRDName() string {
	return "dnsconfigfolders.global.tsm.tanzu.vmware.com"
}

func (c *DNSConfigFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DNSConfigFolderSpec struct {
	DnsConfigGvk map[string]Child `json:"dnsConfigGvk,omitempty" yaml:"dnsConfigGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DNSConfigFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DNSConfigFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DNSConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DNSConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DNSConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DNSConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DNSConfig) CRDName() string {
	return "dnsconfigs.global.tsm.tanzu.vmware.com"
}

func (c *DNSConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DNSConfigSpec struct {
	OwnedBy   string `json:"ownedBy" yaml:"ownedBy"`
	DnsSuffix string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"DNSList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DNSConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DNSConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DNSProbeConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DNSProbeConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DNSProbeConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DNSProbeConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DNSProbeConfig) CRDName() string {
	return "dnsprobeconfigs.global.tsm.tanzu.vmware.com"
}

func (c *DNSProbeConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DNSProbeConfigSpec struct {
	Domain          string `json:"domain" yaml:"domain"`
	CreateTimestamp string `json:"createTimestamp" yaml:"createTimestamp"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DNSProbeConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DNSProbeConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DNSProbeStatus struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DNSProbeStatusSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DNSProbeStatusNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DNSProbeStatusNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DNSProbeStatus) CRDName() string {
	return "dnsprobestatuses.global.tsm.tanzu.vmware.com"
}

func (c *DNSProbeStatus) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DNSProbeStatusSpec struct {
	Name            string `json:"name" yaml:"name"`
	Domain          string `json:"domain" yaml:"domain"`
	Success         bool   `json:"success" yaml:"success"`
	UpdateTimestamp string `json:"updateTimestamp" yaml:"updateTimestamp"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DNSProbeStatusList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DNSProbeStatus `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DNSProbesConfigFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DNSProbesConfigFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DNSProbesConfigFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DNSProbesConfigFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DNSProbesConfigFolder) CRDName() string {
	return "dnsprobesconfigfolders.global.tsm.tanzu.vmware.com"
}

func (c *DNSProbesConfigFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DNSProbesConfigFolderSpec struct {
	DnsProbeConfigsGvk map[string]Child `json:"dnsProbeConfigsGvk,omitempty" yaml:"dnsProbeConfigsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DNSProbesConfigFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DNSProbesConfigFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type DomainConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DomainConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DomainConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DomainConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *DomainConfig) CRDName() string {
	return "domainconfigs.global.tsm.tanzu.vmware.com"
}

func (c *DomainConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DomainConfigSpec struct {
	Name                           string           `json:"name" yaml:"name"`
	OwnedBy                        string           `json:"ownedBy" yaml:"ownedBy"`
	Labels                         string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	PolicyGvk                      map[string]Child `json:"policyGvk,omitempty" yaml:"policyGvk,omitempty" nexus:"children"`
	LabelConfigGvk                 *Child           `json:"labelConfigGvk,omitempty" yaml:"labelConfigGvk,omitempty" nexus:"child"`
	NetworkAttachmentDefinitionGvk map[string]Child `json:"networkAttachmentDefinitionGvk,omitempty" yaml:"networkAttachmentDefinitionGvk,omitempty" nexus:"children"`
	ServicesGvk                    map[string]Child `json:"servicesGvk,omitempty" yaml:"servicesGvk,omitempty" nexus:"children"`
	ServiceEntriesGvk              map[string]Child `json:"serviceEntriesGvk,omitempty" yaml:"serviceEntriesGvk,omitempty" nexus:"children"`
	GatewayConfigGvk               map[string]Child `json:"gatewayConfigGvk,omitempty" yaml:"gatewayConfigGvk,omitempty" nexus:"children"`
	AutoscalersGvk                 map[string]Child `json:"autoscalersGvk,omitempty" yaml:"autoscalersGvk,omitempty" nexus:"children"`
	HostConfigV2Gvk                map[string]Child `json:"hostConfigV2Gvk,omitempty" yaml:"hostConfigV2Gvk,omitempty" nexus:"children"`
	InboundAuthenticationConfigGvk map[string]Child `json:"inboundAuthenticationConfigGvk,omitempty" yaml:"inboundAuthenticationConfigGvk,omitempty" nexus:"children"`
	SlosGvk                        map[string]Child `json:"slosGvk,omitempty" yaml:"slosGvk,omitempty" nexus:"children"`
	SecretsGvk                     map[string]Child `json:"secretsGvk,omitempty" yaml:"secretsGvk,omitempty" nexus:"children"`
	ExternalServicesGvk            map[string]Child `json:"externalServicesGvk,omitempty" yaml:"externalServicesGvk,omitempty" nexus:"children"`
	ApiDiscoveryGvk                map[string]Child `json:"apiDiscoveryGvk,omitempty" yaml:"apiDiscoveryGvk,omitempty" nexus:"children"`
	GeoDiscoveryGvk                map[string]Child `json:"geoDiscoveryGvk,omitempty" yaml:"geoDiscoveryGvk,omitempty" nexus:"children"`
	PiiDiscoveryGvk                map[string]Child `json:"piiDiscoveryGvk,omitempty" yaml:"piiDiscoveryGvk,omitempty" nexus:"children"`
	AttackDiscoveryGvk             map[string]Child `json:"attackDiscoveryGvk,omitempty" yaml:"attackDiscoveryGvk,omitempty" nexus:"children"`
	UserDiscoveryGvk               map[string]Child `json:"userDiscoveryGvk,omitempty" yaml:"userDiscoveryGvk,omitempty" nexus:"children"`
	PublicServiceGvk               map[string]Child `json:"publicServiceGvk,omitempty" yaml:"publicServiceGvk,omitempty" nexus:"children"`
	GnsAccessControlPolicyGvk      map[string]Child `json:"gnsAccessControlPolicyGvk,omitempty" yaml:"gnsAccessControlPolicyGvk,omitempty" nexus:"children"`
	GnsSchemaViolationDiscoveryGvk map[string]Child `json:"gnsSchemaViolationDiscoveryGvk,omitempty" yaml:"gnsSchemaViolationDiscoveryGvk,omitempty" nexus:"children"`
	GnsSegmentationPolicyGvk       map[string]Child `json:"gnsSegmentationPolicyGvk,omitempty" yaml:"gnsSegmentationPolicyGvk,omitempty" nexus:"children"`
	CertificateAuthorityGvk        map[string]Child `json:"certificateAuthorityGvk,omitempty" yaml:"certificateAuthorityGvk,omitempty" nexus:"children"`
	GnsEndpointsConfigGvk          map[string]Child `json:"gnsEndpointsConfigGvk,omitempty" yaml:"gnsEndpointsConfigGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DomainConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []DomainConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Domain struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DomainSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DomainNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DomainNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Domain) CRDName() string {
	return "domains.global.tsm.tanzu.vmware.com"
}

func (c *Domain) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DomainSpec struct {
	Name                           string           `json:"name" yaml:"name"`
	EnviornmentType                string           `nexus-graphql-nullable:"false"`
	ApiLink                        string           `json:"apiLink" yaml:"apiLink"`
	Annotations                    string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	Labels                         string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	Metadata                       string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	SecretHashesGvk                map[string]Child `json:"secretHashesGvk,omitempty" yaml:"secretHashesGvk,omitempty" nexus:"children"`
	ServiceInstancesGvk            map[string]Child `json:"serviceInstancesGvk,omitempty" yaml:"serviceInstancesGvk,omitempty" nexus:"children"`
	ServiceDeploymentsGvk          map[string]Child `json:"serviceDeploymentsGvk,omitempty" yaml:"serviceDeploymentsGvk,omitempty" nexus:"children"`
	ServiceStatefulSetsGvk         map[string]Child `json:"serviceStatefulSetsGvk,omitempty" yaml:"serviceStatefulSetsGvk,omitempty" nexus:"children"`
	ServiceDaemonSetsGvk           map[string]Child `json:"serviceDaemonSetsGvk,omitempty" yaml:"serviceDaemonSetsGvk,omitempty" nexus:"children"`
	ServiceReplicaSetsGvk          map[string]Child `json:"serviceReplicaSetsGvk,omitempty" yaml:"serviceReplicaSetsGvk,omitempty" nexus:"children"`
	ServiceCronJobsGvk             map[string]Child `json:"serviceCronJobsGvk,omitempty" yaml:"serviceCronJobsGvk,omitempty" nexus:"children"`
	ServiceJobsGvk                 map[string]Child `json:"serviceJobsGvk,omitempty" yaml:"serviceJobsGvk,omitempty" nexus:"children"`
	VirtualServicesGvk             map[string]Child `json:"virtualServicesGvk,omitempty" yaml:"virtualServicesGvk,omitempty" nexus:"children"`
	ServiceEntryGvk                map[string]Child `json:"serviceEntryGvk,omitempty" yaml:"serviceEntryGvk,omitempty" nexus:"children"`
	WorkloadEntryGvk               map[string]Child `json:"workloadEntryGvk,omitempty" yaml:"workloadEntryGvk,omitempty" nexus:"children"`
	DestinationRulesGvk            map[string]Child `json:"destinationRulesGvk,omitempty" yaml:"destinationRulesGvk,omitempty" nexus:"children"`
	ServicesGvk                    map[string]Child `json:"servicesGvk,omitempty" yaml:"servicesGvk,omitempty" nexus:"children"`
	EndpointsGvk                   map[string]Child `json:"endpointsGvk,omitempty" yaml:"endpointsGvk,omitempty" nexus:"children"`
	GatewaysGvk                    map[string]Child `json:"gatewaysGvk,omitempty" yaml:"gatewaysGvk,omitempty" nexus:"children"`
	AuthenticationPoliciesGvk      map[string]Child `json:"authenticationPoliciesGvk,omitempty" yaml:"authenticationPoliciesGvk,omitempty" nexus:"children"`
	ConfigmapGvk                   map[string]Child `json:"configmapGvk,omitempty" yaml:"configmapGvk,omitempty" nexus:"children"`
	EnvoyfilterGvk                 map[string]Child `json:"envoyfilterGvk,omitempty" yaml:"envoyfilterGvk,omitempty" nexus:"children"`
	AutoscalersGvk                 map[string]Child `json:"autoscalersGvk,omitempty" yaml:"autoscalersGvk,omitempty" nexus:"children"`
	PeerAuthenticationGvk          map[string]Child `json:"peerAuthenticationGvk,omitempty" yaml:"peerAuthenticationGvk,omitempty" nexus:"children"`
	KnativeIngressesGvk            map[string]Child `json:"knativeIngressesGvk,omitempty" yaml:"knativeIngressesGvk,omitempty" nexus:"children"`
	NetworkAttachmentDefinitionGvk map[string]Child `json:"networkAttachmentDefinitionGvk,omitempty" yaml:"networkAttachmentDefinitionGvk,omitempty" nexus:"children"`
	IssuersGvk                     map[string]Child `json:"issuersGvk,omitempty" yaml:"issuersGvk,omitempty" nexus:"children"`
	CertificatesGvk                map[string]Child `json:"certificatesGvk,omitempty" yaml:"certificatesGvk,omitempty" nexus:"children"`
	CertificateRequestsGvk         map[string]Child `json:"certificateRequestsGvk,omitempty" yaml:"certificateRequestsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DomainList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Domain `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Endpoints struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              EndpointsSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            EndpointsNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type EndpointsNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Endpoints) CRDName() string {
	return "endpointses.global.tsm.tanzu.vmware.com"
}

func (c *Endpoints) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type EndpointsSpec struct {
	Name     string `json:"name" yaml:"name"`
	Metadata string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Subsets  string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"EndpointSubsets\")"`
	GnsId    string `json:"gnsId" yaml:"gnsId"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type EndpointsList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Endpoints `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type EnvoyFilter struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              EnvoyFilterSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            EnvoyFilterNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type EnvoyFilterNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *EnvoyFilter) CRDName() string {
	return "envoyfilters.global.tsm.tanzu.vmware.com"
}

func (c *EnvoyFilter) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type EnvoyFilterSpec struct {
	Name        string `json:"name" yaml:"name"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Annotations string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Spec        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/inventory/cluster/domain/envoy-filter/envoyfilter.d.ts\", gofile:\"envoyfilter.go\", name:\"EnvoyFilterSpec\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type EnvoyFilterList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []EnvoyFilter `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalAccountConfigN struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalAccountConfigNSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalAccountConfigNNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalAccountConfigNNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalAccountConfigN) CRDName() string {
	return "externalaccountconfigns.global.tsm.tanzu.vmware.com"
}

func (c *ExternalAccountConfigN) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalAccountConfigNSpec struct {
	Config      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/externalAccount\", gofile:\"external_account.go\", name: \"ExternalAccountConfig\")"`
	ProxyConfig string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/externalAccount\", gofile:\"external_account.go\", name: \"ExternalAccountProxyConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalAccountConfigNList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalAccountConfigN `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalAuditStorage struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalAuditStorageSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalAuditStorageNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalAuditStorageNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalAuditStorage) CRDName() string {
	return "externalauditstorages.global.tsm.tanzu.vmware.com"
}

func (c *ExternalAuditStorage) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalAuditStorageSpec struct {
	Config string `nexus-graphql-nullable:"false" nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/externalAuditStorage\", gofile:\"external-audit-storage.go\", name: \"ExternalAuditStorageConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalAuditStorageList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalAuditStorage `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSConfigN struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSConfigNSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSConfigNNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSConfigNNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSConfigN) CRDName() string {
	return "externaldnsconfigns.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSConfigN) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSConfigNSpec struct {
	Config     string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/externalDNS\", gofile:\"external_dns.go\", name: \"ExternalDNSConfig\")"`
	AccountGvk *Link  `json:"accountGvk,omitempty" yaml:"accountGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSConfigNList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSConfigN `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSInventoryHealthCheck struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSInventoryHealthCheckSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSInventoryHealthCheckNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSInventoryHealthCheckNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSInventoryHealthCheck) CRDName() string {
	return "externaldnsinventoryhealthchecks.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSInventoryHealthCheck) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSInventoryHealthCheckSpec struct {
	Name            string `json:"name" yaml:"name"`
	Protocol        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/template.ts\", gofile:\"health_check_config.go\", name:\"HealthCheckConfigProtocol\")"`
	Port            int    `json:"port" yaml:"port"`
	Path            string `json:"path" yaml:"path"`
	HealthThreshold int    `json:"healthThreshold" yaml:"healthThreshold"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSInventoryHealthCheckList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSInventoryHealthCheck `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSInventoryPrimaryDomain struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSInventoryPrimaryDomainSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSInventoryPrimaryDomainNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSInventoryPrimaryDomainNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSInventoryPrimaryDomain) CRDName() string {
	return "externaldnsinventoryprimarydomains.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSInventoryPrimaryDomain) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSInventoryPrimaryDomainSpec struct {
	Region        string           `json:"region" yaml:"region"`
	DnsRecordsGvk map[string]Child `json:"dnsRecordsGvk,omitempty" yaml:"dnsRecordsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSInventoryPrimaryDomainList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSInventoryPrimaryDomain `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSInventoryRecord struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSInventoryRecordSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSInventoryRecordNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSInventoryRecordNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSInventoryRecord) CRDName() string {
	return "externaldnsinventoryrecords.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSInventoryRecord) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSInventoryRecordSpec struct {
	DnsRecordType  string `nexus-alias-type:"ExternalDNSRecordType"`
	Ttl            int    `json:"ttl" yaml:"ttl"`
	Value          string `json:"value" yaml:"value"`
	Weight         int    `json:"weight" yaml:"weight"`
	HealthCheckGvk *Link  `json:"healthCheckGvk,omitempty" yaml:"healthCheckGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSInventoryRecordList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSInventoryRecord `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSInventoryZone struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSInventoryZoneSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSInventoryZoneNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSInventoryZoneNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSInventoryZone) CRDName() string {
	return "externaldnsinventoryzones.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSInventoryZone) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSInventoryZoneSpec struct {
	Records           int             `json:"records" yaml:"records"`
	PrimaryDomainsGvk map[string]Link `json:"primaryDomainsGvk,omitempty" yaml:"primaryDomainsGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSInventoryZoneList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSInventoryZone `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSInventory struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSInventorySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSInventoryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSInventoryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSInventory) CRDName() string {
	return "externaldnsinventories.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSInventory) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSInventorySpec struct {
	EnabledForProjects []string         `json:"enabledForProjects" yaml:"enabledForProjects"`
	ZonesGvk           map[string]Child `json:"zonesGvk,omitempty" yaml:"zonesGvk,omitempty" nexus:"children"`
	PrimaryDomainsGvk  map[string]Child `json:"primaryDomainsGvk,omitempty" yaml:"primaryDomainsGvk,omitempty" nexus:"children"`
	HealthChecksGvk    map[string]Child `json:"healthChecksGvk,omitempty" yaml:"healthChecksGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSInventoryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSInventory `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSRuntimeEndpoint struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSRuntimeEndpointSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSRuntimeEndpointNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSRuntimeEndpointNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSRuntimeEndpoint) CRDName() string {
	return "externaldnsruntimeendpoints.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSRuntimeEndpoint) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSRuntimeEndpointSpec struct {
	Weight     int    `json:"weight" yaml:"weight"`
	Active     bool   `json:"active" yaml:"active"`
	GnsVersion string `json:"gnsVersion" yaml:"gnsVersion"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSRuntimeEndpointList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSRuntimeEndpoint `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSRuntimePrimaryDomain struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSRuntimePrimaryDomainSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSRuntimePrimaryDomainNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSRuntimePrimaryDomainNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSRuntimePrimaryDomain) CRDName() string {
	return "externaldnsruntimeprimarydomains.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSRuntimePrimaryDomain) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSRuntimePrimaryDomainSpec struct {
	PrimaryDomain string           `json:"primaryDomain" yaml:"primaryDomain"`
	DnsServerID   string           `nexus-alias-type:"ID"`
	SubdomainsGvk map[string]Child `json:"subdomainsGvk,omitempty" yaml:"subdomainsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSRuntimePrimaryDomainList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSRuntimePrimaryDomain `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSRuntime struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSRuntimeSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSRuntimeNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSRuntimeNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSRuntime) CRDName() string {
	return "externaldnsruntimes.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSRuntime) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSRuntimeSpec struct {
	PrimaryDomainsGvk map[string]Child `json:"primaryDomainsGvk,omitempty" yaml:"primaryDomainsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSRuntimeList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSRuntime `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalDNSRuntimeSubdomain struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalDNSRuntimeSubdomainSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalDNSRuntimeSubdomainNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalDNSRuntimeSubdomainNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalDNSRuntimeSubdomain) CRDName() string {
	return "externaldnsruntimesubdomains.global.tsm.tanzu.vmware.com"
}

func (c *ExternalDNSRuntimeSubdomain) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalDNSRuntimeSubdomainSpec struct {
	RecordType              string           `nexus-alias-type:"ExternalDNSRecordType"`
	Ttl                     int              `json:"ttl" yaml:"ttl"`
	HealthCheckDomain       string           `json:"healthCheckDomain" yaml:"healthCheckDomain"`
	HealthCheckExternalPort int              `json:"healthCheckExternalPort" yaml:"healthCheckExternalPort"`
	HealthCheckPort         int              `json:"healthCheckPort" yaml:"healthCheckPort"`
	HealthCheckPath         string           `json:"healthCheckPath" yaml:"healthCheckPath"`
	HealthCheckThreshold    int              `json:"healthCheckThreshold" yaml:"healthCheckThreshold"`
	HealthCheckInterval     int              `json:"healthCheckInterval" yaml:"healthCheckInterval"`
	HealthCheckProtocol     string           `json:"healthCheckProtocol" yaml:"healthCheckProtocol"`
	GnsVersion              string           `json:"gnsVersion" yaml:"gnsVersion"`
	EndpointsGvk            map[string]Child `json:"endpointsGvk,omitempty" yaml:"endpointsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalDNSRuntimeSubdomainList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalDNSRuntimeSubdomain `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalLBConfigN struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalLBConfigNSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalLBConfigNNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalLBConfigNNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalLBConfigN) CRDName() string {
	return "externallbconfigns.global.tsm.tanzu.vmware.com"
}

func (c *ExternalLBConfigN) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalLBConfigNSpec struct {
	Config string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/externalLB\", gofile:\"external_lb.go\", name: \"ExternalLBConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalLBConfigNList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalLBConfigN `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalPluginCapability struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalPluginCapabilitySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalPluginCapabilityNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalPluginCapabilityNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalPluginCapability) CRDName() string {
	return "externalplugincapabilities.global.tsm.tanzu.vmware.com"
}

func (c *ExternalPluginCapability) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalPluginCapabilitySpec struct {
	Capability string `nexus-graphql-tsm-directive:"@protobuf(file:\"./common-apis/protos/external-plugin/ep-server.proto\", name:\"RegisterCapabilityArguments\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalPluginCapabilityList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalPluginCapability `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalPluginConfigFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalPluginConfigFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalPluginConfigFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalPluginConfigFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalPluginConfigFolder) CRDName() string {
	return "externalpluginconfigfolders.global.tsm.tanzu.vmware.com"
}

func (c *ExternalPluginConfigFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalPluginConfigFolderSpec struct {
	PluginsGvk map[string]Child `json:"pluginsGvk,omitempty" yaml:"pluginsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalPluginConfigFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalPluginConfigFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalPluginConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalPluginConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalPluginConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalPluginConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalPluginConfig) CRDName() string {
	return "externalpluginconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ExternalPluginConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalPluginConfigSpec struct {
	Name               string           `json:"name" yaml:"name"`
	ProviderName       string           `json:"providerName" yaml:"providerName"`
	InstallConfig      string           `json:"installConfig" yaml:"installConfig"`
	Type               string           `json:"type" yaml:"type"`
	PluginInstancesGvk map[string]Child `json:"pluginInstancesGvk,omitempty" yaml:"pluginInstancesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalPluginConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalPluginConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalPluginInstanceConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalPluginInstanceConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalPluginInstanceConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalPluginInstanceConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalPluginInstanceConfig) CRDName() string {
	return "externalplugininstanceconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ExternalPluginInstanceConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalPluginInstanceConfigSpec struct {
	Name           string           `json:"name" yaml:"name"`
	SecurityToken  string           `nexus-graphql-tsm-directive:"@jsonencoded(file: \"./root/config/external-plugin-config-folder/external-plugin-config/external-plugin-instance-config/external-plugins.ts\", gofile:\"external_plugins.go\", name: \"ExternalPluginSecurityToken\")"`
	CapabilitiyGvk *Child           `json:"capabilitiyGvk,omitempty" yaml:"capabilitiyGvk,omitempty" nexus:"child"`
	MonitorsGvk    map[string]Child `json:"monitorsGvk,omitempty" yaml:"monitorsGvk,omitempty" nexus:"children"`
	ClustersGvk    map[string]Link  `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalPluginInstanceConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalPluginInstanceConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalPluginMonitor struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalPluginMonitorSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalPluginMonitorNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalPluginMonitorNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalPluginMonitor) CRDName() string {
	return "externalpluginmonitors.global.tsm.tanzu.vmware.com"
}

func (c *ExternalPluginMonitor) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalPluginMonitorSpec struct {
	ObjType          string `nexus-graphql-tsm-directive:"@protobuf(file:\"./common-apis/protos/external-plugin/ep-server.proto\", name:\"ObjectTypes\")"`
	PluginCapability string `nexus-graphql-tsm-directive:"@protobuf(file:\"./common-apis/protos/external-plugin/ep-server.proto\", name:\"PluginCapability\")"`
	Fn               string `nexus-graphql-tsm-directive:"@jsonencoded(file: \"./root/config/external-plugin-config-folder/external-plugin-config/external-plugin-instance-config/external-plugins.ts\", gofile:\"external_plugins.go\", name: \"ExternalPluginFn\")"`
	Arg1             string `nexus-graphql-tsm-directive:"@jsonencoded(file: \"./root/config/external-plugin-config-folder/external-plugin-config/external-plugin-instance-config/external-plugins.ts\", gofile:\"external_plugins.go\", name: \"ExternalPluginFnArg\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalPluginMonitorList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalPluginMonitor `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalServicesRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalServicesRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalServicesRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalServicesRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalServicesRT) CRDName() string {
	return "externalservicesrts.global.tsm.tanzu.vmware.com"
}

func (c *ExternalServicesRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalServicesRTSpec struct {
	OwnedBy           string   `json:"ownedBy" yaml:"ownedBy"`
	CreatedByGNS      string   `json:"createdByGNS" yaml:"createdByGNS"`
	CreatedByESName   string   `json:"createdByESName" yaml:"createdByESName"`
	CreatedBySDFolder string   `json:"createdBySDFolder" yaml:"createdBySDFolder"`
	CreatedBySDEntry  string   `json:"createdBySDEntry" yaml:"createdBySDEntry"`
	ServicePort       int      `json:"servicePort" yaml:"servicePort"`
	Protocol          string   `nexus-alias-type:"ExternalServicesRTProtocols"`
	Hostname          string   `json:"hostname" yaml:"hostname"`
	Port              int      `json:"port" yaml:"port"`
	ServerCertificate string   `json:"serverCertificate" yaml:"serverCertificate"`
	HostnameAlias     string   `json:"hostnameAlias" yaml:"hostnameAlias"`
	EndpointList      []string `nexus-graphql-nullable:"false"`
	EgressGateways    []string `nexus-graphql-nullable:"false"`
	ClientCertificate string   `json:"clientCertificate" yaml:"clientCertificate"`
	ClientKey         string   `json:"clientKey" yaml:"clientKey"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalServicesRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalServicesRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type FeatureFlag struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              FeatureFlagSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            FeatureFlagNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type FeatureFlagNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *FeatureFlag) CRDName() string {
	return "featureflags.global.tsm.tanzu.vmware.com"
}

func (c *FeatureFlag) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type FeatureFlagSpec struct {
	Name        string `json:"name" yaml:"name"`
	Description string `json:"description" yaml:"description"`
	Enable      bool   `json:"enable" yaml:"enable"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type FeatureFlagList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []FeatureFlag `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GatewayConfigListenerCertificate struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GatewayConfigListenerCertificateSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GatewayConfigListenerCertificateNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GatewayConfigListenerCertificateNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GatewayConfigListenerCertificate) CRDName() string {
	return "gatewayconfiglistenercertificates.global.tsm.tanzu.vmware.com"
}

func (c *GatewayConfigListenerCertificate) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GatewayConfigListenerCertificateSpec struct {
	EncryptedCertificate string `json:"encryptedCertificate" yaml:"encryptedCertificate"`
	EncryptedPrivateKey  string `json:"encryptedPrivateKey" yaml:"encryptedPrivateKey"`
	EncryptedCertChain   string `json:"encryptedCertChain" yaml:"encryptedCertChain"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GatewayConfigListenerCertificateList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GatewayConfigListenerCertificate `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GatewayConfigAdditionalListeners struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GatewayConfigAdditionalListenersSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GatewayConfigAdditionalListenersNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GatewayConfigAdditionalListenersNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GatewayConfigAdditionalListeners) CRDName() string {
	return "gatewayconfigadditionallistenerses.global.tsm.tanzu.vmware.com"
}

func (c *GatewayConfigAdditionalListeners) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GatewayConfigAdditionalListenersSpec struct {
	Name              string           `json:"name" yaml:"name"`
	Port              int              `json:"port" yaml:"port"`
	Protocol          string           `json:"protocol" yaml:"protocol"`
	TlsMode           string           `json:"tlsMode" yaml:"tlsMode"`
	OwnedBy           string           `json:"ownedBy" yaml:"ownedBy"`
	Hosts             []string         `json:"hosts" yaml:"hosts"`
	CertificateGvk    *Child           `json:"certificateGvk,omitempty" yaml:"certificateGvk,omitempty" nexus:"child"`
	ListenerRoutesGvk map[string]Child `json:"listenerRoutesGvk,omitempty" yaml:"listenerRoutesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GatewayConfigAdditionalListenersList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GatewayConfigAdditionalListeners `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GatewayConfigListenerDestinationRoute struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GatewayConfigListenerDestinationRouteSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GatewayConfigListenerDestinationRouteNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GatewayConfigListenerDestinationRouteNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GatewayConfigListenerDestinationRoute) CRDName() string {
	return "gatewayconfiglistenerdestinationroutes.global.tsm.tanzu.vmware.com"
}

func (c *GatewayConfigListenerDestinationRoute) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GatewayConfigListenerDestinationRouteSpec struct {
	Host   string   `json:"host" yaml:"host"`
	Target string   `json:"target" yaml:"target"`
	Paths  []string `json:"paths" yaml:"paths"`
	Port   int      `json:"port" yaml:"port"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GatewayConfigListenerDestinationRouteList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GatewayConfigListenerDestinationRoute `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GatewayConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GatewayConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GatewayConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GatewayConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GatewayConfig) CRDName() string {
	return "gatewayconfigs.global.tsm.tanzu.vmware.com"
}

func (c *GatewayConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GatewayConfigSpec struct {
	Name                   string           `json:"name" yaml:"name"`
	OwnedBy                string           `json:"ownedBy" yaml:"ownedBy"`
	Labels                 string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Listeners              string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/gateway.d.ts\", gofile:\"gateway.go\", name:\"GatewayConfigListeners\")"`
	AdditionalListenersGvk map[string]Child `json:"additionalListenersGvk,omitempty" yaml:"additionalListenersGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GatewayConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GatewayConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Gateway struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GatewaySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GatewayNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GatewayNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Gateway) CRDName() string {
	return "gateways.global.tsm.tanzu.vmware.com"
}

func (c *Gateway) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GatewaySpec struct {
	Name        string          `json:"name" yaml:"name"`
	Labels      string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Annotations string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	Spec        string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/gateway.d.ts\", gofile:\"gateway.go\", name:\"GatewaySpec\")"`
	ServicesGvk map[string]Link `json:"servicesGvk,omitempty" yaml:"servicesGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GatewayList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Gateway `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GeoDiscoveryRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GeoDiscoveryRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GeoDiscoveryRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GeoDiscoveryRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GeoDiscoveryRT) CRDName() string {
	return "geodiscoveryrts.global.tsm.tanzu.vmware.com"
}

func (c *GeoDiscoveryRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GeoDiscoveryRTSpec struct {
	Gnsid     string `json:"gnsid" yaml:"gnsid"`
	Selectors string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"gns_geo_discovery.go\", name:\"GeoDiscoveryClusterResourceSelectorRT\")"`
	Spec      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsGeoDiscovery\", gofile:\"gns_geo_discovery.go\", name:\"GeoDiscoveryGeoFencesConfigList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GeoDiscoveryRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GeoDiscoveryRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GeoDiscovery struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GeoDiscoverySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GeoDiscoveryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GeoDiscoveryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GeoDiscovery) CRDName() string {
	return "geodiscoveries.global.tsm.tanzu.vmware.com"
}

func (c *GeoDiscovery) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GeoDiscoverySpec struct {
	Description string `json:"description" yaml:"description"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"LabelsList\")"`
	Spec        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsGeoDiscovery\", gofile:\"gns_geo_discovery.go\", name:\"GeoDiscoveryConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GeoDiscoveryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GeoDiscovery `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GlobalNs struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GlobalNsSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GlobalNsNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GlobalNsNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GlobalNs) CRDName() string {
	return "globalnses.global.tsm.tanzu.vmware.com"
}

func (c *GlobalNs) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GlobalNsSpec struct {
	GnsName            string           `nexus-graphql-nullable:"false"`
	RoutingPoliciesGvk map[string]Child `json:"routingPoliciesGvk,omitempty" yaml:"routingPoliciesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GlobalNsList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GlobalNs `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GlobalRegistrationService struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GlobalRegistrationServiceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GlobalRegistrationServiceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GlobalRegistrationServiceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GlobalRegistrationService) CRDName() string {
	return "globalregistrationservices.global.tsm.tanzu.vmware.com"
}

func (c *GlobalRegistrationService) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GlobalRegistrationServiceSpec struct {
	BuildID        string           `nexus-graphql-nullable:"false"`
	Version        string           `nexus-graphql-nullable:"false"`
	ErrorCount     int              `json:"errorCount" yaml:"errorCount"`
	TenantsGvk     map[string]Child `json:"tenantsGvk,omitempty" yaml:"tenantsGvk,omitempty" nexus:"children"`
	TenantTokenGvk map[string]Child `json:"tenantTokenGvk,omitempty" yaml:"tenantTokenGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GlobalRegistrationServiceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GlobalRegistrationService `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GlobalNamespace struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GlobalNamespaceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GlobalNamespaceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GlobalNamespaceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GlobalNamespace) CRDName() string {
	return "globalnamespaces.global.tsm.tanzu.vmware.com"
}

func (c *GlobalNamespace) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GlobalNamespaceSpec struct {
	GnsGvk map[string]Child `json:"gnsGvk,omitempty" yaml:"gnsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GlobalNamespaceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GlobalNamespace `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsAccessControlPolicyRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsAccessControlPolicyRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsAccessControlPolicyRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsAccessControlPolicyRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsAccessControlPolicyRT) CRDName() string {
	return "gnsaccesscontrolpolicyrts.global.tsm.tanzu.vmware.com"
}

func (c *GnsAccessControlPolicyRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsAccessControlPolicyRTSpec struct {
	Gnsid string `json:"gnsid" yaml:"gnsid"`
	Spec  string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsAccessControlPolicy\", gofile:\"gns_access_control_policy.go\", name:\"GnsAccessControlPolicySpec\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsAccessControlPolicyRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsAccessControlPolicyRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsAccessControlPolicy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsAccessControlPolicySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsAccessControlPolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsAccessControlPolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsAccessControlPolicy) CRDName() string {
	return "gnsaccesscontrolpolicies.global.tsm.tanzu.vmware.com"
}

func (c *GnsAccessControlPolicy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsAccessControlPolicySpec struct {
	Description string `json:"description" yaml:"description"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"LabelsList\")"`
	Spec        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsAccessControlPolicy\", gofile:\"gns_access_control_policy.go\", name:\"GnsAccessControlPolicySpec\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsAccessControlPolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsAccessControlPolicy `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsBindingRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsBindingRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsBindingRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsBindingRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsBindingRT) CRDName() string {
	return "gnsbindingrts.global.tsm.tanzu.vmware.com"
}

func (c *GnsBindingRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsBindingRTSpec struct {
	Name                     string           `json:"name" yaml:"name"`
	Domain                   string           `json:"domain" yaml:"domain"`
	Namespaces               []string         `json:"namespaces" yaml:"namespaces"`
	ApiDiscoveryEnabled      bool             `json:"apiDiscoveryEnabled" yaml:"apiDiscoveryEnabled"`
	GnsSvcGroupRTGvk         map[string]Child `json:"gnsSvcGroupRTGvk,omitempty" yaml:"gnsSvcGroupRTGvk,omitempty" nexus:"children"`
	GnsRoutingRulesGvk       map[string]Child `json:"gnsRoutingRulesGvk,omitempty" yaml:"gnsRoutingRulesGvk,omitempty" nexus:"children"`
	GnsServiceEntryConfigGvk map[string]Child `json:"gnsServiceEntryConfigGvk,omitempty" yaml:"gnsServiceEntryConfigGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsBindingRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsBindingRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsEndpointsConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsEndpointsConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsEndpointsConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsEndpointsConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsEndpointsConfig) CRDName() string {
	return "gnsendpointsconfigs.global.tsm.tanzu.vmware.com"
}

func (c *GnsEndpointsConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsEndpointsConfigSpec struct {
	Endpoints        string   `nexus-graphql-nullable:"false"`
	GnsId            string   `nexus-graphql-nullable:"false"`
	EndpointServices []string `json:"endpointServices" yaml:"endpointServices"`
	ServicePortList  string   `nexus-graphql-nullable:"false" nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"ServicePortList\")"`
	Selector         string   `nexus-graphql-nullable:"false" nexus-graphql-tsm-directive:"@jsonencoded"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsEndpointsConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsEndpointsConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ExternalServiceConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ExternalServiceConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ExternalServiceConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ExternalServiceConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ExternalServiceConfig) CRDName() string {
	return "externalserviceconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ExternalServiceConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ExternalServiceConfigSpec struct {
	Spec   string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsExternalService\", gofile:\"gns_external_service.go\", name:\"GnsExternalServiceConfig\")"`
	System bool   `json:"system" yaml:"system"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ExternalServiceConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ExternalServiceConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type PublicServiceRouteConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              PublicServiceRouteConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            PublicServiceRouteConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type PublicServiceRouteConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *PublicServiceRouteConfig) CRDName() string {
	return "publicservicerouteconfigs.global.tsm.tanzu.vmware.com"
}

func (c *PublicServiceRouteConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type PublicServiceRouteConfigSpec struct {
	Type   string `json:"type" yaml:"type"`
	Routes string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsPublicService\", gofile:\"gns_public_service_route_config.go\", name: \"GnsPublicServiceRouteConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type PublicServiceRouteConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []PublicServiceRouteConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type PublicServiceConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              PublicServiceConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            PublicServiceConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type PublicServiceConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *PublicServiceConfig) CRDName() string {
	return "publicserviceconfigs.global.tsm.tanzu.vmware.com"
}

func (c *PublicServiceConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type PublicServiceConfigSpec struct {
	Fqdn              string           `json:"fqdn" yaml:"fqdn"`
	Config            string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsPublicService\", gofile:\"gns_public_service.go\", name: \"GnsPublicServiceConfig\")"`
	RoutingConfigsGvk map[string]Child `json:"routingConfigsGvk,omitempty" yaml:"routingConfigsGvk,omitempty" nexus:"children"`
	ExternalDNSGvk    map[string]Link  `json:"externalDNSGvk,omitempty" yaml:"externalDNSGvk,omitempty" nexus:"links"`
	CertificatesGvk   map[string]Link  `json:"certificatesGvk,omitempty" yaml:"certificatesGvk,omitempty" nexus:"links"`
	HealthChecksGvk   map[string]Link  `json:"healthChecksGvk,omitempty" yaml:"healthChecksGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type PublicServiceConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []PublicServiceConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GNSRoutingConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GNSRoutingConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GNSRoutingConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GNSRoutingConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GNSRoutingConfig) CRDName() string {
	return "gnsroutingconfigs.global.tsm.tanzu.vmware.com"
}

func (c *GNSRoutingConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GNSRoutingConfigSpec struct {
	Name string `nexus-graphql-nullable:"false"`
	Spec string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsTrafficManagement\", gofile:\"common.go\", name:\"TrafficRoutingPolicy\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GNSRoutingConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GNSRoutingConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsRoutingRuleConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsRoutingRuleConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsRoutingRuleConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsRoutingRuleConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsRoutingRuleConfig) CRDName() string {
	return "gnsroutingruleconfigs.global.tsm.tanzu.vmware.com"
}

func (c *GnsRoutingRuleConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsRoutingRuleConfigSpec struct {
	Name           string `nexus-graphql-nullable:"false"`
	OwnedBy        string `json:"ownedBy" yaml:"ownedBy"`
	ServiceFQDN    string `nexus-graphql-nullable:"false"`
	PortName       string `json:"portName" yaml:"portName"`
	Port           int    `json:"port" yaml:"port"`
	HttpRouteRules string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsTrafficManagement\", gofile:\"common.go\", name:\"HTTPRoutingRules\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsRoutingRuleConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsRoutingRuleConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsSegmentationPolicyRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsSegmentationPolicyRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsSegmentationPolicyRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsSegmentationPolicyRT) CRDName() string {
	return "gnssegmentationpolicyrts.global.tsm.tanzu.vmware.com"
}

func (c *GnsSegmentationPolicyRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyRTSpec struct {
	Gnsid string `json:"gnsid" yaml:"gnsid"`
	Spec  string `nexus-graphql-tsm-directive:"@jsonencoded(file: \"../common-apis/api/tenant/models/gnsSegmentationPolicy\", gofile:\"gns_segmentation_policy.go\", name:\"GnsSegmentationPolicySpec\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsSegmentationPolicyRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsSegmentationPolicyRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsSegmentationPolicy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsSegmentationPolicySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsSegmentationPolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsSegmentationPolicy) CRDName() string {
	return "gnssegmentationpolicies.global.tsm.tanzu.vmware.com"
}

func (c *GnsSegmentationPolicy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicySpec struct {
	Description string                                              `json:"description" yaml:"description"`
	Labels      string                                              `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"LabelsList\")"`
	Spec        customtsmtanzuvmwarecomv1.GnsSegmentationPolicySpec `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsSegmentationPolicy\", gofile: \"gns_segmentation_policy.go\", name:\"GnsSegmentationPolicySpec\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsSegmentationPolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsSegmentationPolicy `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsServiceEntryConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsServiceEntryConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsServiceEntryConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsServiceEntryConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsServiceEntryConfig) CRDName() string {
	return "gnsserviceentryconfigs.global.tsm.tanzu.vmware.com"
}

func (c *GnsServiceEntryConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsServiceEntryConfigSpec struct {
	Service  string `nexus-graphql-nullable:"false"`
	Ports    string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"ServicePortList\")"`
	Versions string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"ServiceVersionList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsServiceEntryConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsServiceEntryConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsSvcGroupRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsSvcGroupRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsSvcGroupRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsSvcGroupRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsSvcGroupRT) CRDName() string {
	return "gnssvcgrouprts.global.tsm.tanzu.vmware.com"
}

func (c *GnsSvcGroupRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsSvcGroupRTSpec struct {
	Name        string `json:"name" yaml:"name"`
	DisplayName string `json:"displayName" yaml:"displayName"`
	Description string `json:"description" yaml:"description"`
	Services    string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsServiceGroup\", gofile:\"gns_service_group.go\", name:\"ServiceGroupServiceList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsSvcGroupRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsSvcGroupRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GNSSvcGroup struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GNSSvcGroupSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GNSSvcGroupNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GNSSvcGroupNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GNSSvcGroup) CRDName() string {
	return "gnssvcgroups.global.tsm.tanzu.vmware.com"
}

func (c *GNSSvcGroup) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GNSSvcGroupSpec struct {
	DisplayName string          `json:"displayName" yaml:"displayName"`
	Description string          `json:"description" yaml:"description"`
	Color       string          `json:"color" yaml:"color"`
	Rules       string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/resourceGroup\", gofile:\"resource_group.go\", name:\"Rules\")"`
	ServicesGvk map[string]Link `json:"servicesGvk,omitempty" yaml:"servicesGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GNSSvcGroupList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GNSSvcGroup `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SharedServiceConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SharedServiceConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SharedServiceConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SharedServiceConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SharedServiceConfig) CRDName() string {
	return "sharedserviceconfigs.global.tsm.tanzu.vmware.com"
}

func (c *SharedServiceConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SharedServiceConfigSpec struct {
	Spec string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsPublicService\", gofile:\"gns_shared_service.go\", name: \"GnsSharedServiceConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SharedServiceConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SharedServiceConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GNS struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GNSSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GNSNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GNSNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GNS) CRDName() string {
	return "gnses.global.tsm.tanzu.vmware.com"
}

func (c *GNS) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GNSSpec struct {
	Domain                         string           `json:"domain" yaml:"domain"`
	UseSharedGateway               bool             `json:"useSharedGateway" yaml:"useSharedGateway"`
	MTLSEnforced                   bool             `json:"mTLSEnforced" yaml:"mTLSEnforced"`
	MTLSPermissive                 bool             `json:"mTLSPermissive" yaml:"mTLSPermissive"`
	ApiDiscoveryEnabled            bool             `json:"apiDiscoveryEnabled" yaml:"apiDiscoveryEnabled"`
	MTLSExceptions                 string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"MtlsExceptions\")"`
	CaType                         string           `json:"caType" yaml:"caType"`
	Ca                             string           `json:"ca" yaml:"ca"`
	Description                    string           `json:"description" yaml:"description"`
	Color                          string           `json:"color" yaml:"color"`
	Version                        string           `json:"version" yaml:"version"`
	ProjectId                      string           `json:"projectId" yaml:"projectId"`
	MemberDomains                  string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name: \"StringList\") # to be deprecated"`
	MatchingConditions             string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/globalNamespace\", gofile:\"global_namespace.go\", name:\"MatchConditions\")"`
	RoutingConfigGvk               *Child           `json:"routingConfigGvk,omitempty" yaml:"routingConfigGvk,omitempty" nexus:"child"`
	GnsServiceGroupsGvk            map[string]Child `json:"gnsServiceGroupsGvk,omitempty" yaml:"gnsServiceGroupsGvk,omitempty" nexus:"children"`
	PublicServicesGvk              map[string]Child `json:"publicServicesGvk,omitempty" yaml:"publicServicesGvk,omitempty" nexus:"children"`
	SharedServicesGvk              map[string]Child `json:"sharedServicesGvk,omitempty" yaml:"sharedServicesGvk,omitempty" nexus:"children"`
	SloPoliciesGvk                 map[string]Child `json:"sloPoliciesGvk,omitempty" yaml:"sloPoliciesGvk,omitempty" nexus:"children"`
	ExternalServicesGvk            map[string]Child `json:"externalServicesGvk,omitempty" yaml:"externalServicesGvk,omitempty" nexus:"children"`
	AutoscalingPoliciesGvk         map[string]Child `json:"autoscalingPoliciesGvk,omitempty" yaml:"autoscalingPoliciesGvk,omitempty" nexus:"children"`
	RoutingPoliciesGvk             map[string]Child `json:"routingPoliciesGvk,omitempty" yaml:"routingPoliciesGvk,omitempty" nexus:"children"`
	ApiDiscoveryGvk                map[string]Child `json:"apiDiscoveryGvk,omitempty" yaml:"apiDiscoveryGvk,omitempty" nexus:"children"`
	GeoDiscoveryGvk                map[string]Child `json:"geoDiscoveryGvk,omitempty" yaml:"geoDiscoveryGvk,omitempty" nexus:"children"`
	PiiDiscoveryGvk                map[string]Child `json:"piiDiscoveryGvk,omitempty" yaml:"piiDiscoveryGvk,omitempty" nexus:"children"`
	AttackDiscoveryGvk             map[string]Child `json:"attackDiscoveryGvk,omitempty" yaml:"attackDiscoveryGvk,omitempty" nexus:"children"`
	UserDiscoveryGvk               map[string]Child `json:"userDiscoveryGvk,omitempty" yaml:"userDiscoveryGvk,omitempty" nexus:"children"`
	GnsAccessControlPolicyGvk      map[string]Child `json:"gnsAccessControlPolicyGvk,omitempty" yaml:"gnsAccessControlPolicyGvk,omitempty" nexus:"children"`
	GnsSchemaViolationDiscoveryGvk map[string]Child `json:"gnsSchemaViolationDiscoveryGvk,omitempty" yaml:"gnsSchemaViolationDiscoveryGvk,omitempty" nexus:"children"`
	GnsSegmentationPolicyGvk       map[string]Child `json:"gnsSegmentationPolicyGvk,omitempty" yaml:"gnsSegmentationPolicyGvk,omitempty" nexus:"children"`
	MemberGroupsGvk                map[string]Link  `json:"memberGroupsGvk,omitempty" yaml:"memberGroupsGvk,omitempty" nexus:"links"`
	MembersGvk                     map[string]Link  `json:"membersGvk,omitempty" yaml:"membersGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GNSList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GNS `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type HaConfigV2 struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              HaConfigV2Spec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            HaConfigV2NexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type HaConfigV2NexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *HaConfigV2) CRDName() string {
	return "haconfigv2s.global.tsm.tanzu.vmware.com"
}

func (c *HaConfigV2) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type HaConfigV2Spec struct {
	ConfigType string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"HAType\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type HaConfigV2List struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []HaConfigV2 `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type HaConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              HaConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            HaConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type HaConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *HaConfig) CRDName() string {
	return "haconfigs.global.tsm.tanzu.vmware.com"
}

func (c *HaConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type HaConfigSpec struct {
	ConfigType string `nexus-alias-type:"HaType"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type HaConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []HaConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type HealthCheckConfigN struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              HealthCheckConfigNSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            HealthCheckConfigNNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type HealthCheckConfigNNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *HealthCheckConfigN) CRDName() string {
	return "healthcheckconfigns.global.tsm.tanzu.vmware.com"
}

func (c *HealthCheckConfigN) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type HealthCheckConfigNSpec struct {
	ProjectId string `json:"projectId" yaml:"projectId"`
	Config    string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/template.ts\", gofile:\"health_check_config.go\", name: \"HealthCheckConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type HealthCheckConfigNList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []HealthCheckConfigN `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type HostConfigV2 struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              HostConfigV2Spec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            HostConfigV2NexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type HostConfigV2NexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *HostConfigV2) CRDName() string {
	return "hostconfigv2s.global.tsm.tanzu.vmware.com"
}

func (c *HostConfigV2) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type HostConfigV2Spec struct {
	Name                          string `nexus-graphql-nullable:"false"`
	Host                          string `nexus-graphql-nullable:"false"`
	HaConfigV2Gvk                 *Child `json:"haConfigV2Gvk,omitempty" yaml:"haConfigV2Gvk,omitempty" nexus:"child"`
	OutboundAuthenticationModeGvk *Child `json:"outboundAuthenticationModeGvk,omitempty" yaml:"outboundAuthenticationModeGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type HostConfigV2List struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []HostConfigV2 `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type HostConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              HostConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            HostConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type HostConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *HostConfig) CRDName() string {
	return "hostconfigs.global.tsm.tanzu.vmware.com"
}

func (c *HostConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type HostConfigSpec struct {
	Name        string `nexus-graphql-nullable:"false"`
	Host        string `nexus-graphql-nullable:"false"`
	OwnedBy     string `json:"ownedBy" yaml:"ownedBy"`
	HaConfigGvk *Child `json:"haConfigGvk,omitempty" yaml:"haConfigGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type HostConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []HostConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type InboundAuthenticationConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              InboundAuthenticationConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            InboundAuthenticationConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type InboundAuthenticationConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *InboundAuthenticationConfig) CRDName() string {
	return "inboundauthenticationconfigs.global.tsm.tanzu.vmware.com"
}

func (c *InboundAuthenticationConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type InboundAuthenticationConfigSpec struct {
	Name    string `json:"name" yaml:"name"`
	OwnedBy string `json:"ownedBy" yaml:"ownedBy"`
	Mode    string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"InboundMode\")"`
	Ports   string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"PortLevelAuthenticationMap\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type InboundAuthenticationConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []InboundAuthenticationConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Inventory struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              InventorySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            InventoryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type InventoryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Inventory) CRDName() string {
	return "inventories.global.tsm.tanzu.vmware.com"
}

func (c *Inventory) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type InventorySpec struct {
	RegionsGvk     map[string]Child `json:"regionsGvk,omitempty" yaml:"regionsGvk,omitempty" nexus:"children"`
	ClustersGvk    map[string]Child `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"children"`
	JobFolderGvk   *Child           `json:"jobFolderGvk,omitempty" yaml:"jobFolderGvk,omitempty" nexus:"child"`
	ExternalDNSGvk map[string]Child `json:"externalDNSGvk,omitempty" yaml:"externalDNSGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type InventoryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Inventory `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Issuer struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              IssuerSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            IssuerNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type IssuerNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Issuer) CRDName() string {
	return "issuers.global.tsm.tanzu.vmware.com"
}

func (c *Issuer) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type IssuerSpec struct {
	Name     string `json:"name" yaml:"name"`
	Metadata string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Venafi   string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Status   string `nexus-graphql-tsm-directive:"@jsonencoded"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type IssuerList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Issuer `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type JobConfigFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              JobConfigFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            JobConfigFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type JobConfigFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *JobConfigFolder) CRDName() string {
	return "jobconfigfolders.global.tsm.tanzu.vmware.com"
}

func (c *JobConfigFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type JobConfigFolderSpec struct {
	JobConfigGvk map[string]Child `json:"jobConfigGvk,omitempty" yaml:"jobConfigGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type JobConfigFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []JobConfigFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type JobConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              JobConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            JobConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type JobConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *JobConfig) CRDName() string {
	return "jobconfigs.global.tsm.tanzu.vmware.com"
}

func (c *JobConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type JobConfigSpec struct {
	Config string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/job.ts\", gofile:\"job.go\", name:\"JobInfo\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type JobConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []JobConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type JobFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              JobFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            JobFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type JobFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *JobFolder) CRDName() string {
	return "jobfolders.global.tsm.tanzu.vmware.com"
}

func (c *JobFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type JobFolderSpec struct {
	JobsGvk map[string]Child `json:"jobsGvk,omitempty" yaml:"jobsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type JobFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []JobFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Job struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              JobSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            JobNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type JobNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Job) CRDName() string {
	return "jobs.global.tsm.tanzu.vmware.com"
}

func (c *Job) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type JobSpec struct {
	Status    string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/job.ts\", gofile:\"job.go\", name:\"JobStatusInfo\")"`
	ProjectId string `json:"projectId" yaml:"projectId"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type JobList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Job `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type KnativeIngress struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              KnativeIngressSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            KnativeIngressNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type KnativeIngressNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *KnativeIngress) CRDName() string {
	return "knativeingresses.global.tsm.tanzu.vmware.com"
}

func (c *KnativeIngress) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type KnativeIngressSpec struct {
	Name              string `json:"name" yaml:"name"`
	CreationTimestamp string `json:"creationTimestamp" yaml:"creationTimestamp"`
	ApiLink           string `json:"apiLink" yaml:"apiLink"`
	Labels            string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Annotations       string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Spec              string `nexus-graphql-tsm-directive:"@jsonencoded"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type KnativeIngressList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []KnativeIngress `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type LabelConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              LabelConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            LabelConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type LabelConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *LabelConfig) CRDName() string {
	return "labelconfigs.global.tsm.tanzu.vmware.com"
}

func (c *LabelConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type LabelConfigSpec struct {
	Labels string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LabelConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []LabelConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type LocalRegistrationServiceCluster struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              LocalRegistrationServiceClusterSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            LocalRegistrationServiceClusterNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type LocalRegistrationServiceClusterNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *LocalRegistrationServiceCluster) CRDName() string {
	return "localregistrationserviceclusters.global.tsm.tanzu.vmware.com"
}

func (c *LocalRegistrationServiceCluster) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type LocalRegistrationServiceClusterSpec struct {
	Tenant       string           `nexus-graphql-nullable:"false"`
	Type         string           `json:"type" yaml:"type"`
	Version      string           `nexus-graphql-nullable:"false"`
	ErrorCount   int              `json:"errorCount" yaml:"errorCount"`
	RestartCount int              `json:"restartCount" yaml:"restartCount"`
	ResourcesGvk map[string]Child `json:"resourcesGvk,omitempty" yaml:"resourcesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LocalRegistrationServiceClusterList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []LocalRegistrationServiceCluster `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type LocalRegistrationServiceResource struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              LocalRegistrationServiceResourceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            LocalRegistrationServiceResourceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type LocalRegistrationServiceResourceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *LocalRegistrationServiceResource) CRDName() string {
	return "localregistrationserviceresources.global.tsm.tanzu.vmware.com"
}

func (c *LocalRegistrationServiceResource) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type LocalRegistrationServiceResourceSpec struct {
	Type     string `json:"type" yaml:"type"`
	Location string `json:"location" yaml:"location"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LocalRegistrationServiceResourceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []LocalRegistrationServiceResource `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type LocalRegistrationService struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              LocalRegistrationServiceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            LocalRegistrationServiceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type LocalRegistrationServiceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *LocalRegistrationService) CRDName() string {
	return "localregistrationservices.global.tsm.tanzu.vmware.com"
}

func (c *LocalRegistrationService) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type LocalRegistrationServiceSpec struct {
	BuildID     string           `nexus-graphql-nullable:"false"`
	Version     string           `nexus-graphql-nullable:"false"`
	ErrorCount  int              `json:"errorCount" yaml:"errorCount"`
	ClustersGvk map[string]Child `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"children"`
	TemplateGvk *Link            `json:"templateGvk,omitempty" yaml:"templateGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LocalRegistrationServiceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []LocalRegistrationService `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type LogFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              LogFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            LogFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type LogFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *LogFolder) CRDName() string {
	return "logfolders.global.tsm.tanzu.vmware.com"
}

func (c *LogFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type LogFolderSpec struct {
	LogGvk map[string]Child `json:"logGvk,omitempty" yaml:"logGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LogFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []LogFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Log struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              LogSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            LogNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type LogNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Log) CRDName() string {
	return "logs.global.tsm.tanzu.vmware.com"
}

func (c *Log) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type LogSpec struct {
	Request string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/clusterLifecycle.ts\", gofile:\"cluster_lifecycle.go\", name:\"LogRequest\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LogList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Log `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NetworkAttachmentDefinitionConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NetworkAttachmentDefinitionConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            NetworkAttachmentDefinitionConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NetworkAttachmentDefinitionConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *NetworkAttachmentDefinitionConfig) CRDName() string {
	return "networkattachmentdefinitionconfigs.global.tsm.tanzu.vmware.com"
}

func (c *NetworkAttachmentDefinitionConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NetworkAttachmentDefinitionConfigSpec struct {
	Metadata  string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Name      string `nexus-graphql-nullable:"false"`
	Namespace string `json:"namespace" yaml:"namespace"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NetworkAttachmentDefinitionConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NetworkAttachmentDefinitionConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NetworkAttachmentDefinition struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NetworkAttachmentDefinitionSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            NetworkAttachmentDefinitionNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NetworkAttachmentDefinitionNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *NetworkAttachmentDefinition) CRDName() string {
	return "networkattachmentdefinitions.global.tsm.tanzu.vmware.com"
}

func (c *NetworkAttachmentDefinition) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NetworkAttachmentDefinitionSpec struct {
	Metadata  string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Name      string `nexus-graphql-nullable:"false"`
	Namespace string `json:"namespace" yaml:"namespace"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NetworkAttachmentDefinitionList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NetworkAttachmentDefinition `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NodeDefinition struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NodeDefinitionSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            NodeDefinitionNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NodeDefinitionNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *NodeDefinition) CRDName() string {
	return "nodedefinitions.global.tsm.tanzu.vmware.com"
}

func (c *NodeDefinition) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NodeDefinitionSpec struct {
	Type      string `nexus-graphql-nullable:"false"`
	Version   string `nexus-graphql-nullable:"false"`
	Provider  string `json:"provider" yaml:"provider"`
	ImageInfo string `json:"imageInfo" yaml:"imageInfo"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NodeDefinitionList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NodeDefinition `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NodeFolderCluster struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`

	Status NodeFolderClusterNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NodeFolderClusterNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *NodeFolderCluster) CRDName() string {
	return "nodefolderclusters.global.tsm.tanzu.vmware.com"
}

func (c *NodeFolderCluster) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NodeFolderClusterList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NodeFolderCluster `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NodeFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NodeFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            NodeFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NodeFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *NodeFolder) CRDName() string {
	return "nodefolders.global.tsm.tanzu.vmware.com"
}

func (c *NodeFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NodeFolderSpec struct {
	ClustersGvk map[string]Child `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NodeFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NodeFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NodeGroup struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NodeGroupSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            NodeGroupNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NodeGroupNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *NodeGroup) CRDName() string {
	return "nodegroups.global.tsm.tanzu.vmware.com"
}

func (c *NodeGroup) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NodeGroupSpec struct {
	DisplayName string `json:"displayName" yaml:"displayName"`
	Description string `json:"description" yaml:"description"`
	Scope       string `json:"scope" yaml:"scope"`
	Color       string `json:"color" yaml:"color"`
	Rules       string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/resourceGroup\", gofile:\"resource_group.go\", name:\"Rules\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NodeGroupList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NodeGroup `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NodeStatus struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NodeStatusSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            NodeStatusNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NodeStatusNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *NodeStatus) CRDName() string {
	return "nodestatuses.global.tsm.tanzu.vmware.com"
}

func (c *NodeStatus) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NodeStatusSpec struct {
	Addresses       string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Allocatable     string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Capacity        string `nexus-graphql-tsm-directive:"@jsonencoded"`
	DaemonEndpoints string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Conditions      string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Images          string `nexus-graphql-tsm-directive:"@jsonencoded"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NodeStatusList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NodeStatus `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type NodeTemplate struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NodeTemplateSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            NodeTemplateNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NodeTemplateNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *NodeTemplate) CRDName() string {
	return "nodetemplates.global.tsm.tanzu.vmware.com"
}

func (c *NodeTemplate) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NodeTemplateSpec struct {
	DefinitionVersionsGvk map[string]Child `json:"definitionVersionsGvk,omitempty" yaml:"definitionVersionsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NodeTemplateList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []NodeTemplate `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Node struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              NodeSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            NodeNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type NodeNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Node) CRDName() string {
	return "nodes.global.tsm.tanzu.vmware.com"
}

func (c *Node) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type NodeSpec struct {
	Name                    string `json:"name" yaml:"name"`
	ExternalID              string `json:"externalID" yaml:"externalID"`
	ProviderID              string `json:"providerID" yaml:"providerID"`
	Architecture            string `json:"architecture" yaml:"architecture"`
	ContainerRuntimeVersion string `json:"containerRuntimeVersion" yaml:"containerRuntimeVersion"`
	KernelVersion           string `json:"kernelVersion" yaml:"kernelVersion"`
	OperatingSystem         string `json:"operatingSystem" yaml:"operatingSystem"`
	OsImage                 string `json:"osImage" yaml:"osImage"`
	SystemUUID              string `json:"systemUUID" yaml:"systemUUID"`
	HostName                string `json:"hostName" yaml:"hostName"`
	ApiLink                 string `json:"apiLink" yaml:"apiLink"`
	BootID                  string `json:"bootID" yaml:"bootID"`
	KubeletVersion          string `json:"kubeletVersion" yaml:"kubeletVersion"`
	MachineID               string `json:"machineID" yaml:"machineID"`
	CreationTimestamp       string `json:"creationTimestamp" yaml:"creationTimestamp"`
	Annotations             string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Labels                  string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Uid                     string `json:"uid" yaml:"uid"`
	Spec                    string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"NodeSpec\")"`
	KStatus                 string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"KNodeStatus\")"`
	StatusGvk               *Child `json:"statusGvk,omitempty" yaml:"statusGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type NodeList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Node `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type OutboundAuthenticationMode struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              OutboundAuthenticationModeSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            OutboundAuthenticationModeNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type OutboundAuthenticationModeNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *OutboundAuthenticationMode) CRDName() string {
	return "outboundauthenticationmodes.global.tsm.tanzu.vmware.com"
}

func (c *OutboundAuthenticationMode) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type OutboundAuthenticationModeSpec struct {
	Mode string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"OutboundMode\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type OutboundAuthenticationModeList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []OutboundAuthenticationMode `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type PeerAuthentication struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              PeerAuthenticationSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            PeerAuthenticationNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type PeerAuthenticationNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *PeerAuthentication) CRDName() string {
	return "peerauthentications.global.tsm.tanzu.vmware.com"
}

func (c *PeerAuthentication) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type PeerAuthenticationSpec struct {
	Name        string `json:"name" yaml:"name"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Annotations string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Spec        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/inventory/inventory.d.ts\", gofile:\"inventory.go\", name:\"PeerAuthenticationSpec\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type PeerAuthenticationList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []PeerAuthentication `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type PiiDiscoveryRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              PiiDiscoveryRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            PiiDiscoveryRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type PiiDiscoveryRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *PiiDiscoveryRT) CRDName() string {
	return "piidiscoveryrts.global.tsm.tanzu.vmware.com"
}

func (c *PiiDiscoveryRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type PiiDiscoveryRTSpec struct {
	Gnsid     string `json:"gnsid" yaml:"gnsid"`
	Selectors string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"gns_pii_discovery.go\", name:\"PiiDiscoveryClusterResourceSelectorRT\")"`
	Spec      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsPiiDiscovery\", gofile:\"gns_pii_discovery.go\", name:\"PiiDiscoveryApplicationConfigList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type PiiDiscoveryRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []PiiDiscoveryRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type PiiDiscovery struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              PiiDiscoverySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            PiiDiscoveryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type PiiDiscoveryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *PiiDiscovery) CRDName() string {
	return "piidiscoveries.global.tsm.tanzu.vmware.com"
}

func (c *PiiDiscovery) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type PiiDiscoverySpec struct {
	Description string `json:"description" yaml:"description"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"LabelsList\")"`
	Spec        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsPiiDiscovery\", gofile:\"gns_pii_discovery.go\", name:\"PiiDiscoveryConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type PiiDiscoveryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []PiiDiscovery `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type PolicyConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              PolicyConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            PolicyConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type PolicyConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *PolicyConfig) CRDName() string {
	return "policyconfigs.global.tsm.tanzu.vmware.com"
}

func (c *PolicyConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type PolicyConfigSpec struct {
	Src    string `json:"src" yaml:"src"`
	Dst    string `json:"dst" yaml:"dst"`
	Action string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/cluster-folder/cluster-config/domain-config/policy-config/runtime-policy.ts\", gofile:\"runtime-policy.go\", name:\"PolicyActions\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type PolicyConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []PolicyConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type PolicyTemplate struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`

	Status PolicyTemplateNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type PolicyTemplateNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *PolicyTemplate) CRDName() string {
	return "policytemplates.global.tsm.tanzu.vmware.com"
}

func (c *PolicyTemplate) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type PolicyTemplateList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []PolicyTemplate `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AccessControlPolicy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AccessControlPolicySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AccessControlPolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AccessControlPolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AccessControlPolicy) CRDName() string {
	return "accesscontrolpolicies.global.tsm.tanzu.vmware.com"
}

func (c *AccessControlPolicy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AccessControlPolicySpec struct {
	PolicyConfigsGvk map[string]Child `json:"policyConfigsGvk,omitempty" yaml:"policyConfigsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AccessControlPolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AccessControlPolicy `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ProgressiveUpgrade struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ProgressiveUpgradeSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ProgressiveUpgradeNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ProgressiveUpgrade) CRDName() string {
	return "progressiveupgrades.global.tsm.tanzu.vmware.com"
}

func (c *ProgressiveUpgrade) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeSpec struct {
	UpgradeGvk map[string]Child `json:"upgradeGvk,omitempty" yaml:"upgradeGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ProgressiveUpgradeList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ProgressiveUpgrade `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ProgressiveUpgradeConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ProgressiveUpgradeConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ProgressiveUpgradeConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ProgressiveUpgradeConfig) CRDName() string {
	return "progressiveupgradeconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ProgressiveUpgradeConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeConfigSpec struct {
	Name            string `json:"name" yaml:"name"`
	Services        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/config/progressive-upgrade/progressive-upgrade-config/progressive-upgrade.ts\", gofile:\"progressive_upgrade.go\", name: \"UpgradeServices\")"`
	UpgradeStrategy string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/config/progressive-upgrade/progressive-upgrade-config/progressive-upgrade.ts\", gofile:\"progressive_upgrade.go\", name:\"ProgressiveUpgradeStrategy\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ProgressiveUpgradeConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ProgressiveUpgradeConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ProgressiveUpgradeFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ProgressiveUpgradeFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ProgressiveUpgradeFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ProgressiveUpgradeFolder) CRDName() string {
	return "progressiveupgradefolders.global.tsm.tanzu.vmware.com"
}

func (c *ProgressiveUpgradeFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeFolderSpec struct {
	UpgradesGvk map[string]Child `json:"upgradesGvk,omitempty" yaml:"upgradesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ProgressiveUpgradeFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ProgressiveUpgradeFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ProgressiveUpgradeRuntime struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ProgressiveUpgradeRuntimeSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ProgressiveUpgradeRuntimeNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeRuntimeNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ProgressiveUpgradeRuntime) CRDName() string {
	return "progressiveupgraderuntimes.global.tsm.tanzu.vmware.com"
}

func (c *ProgressiveUpgradeRuntime) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeRuntimeSpec struct {
	UpgradeName string `json:"upgradeName" yaml:"upgradeName"`
	Status      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/config/progressive-upgrade/progressive-upgrade-config/progressive-upgrade.ts\", gofile:\"progressive_upgrade.go\", name:\"ProgressiveUpgradeStatus\")"`
	Step        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/config/progressive-upgrade/progressive-upgrade-config/progressive-upgrade.ts\", gofile:\"progressive_upgrade.go\", name:\"ProgressiveUpgradeStep\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ProgressiveUpgradeRuntimeList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ProgressiveUpgradeRuntime `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ProjectConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ProjectConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ProjectConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ProjectConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ProjectConfig) CRDName() string {
	return "projectconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ProjectConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ProjectConfigSpec struct {
	Name                      string           `json:"name" yaml:"name"`
	CertificateAuthoritiesGvk map[string]Child `json:"certificateAuthoritiesGvk,omitempty" yaml:"certificateAuthoritiesGvk,omitempty" nexus:"children"`
	SvcGroupsGvk              map[string]Link  `json:"svcGroupsGvk,omitempty" yaml:"svcGroupsGvk,omitempty" nexus:"links"`
	GnsGvk                    map[string]Link  `json:"gnsGvk,omitempty" yaml:"gnsGvk,omitempty" nexus:"links"`
	PolicyConfigsGvk          map[string]Link  `json:"policyConfigsGvk,omitempty" yaml:"policyConfigsGvk,omitempty" nexus:"links"`
	TemplateGroupsGvk         map[string]Link  `json:"templateGroupsGvk,omitempty" yaml:"templateGroupsGvk,omitempty" nexus:"links"`
	CertificatesGvk           map[string]Link  `json:"certificatesGvk,omitempty" yaml:"certificatesGvk,omitempty" nexus:"links"`
	ExternalAccountsGvk       map[string]Link  `json:"externalAccountsGvk,omitempty" yaml:"externalAccountsGvk,omitempty" nexus:"links"`
	ExternalDNSGvk            map[string]Link  `json:"externalDNSGvk,omitempty" yaml:"externalDNSGvk,omitempty" nexus:"links"`
	AutoscalersGvk            map[string]Link  `json:"autoscalersGvk,omitempty" yaml:"autoscalersGvk,omitempty" nexus:"links"`
	ClustersGvk               map[string]Link  `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"links"`
	ServiceLevelObjectivesGvk map[string]Link  `json:"serviceLevelObjectivesGvk,omitempty" yaml:"serviceLevelObjectivesGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ProjectConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ProjectConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ProjectInventory struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ProjectInventorySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ProjectInventoryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ProjectInventoryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ProjectInventory) CRDName() string {
	return "projectinventories.global.tsm.tanzu.vmware.com"
}

func (c *ProjectInventory) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ProjectInventorySpec struct {
	ClustersGvk    map[string]Link `json:"clustersGvk,omitempty" yaml:"clustersGvk,omitempty" nexus:"links"`
	ExternalDNSGvk map[string]Link `json:"externalDNSGvk,omitempty" yaml:"externalDNSGvk,omitempty" nexus:"links"`
	JobsGvk        map[string]Link `json:"jobsGvk,omitempty" yaml:"jobsGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ProjectInventoryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ProjectInventory `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ProjectQuery struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`

	Status ProjectQueryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ProjectQueryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ProjectQuery) CRDName() string {
	return "projectqueries.global.tsm.tanzu.vmware.com"
}

func (c *ProjectQuery) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ProjectQueryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ProjectQuery `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Project struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ProjectSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ProjectNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ProjectNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Project) CRDName() string {
	return "projects.global.tsm.tanzu.vmware.com"
}

func (c *Project) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ProjectSpec struct {
	Spec         string `nexus-graphql-tsm-directive:"@jsonencoded(file: \"../common-apis/api/tenant/models/project\", gofile: \"project.go\", name: \"ProjectSpec\")"`
	ConfigGvk    *Child `json:"configGvk,omitempty" yaml:"configGvk,omitempty" nexus:"child"`
	InventoryGvk *Child `json:"inventoryGvk,omitempty" yaml:"inventoryGvk,omitempty" nexus:"child"`
	QueryGvk     *Child `json:"queryGvk,omitempty" yaml:"queryGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ProjectList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Project `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type PublicServiceRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              PublicServiceRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            PublicServiceRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type PublicServiceRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *PublicServiceRT) CRDName() string {
	return "publicservicerts.global.tsm.tanzu.vmware.com"
}

func (c *PublicServiceRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type PublicServiceRTSpec struct {
	OwnedBy  string   `json:"ownedBy" yaml:"ownedBy"`
	FqdnList []string `json:"fqdnList" yaml:"fqdnList"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type PublicServiceRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []PublicServiceRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type RemoteGatewayServiceConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              RemoteGatewayServiceConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            RemoteGatewayServiceConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type RemoteGatewayServiceConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *RemoteGatewayServiceConfig) CRDName() string {
	return "remotegatewayserviceconfigs.global.tsm.tanzu.vmware.com"
}

func (c *RemoteGatewayServiceConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type RemoteGatewayServiceConfigSpec struct {
	OwnedBy string `json:"ownedBy" yaml:"ownedBy"`
	Labels  string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	NodeIPs string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"DMSet\")"`
	Ports   string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"ServicePortList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type RemoteGatewayServiceConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []RemoteGatewayServiceConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ResourceGroupRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ResourceGroupRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ResourceGroupRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ResourceGroupRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ResourceGroupRT) CRDName() string {
	return "resourcegrouprts.global.tsm.tanzu.vmware.com"
}

func (c *ResourceGroupRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ResourceGroupRTSpec struct {
	SvcGroupRTGvk map[string]Child `json:"svcGroupRTGvk,omitempty" yaml:"svcGroupRTGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ResourceGroupRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ResourceGroupRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ResourceGroup struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ResourceGroupSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ResourceGroupNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ResourceGroupNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ResourceGroup) CRDName() string {
	return "resourcegroups.global.tsm.tanzu.vmware.com"
}

func (c *ResourceGroup) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ResourceGroupSpec struct {
	AppGroupsGvk  map[string]Child `json:"appGroupsGvk,omitempty" yaml:"appGroupsGvk,omitempty" nexus:"children"`
	SvcGroupsGvk  map[string]Child `json:"svcGroupsGvk,omitempty" yaml:"svcGroupsGvk,omitempty" nexus:"children"`
	NodeGroupsGvk map[string]Child `json:"nodeGroupsGvk,omitempty" yaml:"nodeGroupsGvk,omitempty" nexus:"children"`
	DataGroupsGvk map[string]Child `json:"dataGroupsGvk,omitempty" yaml:"dataGroupsGvk,omitempty" nexus:"children"`
	UserGroupsGvk map[string]Child `json:"userGroupsGvk,omitempty" yaml:"userGroupsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ResourceGroupList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ResourceGroup `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Root struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              RootSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            RootNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type RootNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Root) CRDName() string {
	return "roots.global.tsm.tanzu.vmware.com"
}

func (c *Root) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type RootSpec struct {
	Name         string `nexus-graphql-nullable:"false"`
	ConfigGvk    *Child `json:"configGvk,omitempty" yaml:"configGvk,omitempty" nexus:"child"`
	InventoryGvk *Child `json:"inventoryGvk,omitempty" yaml:"inventoryGvk,omitempty" nexus:"child"`
	RuntimeGvk   *Child `json:"runtimeGvk,omitempty" yaml:"runtimeGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type RootList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Root `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type RPolicy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              RPolicySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            RPolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type RPolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *RPolicy) CRDName() string {
	return "rpolicies.global.tsm.tanzu.vmware.com"
}

func (c *RPolicy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type RPolicySpec struct {
	HealthCheckId string `json:"healthCheckId" yaml:"healthCheckId"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type RPolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []RPolicy `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Runtime struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              RuntimeSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            RuntimeNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type RuntimeNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Runtime) CRDName() string {
	return "runtimes.global.tsm.tanzu.vmware.com"
}

func (c *Runtime) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type RuntimeSpec struct {
	AllsparkServicesGvk   *Child `json:"allsparkServicesGvk,omitempty" yaml:"allsparkServicesGvk,omitempty" nexus:"child"`
	UserFolderGvk         *Child `json:"userFolderGvk,omitempty" yaml:"userFolderGvk,omitempty" nexus:"child"`
	DataFolderGvk         *Child `json:"dataFolderGvk,omitempty" yaml:"dataFolderGvk,omitempty" nexus:"child"`
	AppFolderGvk          *Child `json:"appFolderGvk,omitempty" yaml:"appFolderGvk,omitempty" nexus:"child"`
	NodeFolderGvk         *Child `json:"nodeFolderGvk,omitempty" yaml:"nodeFolderGvk,omitempty" nexus:"child"`
	ClusterFolderGvk      *Child `json:"clusterFolderGvk,omitempty" yaml:"clusterFolderGvk,omitempty" nexus:"child"`
	ProgressiveUpgradeGvk *Child `json:"progressiveUpgradeGvk,omitempty" yaml:"progressiveUpgradeGvk,omitempty" nexus:"child"`
	JobConfigFolderGvk    *Child `json:"jobConfigFolderGvk,omitempty" yaml:"jobConfigFolderGvk,omitempty" nexus:"child"`
	ExternalDNSGvk        *Child `json:"externalDNSGvk,omitempty" yaml:"externalDNSGvk,omitempty" nexus:"child"`
	SloFolderGvk          *Child `json:"sloFolderGvk,omitempty" yaml:"sloFolderGvk,omitempty" nexus:"child"`
	ServiceDirectoryRTGvk *Child `json:"serviceDirectoryRTGvk,omitempty" yaml:"serviceDirectoryRTGvk,omitempty" nexus:"child"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type RuntimeList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Runtime `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SchemaViolationDiscoveryRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SchemaViolationDiscoveryRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SchemaViolationDiscoveryRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SchemaViolationDiscoveryRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SchemaViolationDiscoveryRT) CRDName() string {
	return "schemaviolationdiscoveryrts.global.tsm.tanzu.vmware.com"
}

func (c *SchemaViolationDiscoveryRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SchemaViolationDiscoveryRTSpec struct {
	Gnsid     string `json:"gnsid" yaml:"gnsid"`
	Selectors string `nexus-graphql-tsm-directive:"@jsonencoded(file: \"../common-apis/api/tenant/models/common\", gofile:\"gns_schema_violation_discovery.go\", name:\"GnsSchemaViolationDiscoveryClusterResourceSelectorRT\")"`
	Spec      string `nexus-graphql-tsm-directive:"@jsonencoded(file: \"../common-apis/api/tenant/models/gnsSchemaViolationDiscovery\", gofile:\"gns_schema_violation_discovery.go\", name:\"GnsSchemaViolationDiscoveryConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SchemaViolationDiscoveryRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SchemaViolationDiscoveryRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type GnsSchemaViolationDiscovery struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              GnsSchemaViolationDiscoverySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            GnsSchemaViolationDiscoveryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type GnsSchemaViolationDiscoveryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *GnsSchemaViolationDiscovery) CRDName() string {
	return "gnsschemaviolationdiscoveries.global.tsm.tanzu.vmware.com"
}

func (c *GnsSchemaViolationDiscovery) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type GnsSchemaViolationDiscoverySpec struct {
	Description string `json:"description" yaml:"description"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"LabelsList\")"`
	Spec        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsSchemaViolationDiscovery\", gofile:\"gns_schema_violation_discovery.go\", name:\"GnsSchemaViolationDiscoveryConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type GnsSchemaViolationDiscoveryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []GnsSchemaViolationDiscovery `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SecretRTConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SecretRTConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SecretRTConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SecretRTConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SecretRTConfig) CRDName() string {
	return "secretrtconfigs.global.tsm.tanzu.vmware.com"
}

func (c *SecretRTConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SecretRTConfigSpec struct {
	Type            string `json:"type" yaml:"type"`
	Data            string `json:"data" yaml:"data"`
	IsBase64Encoded bool   `json:"isBase64Encoded" yaml:"isBase64Encoded"`
	OwnedBy         string `json:"ownedBy" yaml:"ownedBy"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SecretRTConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SecretRTConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SecretHash struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SecretHashSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SecretHashNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SecretHashNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SecretHash) CRDName() string {
	return "secrethashes.global.tsm.tanzu.vmware.com"
}

func (c *SecretHash) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SecretHashSpec struct {
	Name     string `json:"name" yaml:"name"`
	Type     string `json:"type" yaml:"type"`
	Metadata string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	DataHash string `json:"dataHash" yaml:"dataHash"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SecretHashList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SecretHash `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SecurityContextConstraintsConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SecurityContextConstraintsConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SecurityContextConstraintsConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SecurityContextConstraintsConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SecurityContextConstraintsConfig) CRDName() string {
	return "securitycontextconstraintsconfigs.global.tsm.tanzu.vmware.com"
}

func (c *SecurityContextConstraintsConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SecurityContextConstraintsConfigSpec struct {
	Metadata string   `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Name     string   `nexus-graphql-nullable:"false"`
	Groups   []string `json:"groups" yaml:"groups"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SecurityContextConstraintsConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SecurityContextConstraintsConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SecurityContextConstraints struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SecurityContextConstraintsSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SecurityContextConstraintsNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SecurityContextConstraintsNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SecurityContextConstraints) CRDName() string {
	return "securitycontextconstraintses.global.tsm.tanzu.vmware.com"
}

func (c *SecurityContextConstraints) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SecurityContextConstraintsSpec struct {
	Metadata string   `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Name     string   `nexus-graphql-nullable:"false"`
	Groups   []string `json:"groups" yaml:"groups"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SecurityContextConstraintsList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SecurityContextConstraints `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceConfig) CRDName() string {
	return "serviceconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ServiceConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceConfigSpec struct {
	Name              string           `json:"name" yaml:"name"`
	OwnedBy           string           `json:"ownedBy" yaml:"ownedBy"`
	ServiceVersionGvk map[string]Child `json:"serviceVersionGvk,omitempty" yaml:"serviceVersionGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceCronJob struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceCronJobSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceCronJobNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceCronJobNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceCronJob) CRDName() string {
	return "servicecronjobs.global.tsm.tanzu.vmware.com"
}

func (c *ServiceCronJob) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceCronJobSpec struct {
	Name                string          `json:"name" yaml:"name"`
	Metadata            string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Spec                string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"CronJobSpec\")"`
	Status              string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"CronJobStatus\")"`
	ServiceInstancesGvk map[string]Link `json:"serviceInstancesGvk,omitempty" yaml:"serviceInstancesGvk,omitempty" nexus:"links"`
	ServiceJobsGvk      map[string]Link `json:"serviceJobsGvk,omitempty" yaml:"serviceJobsGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceCronJobList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceCronJob `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceDaemonSet struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceDaemonSetSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceDaemonSetNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceDaemonSetNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceDaemonSet) CRDName() string {
	return "servicedaemonsets.global.tsm.tanzu.vmware.com"
}

func (c *ServiceDaemonSet) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceDaemonSetSpec struct {
	Name                string          `json:"name" yaml:"name"`
	Metadata            string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Spec                string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"DaemonSetSpec\")"`
	Status              string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"DaemonSetStatus\")"`
	ServiceInstancesGvk map[string]Link `json:"serviceInstancesGvk,omitempty" yaml:"serviceInstancesGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceDaemonSetList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceDaemonSet `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceDeploymentContainer struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceDeploymentContainerSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceDeploymentContainerNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceDeploymentContainerNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceDeploymentContainer) CRDName() string {
	return "servicedeploymentcontainers.global.tsm.tanzu.vmware.com"
}

func (c *ServiceDeploymentContainer) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceDeploymentContainerSpec struct {
	Name                     string `json:"name" yaml:"name"`
	Image                    string `json:"image" yaml:"image"`
	ImagePullPolicy          string `json:"imagePullPolicy" yaml:"imagePullPolicy"`
	TerminationMessagePath   string `json:"terminationMessagePath" yaml:"terminationMessagePath"`
	TerminationMessagePolicy string `json:"terminationMessagePolicy" yaml:"terminationMessagePolicy"`
	Args                     string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Env                      string `nexus-graphql-tsm-directive:"@jsonencoded"`
	LivenessProbe            string `nexus-graphql-tsm-directive:"@jsonencoded"`
	ReadinessProbe           string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Ports                    string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Resources                string `nexus-graphql-tsm-directive:"@jsonencoded"`
	VolumeMounts             string `nexus-graphql-tsm-directive:"@jsonencoded"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceDeploymentContainerList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceDeploymentContainer `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceDeployment struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceDeploymentSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceDeploymentNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceDeploymentNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceDeployment) CRDName() string {
	return "servicedeployments.global.tsm.tanzu.vmware.com"
}

func (c *ServiceDeployment) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceDeploymentSpec struct {
	Metadata                      string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Spec                          string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"DeploymentSpec\")"`
	Status                        string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"DeploymentStatus\")"`
	Namespace                     string           `json:"namespace" yaml:"namespace"`
	Annotations                   string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	CreationTimestamp             string           `json:"creationTimestamp" yaml:"creationTimestamp"`
	Labels                        string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	Name                          string           `json:"name" yaml:"name"`
	ApiLink                       string           `json:"apiLink" yaml:"apiLink"`
	Uid                           string           `json:"uid" yaml:"uid"`
	Generation                    int              `json:"generation" yaml:"generation"`
	Selector                      string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	Replicas                      int              `json:"replicas" yaml:"replicas"`
	DnsPolicy                     string           `json:"dnsPolicy" yaml:"dnsPolicy"`
	RestartPolicy                 string           `json:"restartPolicy" yaml:"restartPolicy"`
	SchedulerName                 string           `json:"schedulerName" yaml:"schedulerName"`
	SecurityContext               string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	ServiceAccount                string           `json:"serviceAccount" yaml:"serviceAccount"`
	ServiceAccountName            string           `json:"serviceAccountName" yaml:"serviceAccountName"`
	TerminationGracePeriodSeconds int              `json:"terminationGracePeriodSeconds" yaml:"terminationGracePeriodSeconds"`
	Volumes                       string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	TemplateLabels                string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	StatusReplicas                int              `json:"statusReplicas" yaml:"statusReplicas"`
	AvailableReplicas             int              `json:"availableReplicas" yaml:"availableReplicas"`
	UpdatedReplicas               int              `json:"updatedReplicas" yaml:"updatedReplicas"`
	ReadyReplicas                 int              `json:"readyReplicas" yaml:"readyReplicas"`
	ObservedGeneration            int              `json:"observedGeneration" yaml:"observedGeneration"`
	Conditions                    string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	ContainersGvk                 map[string]Child `json:"containersGvk,omitempty" yaml:"containersGvk,omitempty" nexus:"children"`
	ServiceInstancesGvk           map[string]Link  `json:"serviceInstancesGvk,omitempty" yaml:"serviceInstancesGvk,omitempty" nexus:"links"`
	ServiceReplicaSetGvk          map[string]Link  `json:"serviceReplicaSetGvk,omitempty" yaml:"serviceReplicaSetGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceDeploymentList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceDeployment `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceDirectoryEntryConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceDirectoryEntryConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceDirectoryEntryConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceDirectoryEntryConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceDirectoryEntryConfig) CRDName() string {
	return "servicedirectoryentryconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ServiceDirectoryEntryConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceDirectoryEntryConfigSpec struct {
	Spec string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/serviceDirectory\", gofile:\"service_directory_entry.go\", name:\"ServiceDirectoryEntry\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceDirectoryEntryConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceDirectoryEntryConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceDirectoryRTFolderEntry struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceDirectoryRTFolderEntrySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceDirectoryRTFolderEntryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceDirectoryRTFolderEntryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceDirectoryRTFolderEntry) CRDName() string {
	return "servicedirectoryrtfolderentries.global.tsm.tanzu.vmware.com"
}

func (c *ServiceDirectoryRTFolderEntry) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceDirectoryRTFolderEntrySpec struct {
	Spec      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/serviceDirectory\", gofile:\"service_directory_entry.go\", name:\"ServiceDirectoryEntry\")"`
	Spec_type string `nexus-alias-type:"ServiceDirectoryRTFolderEntryType"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceDirectoryRTFolderEntryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceDirectoryRTFolderEntry `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceDirectoryRTFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceDirectoryRTFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceDirectoryRTFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceDirectoryRTFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceDirectoryRTFolder) CRDName() string {
	return "servicedirectoryrtfolders.global.tsm.tanzu.vmware.com"
}

func (c *ServiceDirectoryRTFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceDirectoryRTFolderSpec struct {
	Name                             string           `json:"name" yaml:"name"`
	ServiceDirectoryRTFolderEntryGvk map[string]Child `json:"serviceDirectoryRTFolderEntryGvk,omitempty" yaml:"serviceDirectoryRTFolderEntryGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceDirectoryRTFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceDirectoryRTFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceDirectoryRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceDirectoryRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceDirectoryRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceDirectoryRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceDirectoryRT) CRDName() string {
	return "servicedirectoryrts.global.tsm.tanzu.vmware.com"
}

func (c *ServiceDirectoryRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceDirectoryRTSpec struct {
	ServiceDirectoryRTFolderGvk map[string]Child `json:"serviceDirectoryRTFolderGvk,omitempty" yaml:"serviceDirectoryRTFolderGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceDirectoryRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceDirectoryRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceDirectoryN struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceDirectoryNSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceDirectoryNNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceDirectoryNNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceDirectoryN) CRDName() string {
	return "servicedirectoryns.global.tsm.tanzu.vmware.com"
}

func (c *ServiceDirectoryN) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceDirectoryNSpec struct {
	Spec       string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/serviceDirectory\", gofile:\"service_directory.go\", name:\"ServiceDirectorySpec\")"`
	EntriesGvk map[string]Child `json:"entriesGvk,omitempty" yaml:"entriesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceDirectoryNList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceDirectoryN `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceEntryConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceEntryConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceEntryConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceEntryConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceEntryConfig) CRDName() string {
	return "serviceentryconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ServiceEntryConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceEntryConfigSpec struct {
	Name            string   `json:"name" yaml:"name"`
	OwnedBy         string   `json:"ownedBy" yaml:"ownedBy"`
	Service         string   `json:"service" yaml:"service"`
	ServiceFQDN     string   `json:"serviceFQDN" yaml:"serviceFQDN"`
	Description     string   `json:"description" yaml:"description"`
	ServicePortList string   `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"ServicePortList\")"`
	Tags            []string `json:"tags" yaml:"tags"`
	Labels          string   `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Endpoints       []string `json:"endpoints" yaml:"endpoints"`
	EndpointList    string   `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/runtime.ts\", gofile:\"runtime.go\", name:\"ServiceEndpointList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceEntryConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceEntryConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceEntry struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceEntrySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceEntryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceEntryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceEntry) CRDName() string {
	return "serviceentries.global.tsm.tanzu.vmware.com"
}

func (c *ServiceEntry) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceEntrySpec struct {
	Name                   string   `json:"name" yaml:"name"`
	Annotations            string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	Labels                 string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	CreationTimestamp      string   `json:"creationTimestamp" yaml:"creationTimestamp"`
	ApiLink                string   `json:"apiLink" yaml:"apiLink"`
	Uid                    string   `json:"uid" yaml:"uid"`
	Hosts                  string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	Addresses              string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	Ports                  string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	Location               string   `json:"location" yaml:"location"`
	Resolution             string   `json:"resolution" yaml:"resolution"`
	Endpoints              string   `nexus-graphql-tsm-directive:"@jsonencoded"`
	ExportTo               []string `nexus-graphql-nullable:"false"`
	WorkloadSelectorLabels string   `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceEntryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceEntry `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SvcGroupRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SvcGroupRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SvcGroupRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SvcGroupRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SvcGroupRT) CRDName() string {
	return "svcgrouprts.global.tsm.tanzu.vmware.com"
}

func (c *SvcGroupRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SvcGroupRTSpec struct {
	Name        string `json:"name" yaml:"name"`
	DisplayName string `json:"displayName" yaml:"displayName"`
	Description string `json:"description" yaml:"description"`
	Services    string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/serviceGroup\", gofile:\"service_group.go\", name:\"ServiceGroupSvcList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SvcGroupRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SvcGroupRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceInstanceContainer struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceInstanceContainerSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceInstanceContainerNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceInstanceContainerNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceInstanceContainer) CRDName() string {
	return "serviceinstancecontainers.global.tsm.tanzu.vmware.com"
}

func (c *ServiceInstanceContainer) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceInstanceContainerSpec struct {
	Name                     string `json:"name" yaml:"name"`
	Image                    string `json:"image" yaml:"image"`
	ImagePullPolicy          string `json:"imagePullPolicy" yaml:"imagePullPolicy"`
	TerminationMessagePath   string `json:"terminationMessagePath" yaml:"terminationMessagePath"`
	TerminationMessagePolicy string `json:"terminationMessagePolicy" yaml:"terminationMessagePolicy"`
	Resources                string `nexus-graphql-tsm-directive:"@jsonencoded"`
	VolumeMounts             string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Command                  string `nexus-graphql-tsm-directive:"@jsonencoded"`
	SecurityContext          string `nexus-graphql-tsm-directive:"@jsonencoded"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceInstanceContainerList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceInstanceContainer `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceInstance struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceInstanceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceInstanceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceInstanceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceInstance) CRDName() string {
	return "serviceinstances.global.tsm.tanzu.vmware.com"
}

func (c *ServiceInstance) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceInstanceSpec struct {
	Metadata                      string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Spec                          string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"ServiceInstanceSpec\")"`
	Status                        string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"ServiceInstanceStatus\")"`
	Name                          string           `json:"name" yaml:"name"`
	Namespace                     string           `json:"namespace" yaml:"namespace"`
	Annotations                   string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	Labels                        string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	ApiLink                       string           `json:"apiLink" yaml:"apiLink"`
	Uid                           string           `json:"uid" yaml:"uid"`
	RestartPolicy                 string           `json:"restartPolicy" yaml:"restartPolicy"`
	DnsPolicy                     string           `json:"dnsPolicy" yaml:"dnsPolicy"`
	HostNetwork                   bool             `json:"hostNetwork" yaml:"hostNetwork"`
	SecurityContext               string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	TerminationGracePeriodSeconds int              `json:"terminationGracePeriodSeconds" yaml:"terminationGracePeriodSeconds"`
	Tolerations                   string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	StatusConditions              string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	StatusContainer               string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	PodIP                         string           `json:"podIP" yaml:"podIP"`
	QosClass                      string           `json:"qosClass" yaml:"qosClass"`
	Phase                         string           `json:"phase" yaml:"phase"`
	StartTime                     string           `json:"startTime" yaml:"startTime"`
	NodeName                      string           `json:"nodeName" yaml:"nodeName"`
	ContainersGvk                 map[string]Child `json:"containersGvk,omitempty" yaml:"containersGvk,omitempty" nexus:"children"`
	NodeGvk                       *Link            `json:"nodeGvk,omitempty" yaml:"nodeGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceInstanceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceInstance `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceJob struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceJobSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceJobNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceJobNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceJob) CRDName() string {
	return "servicejobs.global.tsm.tanzu.vmware.com"
}

func (c *ServiceJob) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceJobSpec struct {
	Name                string          `json:"name" yaml:"name"`
	Metadata            string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Spec                string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"JobSpec\")"`
	Status              string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"JobStatus\")"`
	ServiceInstancesGvk map[string]Link `json:"serviceInstancesGvk,omitempty" yaml:"serviceInstancesGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceJobList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceJob `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceLevelObjectiveFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceLevelObjectiveFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceLevelObjectiveFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceLevelObjectiveFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceLevelObjectiveFolder) CRDName() string {
	return "servicelevelobjectivefolders.global.tsm.tanzu.vmware.com"
}

func (c *ServiceLevelObjectiveFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceLevelObjectiveFolderSpec struct {
	ServiceLevelObjectivesGvk map[string]Child `json:"serviceLevelObjectivesGvk,omitempty" yaml:"serviceLevelObjectivesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceLevelObjectiveFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceLevelObjectiveFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceLevelObjective struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceLevelObjectiveSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceLevelObjectiveNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceLevelObjectiveNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceLevelObjective) CRDName() string {
	return "servicelevelobjectives.global.tsm.tanzu.vmware.com"
}

func (c *ServiceLevelObjective) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceLevelObjectiveSpec struct {
	ProjectId       string `json:"projectId" yaml:"projectId"`
	Disabled        bool   `json:"disabled" yaml:"disabled"`
	Description     string `json:"description" yaml:"description"`
	Labels          string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Slis            string `nexus-graphql-nullable:"false" nexus-graphql-tsm-directive:"@jsonencoded(file: \"./root/config/service-level-objective/slo.ts\" gofile: \"slo.go\" name: \"ServiceLevelIndicationGroup\")"`
	SloServices     string `nexus-graphql-nullable:"false" nexus-graphql-tsm-directive:"@jsonencoded(file: \"./root/config/service-level-objective/slo.ts\" gofile: \"slo.go\" name: \"SloServices\")"`
	SloTargetValue  string `nexus-graphql-nullable:"false" nexus-graphql-tsm-directive:"@jsonencoded(file: \"./root/config/service-level-objective/slo.ts\" gofile: \"slo.go\" name: \"SloTargetValue\")"`
	SloPeriod       string `nexus-alias-type:"SloPeriodFrequency"`
	SloCreationTime string `nexus-graphql-nullable:"false"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceLevelObjectiveList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceLevelObjective `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceReplicaSet struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceReplicaSetSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceReplicaSetNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceReplicaSetNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceReplicaSet) CRDName() string {
	return "servicereplicasets.global.tsm.tanzu.vmware.com"
}

func (c *ServiceReplicaSet) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceReplicaSetSpec struct {
	Name                string          `json:"name" yaml:"name"`
	Metadata            string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Spec                string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"ReplicaSetSpec\")"`
	Status              string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"ReplicaSetStatus\")"`
	ServiceInstancesGvk map[string]Link `json:"serviceInstancesGvk,omitempty" yaml:"serviceInstancesGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceReplicaSetList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceReplicaSet `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceStatefulSet struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceStatefulSetSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceStatefulSetNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceStatefulSetNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceStatefulSet) CRDName() string {
	return "servicestatefulsets.global.tsm.tanzu.vmware.com"
}

func (c *ServiceStatefulSet) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceStatefulSetSpec struct {
	Name                string          `json:"name" yaml:"name"`
	Metadata            string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Spec                string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"StatefulSetSpec\")"`
	Status              string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"StatefulSetStatus\")"`
	ServiceInstancesGvk map[string]Link `json:"serviceInstancesGvk,omitempty" yaml:"serviceInstancesGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceStatefulSetList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceStatefulSet `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceTemplateServiceDefinition struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceTemplateServiceDefinitionSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceTemplateServiceDefinitionNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceTemplateServiceDefinitionNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceTemplateServiceDefinition) CRDName() string {
	return "servicetemplateservicedefinitions.global.tsm.tanzu.vmware.com"
}

func (c *ServiceTemplateServiceDefinition) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceTemplateServiceDefinitionSpec struct {
	Type         string   `nexus-graphql-nullable:"false"`
	Version      string   `nexus-graphql-nullable:"false"`
	Template     string   `nexus-graphql-nullable:"false"`
	TemplateArgs []string `nexus-graphql-nullable:"false"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceTemplateServiceDefinitionList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceTemplateServiceDefinition `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceTemplate struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceTemplateSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceTemplateNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceTemplateNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceTemplate) CRDName() string {
	return "servicetemplates.global.tsm.tanzu.vmware.com"
}

func (c *ServiceTemplate) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceTemplateSpec struct {
	Version               string           `json:"version" yaml:"version"`
	ServiceDefinitionsGvk map[string]Child `json:"serviceDefinitionsGvk,omitempty" yaml:"serviceDefinitionsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceTemplateList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceTemplate `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceVersionConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceVersionConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceVersionConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceVersionConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceVersionConfig) CRDName() string {
	return "serviceversionconfigs.global.tsm.tanzu.vmware.com"
}

func (c *ServiceVersionConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceVersionConfigSpec struct {
	Name              string           `json:"name" yaml:"name"`
	Version           string           `json:"version" yaml:"version"`
	MetricMonitorsGvk map[string]Child `json:"metricMonitorsGvk,omitempty" yaml:"metricMonitorsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceVersionConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceVersionConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type MetricMonitor struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              MetricMonitorSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            MetricMonitorNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type MetricMonitorNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *MetricMonitor) CRDName() string {
	return "metricmonitors.global.tsm.tanzu.vmware.com"
}

func (c *MetricMonitor) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type MetricMonitorSpec struct {
	OwnedBy      string `json:"ownedBy" yaml:"ownedBy"`
	SvcMetric    string `nexus-alias-type:"ServiceMetricTypeEnum"`
	FunctionType string `nexus-alias-type:"MetricMonitorFunction"`
	FunctionArgs string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/runtime/cluster-folder/cluster-config/domain-config/service-config/service-version-config/metric-monitor.ts\", gofile:\"metric-monitor.go\", name:\"FnArgs\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type MetricMonitorList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []MetricMonitor `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ServiceVersion struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceVersionSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceVersionNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceVersionNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ServiceVersion) CRDName() string {
	return "serviceversions.global.tsm.tanzu.vmware.com"
}

func (c *ServiceVersion) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceVersionSpec struct {
	Name                   string          `nexus-graphql-nullable:"false"`
	ServiceDeploymentsGvk  map[string]Link `json:"serviceDeploymentsGvk,omitempty" yaml:"serviceDeploymentsGvk,omitempty" nexus:"links"`
	ServiceDaemonSetsGvk   map[string]Link `json:"serviceDaemonSetsGvk,omitempty" yaml:"serviceDaemonSetsGvk,omitempty" nexus:"links"`
	ServiceStatefulSetsGvk map[string]Link `json:"serviceStatefulSetsGvk,omitempty" yaml:"serviceStatefulSetsGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceVersionList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ServiceVersion `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Service struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ServiceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ServiceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ServiceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Service) CRDName() string {
	return "services.global.tsm.tanzu.vmware.com"
}

func (c *Service) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ServiceSpec struct {
	Metadata                string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"Metadata\")"`
	Spec                    string           `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/kubernetes.d.ts\", gofile:\"kubernetes.go\", name:\"ServiceSpec\")"`
	Name                    string           `json:"name" yaml:"name"`
	Namespace               string           `json:"namespace" yaml:"namespace"`
	ApiLink                 string           `json:"apiLink" yaml:"apiLink"`
	IpAddress               string           `json:"ipAddress" yaml:"ipAddress"`
	Annotations             string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	CreationTimestamp       string           `json:"creationTimestamp" yaml:"creationTimestamp"`
	Labels                  string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	Uid                     string           `json:"uid" yaml:"uid"`
	Ports                   string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	Selector                string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	Type                    string           `json:"type" yaml:"type"`
	Status                  string           `nexus-graphql-tsm-directive:"@jsonencoded"`
	AdditionalAttributesGvk map[string]Child `json:"additionalAttributesGvk,omitempty" yaml:"additionalAttributesGvk,omitempty" nexus:"children"`
	ServiceVersionsGvk      map[string]Child `json:"serviceVersionsGvk,omitempty" yaml:"serviceVersionsGvk,omitempty" nexus:"children"`
	ServiceDeploymentsGvk   map[string]Link  `json:"serviceDeploymentsGvk,omitempty" yaml:"serviceDeploymentsGvk,omitempty" nexus:"links"`
	ServiceStatefulSetsGvk  map[string]Link  `json:"serviceStatefulSetsGvk,omitempty" yaml:"serviceStatefulSetsGvk,omitempty" nexus:"links"`
	ServiceDaemonSetsGvk    map[string]Link  `json:"serviceDaemonSetsGvk,omitempty" yaml:"serviceDaemonSetsGvk,omitempty" nexus:"links"`
	EndpointsGvk            map[string]Link  `json:"endpointsGvk,omitempty" yaml:"endpointsGvk,omitempty" nexus:"links"`
	ServiceReplicaSetsGvk   map[string]Link  `json:"serviceReplicaSetsGvk,omitempty" yaml:"serviceReplicaSetsGvk,omitempty" nexus:"links"`
	ServiceJobsGvk          map[string]Link  `json:"serviceJobsGvk,omitempty" yaml:"serviceJobsGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ServiceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Service `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SloConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SloConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SloConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SloConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SloConfig) CRDName() string {
	return "sloconfigs.global.tsm.tanzu.vmware.com"
}

func (c *SloConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SloConfigSpec struct {
	Name           string           `json:"name" yaml:"name"`
	SloServicesGvk map[string]Child `json:"sloServicesGvk,omitempty" yaml:"sloServicesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SloConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SloConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SloServiceConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SloServiceConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SloServiceConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SloServiceConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SloServiceConfig) CRDName() string {
	return "sloserviceconfigs.global.tsm.tanzu.vmware.com"
}

func (c *SloServiceConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SloServiceConfigSpec struct {
	Name            string `json:"name" yaml:"name"`
	RemainingBudget int    `json:"remainingBudget" yaml:"remainingBudget"`
	LastUpdateTime  string `json:"lastUpdateTime" yaml:"lastUpdateTime"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SloServiceConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SloServiceConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SLOFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SLOFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SLOFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SLOFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SLOFolder) CRDName() string {
	return "slofolders.global.tsm.tanzu.vmware.com"
}

func (c *SLOFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SLOFolderSpec struct {
	SlosGvk map[string]Child `json:"slosGvk,omitempty" yaml:"slosGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SLOFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SLOFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type FederatedSloConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              FederatedSloConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            FederatedSloConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type FederatedSloConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *FederatedSloConfig) CRDName() string {
	return "federatedsloconfigs.global.tsm.tanzu.vmware.com"
}

func (c *FederatedSloConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type FederatedSloConfigSpec struct {
	Name           string           `json:"name" yaml:"name"`
	SloServicesGvk map[string]Child `json:"sloServicesGvk,omitempty" yaml:"sloServicesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type FederatedSloConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []FederatedSloConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type FederatedSloServiceConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              FederatedSloServiceConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            FederatedSloServiceConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type FederatedSloServiceConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *FederatedSloServiceConfig) CRDName() string {
	return "federatedsloserviceconfigs.global.tsm.tanzu.vmware.com"
}

func (c *FederatedSloServiceConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type FederatedSloServiceConfigSpec struct {
	Name            string `json:"name" yaml:"name"`
	RemainingBudget int    `json:"remainingBudget" yaml:"remainingBudget"`
	LastUpdateTime  string `json:"lastUpdateTime" yaml:"lastUpdateTime"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type FederatedSloServiceConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []FederatedSloServiceConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SLOPolicy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SLOPolicySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SLOPolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SLOPolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SLOPolicy) CRDName() string {
	return "slopolicies.global.tsm.tanzu.vmware.com"
}

func (c *SLOPolicy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SLOPolicySpec struct {
	Name            string   `nexus-graphql-nullable:"false"`
	Disabled        bool     `json:"disabled" yaml:"disabled"`
	Description     string   `json:"description" yaml:"description"`
	Labels          string   `nexus-graphql-tsm-directive:"@jsonencoded(file:\"./common/ts/common.d.ts\", gofile:\"common.go\", name:\"Labels\")"`
	Slis            string   `nexus-graphql-nullable:"false" nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/config/service-level-objective/slo.ts\", gofile:\"slo.go\", name:\"ServiceLevelIndicationGroup\")"`
	ServiceNames    []string `nexus-graphql-nullable:"false"`
	SloTargetValue  string   `nexus-graphql-nullable:"false" nexus-graphql-tsm-directive:"@jsonencoded(file:\"./root/config/service-level-objective/slo.ts\", gofile:\"slo.go\", name:\"SloTargetValue\")"`
	SloPeriod       string   `nexus-alias-type:"SloPeriodFrequency!"`
	SloKind         string   `nexus-alias-type:"SLOKind!"`
	Actions         []string `json:"actions" yaml:"actions"`
	SloCreationTime string   `nexus-graphql-nullable:"false"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SLOPolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SLOPolicy `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type SvcGroup struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              SvcGroupSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            SvcGroupNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type SvcGroupNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *SvcGroup) CRDName() string {
	return "svcgroups.global.tsm.tanzu.vmware.com"
}

func (c *SvcGroup) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type SvcGroupSpec struct {
	DisplayName             string          `json:"displayName" yaml:"displayName"`
	InternalPredefinedGroup bool            `json:"internalPredefinedGroup" yaml:"internalPredefinedGroup"`
	Description             string          `json:"description" yaml:"description"`
	Color                   string          `json:"color" yaml:"color"`
	ProjectId               string          `json:"projectId" yaml:"projectId"`
	Rules                   string          `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/resourceGroup\", gofile:\"resource_group.go\", name:\"Rules\")"`
	ServicesGvk             map[string]Link `json:"servicesGvk,omitempty" yaml:"servicesGvk,omitempty" nexus:"links"`
	DeploymentsGvk          map[string]Link `json:"deploymentsGvk,omitempty" yaml:"deploymentsGvk,omitempty" nexus:"links"`
	DaemonsetsGvk           map[string]Link `json:"daemonsetsGvk,omitempty" yaml:"daemonsetsGvk,omitempty" nexus:"links"`
	StatefulsetsGvk         map[string]Link `json:"statefulsetsGvk,omitempty" yaml:"statefulsetsGvk,omitempty" nexus:"links"`
	JobsGvk                 map[string]Link `json:"jobsGvk,omitempty" yaml:"jobsGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type SvcGroupList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []SvcGroup `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Table struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              TableSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            TableNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type TableNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Table) CRDName() string {
	return "tables.global.tsm.tanzu.vmware.com"
}

func (c *Table) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type TableSpec struct {
	TemplateGvk  *Link `json:"templateGvk,omitempty" yaml:"templateGvk,omitempty" nexus:"link"`
	InventoryGvk *Link `json:"inventoryGvk,omitempty" yaml:"inventoryGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type TableList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Table `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type TemplateGroup struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              TemplateGroupSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            TemplateGroupNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type TemplateGroupNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *TemplateGroup) CRDName() string {
	return "templategroups.global.tsm.tanzu.vmware.com"
}

func (c *TemplateGroup) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type TemplateGroupSpec struct {
	ProjectId           string           `json:"projectId" yaml:"projectId"`
	DataTemplatesGvk    map[string]Child `json:"dataTemplatesGvk,omitempty" yaml:"dataTemplatesGvk,omitempty" nexus:"children"`
	NodeTemplatesGvk    map[string]Child `json:"nodeTemplatesGvk,omitempty" yaml:"nodeTemplatesGvk,omitempty" nexus:"children"`
	AppTemplatesGvk     map[string]Child `json:"appTemplatesGvk,omitempty" yaml:"appTemplatesGvk,omitempty" nexus:"children"`
	ServiceTemplatesGvk map[string]Child `json:"serviceTemplatesGvk,omitempty" yaml:"serviceTemplatesGvk,omitempty" nexus:"children"`
	PolicyTemplatesGvk  map[string]Child `json:"policyTemplatesGvk,omitempty" yaml:"policyTemplatesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type TemplateGroupList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []TemplateGroup `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Template struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              TemplateSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            TemplateNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type TemplateNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Template) CRDName() string {
	return "templates.global.tsm.tanzu.vmware.com"
}

func (c *Template) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type TemplateSpec struct {
	TemplateGroupsGvk map[string]Child `json:"templateGroupsGvk,omitempty" yaml:"templateGroupsGvk,omitempty" nexus:"children"`
	HealthChecksGvk   map[string]Child `json:"healthChecksGvk,omitempty" yaml:"healthChecksGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type TemplateList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Template `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type TenantResource struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              TenantResourceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            TenantResourceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type TenantResourceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *TenantResource) CRDName() string {
	return "tenantresources.global.tsm.tanzu.vmware.com"
}

func (c *TenantResource) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type TenantResourceSpec struct {
	Type     string `json:"type" yaml:"type"`
	Location string `json:"location" yaml:"location"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type TenantResourceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []TenantResource `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type TenantToken struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              TenantTokenSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            TenantTokenNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type TenantTokenNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *TenantToken) CRDName() string {
	return "tenanttokens.global.tsm.tanzu.vmware.com"
}

func (c *TenantToken) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type TenantTokenSpec struct {
	Ttl      int    `json:"ttl" yaml:"ttl"`
	Created  string `json:"created" yaml:"created"`
	TenantId string `json:"tenantId" yaml:"tenantId"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type TenantTokenList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []TenantToken `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Tenant struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              TenantSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            TenantNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type TenantNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Tenant) CRDName() string {
	return "tenants.global.tsm.tanzu.vmware.com"
}

func (c *Tenant) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type TenantSpec struct {
	Name           string           `nexus-graphql-nullable:"false"`
	TenantName     string           `nexus-graphql-nullable:"false"`
	ContactEmail   string           `nexus-graphql-nullable:"false"`
	Yaml           string           `json:"yaml" yaml:"yaml"`
	Lb             string           `json:"lb" yaml:"lb"`
	CompanySize    string           `json:"companySize" yaml:"companySize"`
	Address        string           `json:"address" yaml:"address"`
	ResourcesGvk   map[string]Child `json:"resourcesGvk,omitempty" yaml:"resourcesGvk,omitempty" nexus:"children"`
	AnnotationsGvk map[string]Child `json:"annotationsGvk,omitempty" yaml:"annotationsGvk,omitempty" nexus:"children"`
	TemplateGvk    *Link            `json:"templateGvk,omitempty" yaml:"templateGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type TenantList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Tenant `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type UserDiscoveryRT struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              UserDiscoveryRTSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            UserDiscoveryRTNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type UserDiscoveryRTNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *UserDiscoveryRT) CRDName() string {
	return "userdiscoveryrts.global.tsm.tanzu.vmware.com"
}

func (c *UserDiscoveryRT) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type UserDiscoveryRTSpec struct {
	Gnsid     string `json:"gnsid" yaml:"gnsid"`
	Selectors string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"gns_user_discovery.go\", name:\"UserDiscoveryClusterResourceSelectorRT\")"`
	Spec      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsUserDiscovery\", gofile:\"gns_user_discovery.go\", name:\"UserDiscoveryApplicationConfigList\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type UserDiscoveryRTList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []UserDiscoveryRT `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type UserDiscovery struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              UserDiscoverySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            UserDiscoveryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type UserDiscoveryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *UserDiscovery) CRDName() string {
	return "userdiscoveries.global.tsm.tanzu.vmware.com"
}

func (c *UserDiscovery) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type UserDiscoverySpec struct {
	Description string `json:"description" yaml:"description"`
	Labels      string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/common\", gofile:\"common.go\", name:\"LabelsList\")"`
	Spec        string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsUserDiscovery\", gofile:\"gns_user_discovery.go\", name:\"UserDiscoveryConfig\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type UserDiscoveryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []UserDiscovery `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type UserFolder struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              UserFolderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            UserFolderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type UserFolderNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *UserFolder) CRDName() string {
	return "userfolders.global.tsm.tanzu.vmware.com"
}

func (c *UserFolder) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type UserFolderSpec struct {
	UsersGvk       map[string]Child `json:"usersGvk,omitempty" yaml:"usersGvk,omitempty" nexus:"children"`
	AppUsersGvk    map[string]Child `json:"appUsersGvk,omitempty" yaml:"appUsersGvk,omitempty" nexus:"children"`
	AccessTokenGvk map[string]Child `json:"accessTokenGvk,omitempty" yaml:"accessTokenGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type UserFolderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []UserFolder `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type UserGroup struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              UserGroupSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            UserGroupNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type UserGroupNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *UserGroup) CRDName() string {
	return "usergroups.global.tsm.tanzu.vmware.com"
}

func (c *UserGroup) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type UserGroupSpec struct {
	DisplayName string `json:"displayName" yaml:"displayName"`
	Description string `json:"description" yaml:"description"`
	Scope       string `json:"scope" yaml:"scope"`
	Color       string `json:"color" yaml:"color"`
	Rules       string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/resourceGroup\", gofile:\"resource_group.go\", name:\"Rules\")"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type UserGroupList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []UserGroup `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type UserPreference struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              UserPreferenceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            UserPreferenceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type UserPreferenceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *UserPreference) CRDName() string {
	return "userpreferences.global.tsm.tanzu.vmware.com"
}

func (c *UserPreference) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type UserPreferenceSpec struct {
	Name   string `json:"name" yaml:"name"`
	Data   string `json:"data" yaml:"data"`
	UserId string `nexus-alias-type:"ID"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type UserPreferenceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []UserPreference `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type User struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              UserSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            UserNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type UserNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *User) CRDName() string {
	return "users.global.tsm.tanzu.vmware.com"
}

func (c *User) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type UserSpec struct {
	Username       string           `json:"username" yaml:"username"`
	Password       string           `json:"password" yaml:"password"`
	Email          string           `json:"email" yaml:"email"`
	AccessTokens   []string         `json:"accessTokens" yaml:"accessTokens"`
	LastActionDate string           `json:"lastActionDate" yaml:"lastActionDate"`
	PreferencesGvk map[string]Child `json:"preferencesGvk,omitempty" yaml:"preferencesGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type UserList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []User `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type VirtualService struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              VirtualServiceSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            VirtualServiceNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type VirtualServiceNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *VirtualService) CRDName() string {
	return "virtualservices.global.tsm.tanzu.vmware.com"
}

func (c *VirtualService) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type VirtualServiceSpec struct {
	Name                string          `json:"name" yaml:"name"`
	CreationTimestamp   string          `json:"creationTimestamp" yaml:"creationTimestamp"`
	ApiLink             string          `json:"apiLink" yaml:"apiLink"`
	Uid                 string          `json:"uid" yaml:"uid"`
	Annotations         string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	Labels              string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	Hosts               string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	Http                string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	Tls                 string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	Tcp                 string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	GatewayNames        string          `nexus-graphql-tsm-directive:"@jsonencoded"`
	ExportTo            []string        `nexus-graphql-nullable:"false"`
	DestinationRulesGvk map[string]Link `json:"destinationRulesGvk,omitempty" yaml:"destinationRulesGvk,omitempty" nexus:"links"`
	ServicesGvk         map[string]Link `json:"servicesGvk,omitempty" yaml:"servicesGvk,omitempty" nexus:"links"`
	GatewaysGvk         map[string]Link `json:"gatewaysGvk,omitempty" yaml:"gatewaysGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type VirtualServiceList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []VirtualService `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type WorkloadEntry struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              WorkloadEntrySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            WorkloadEntryNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type WorkloadEntryNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *WorkloadEntry) CRDName() string {
	return "workloadentries.global.tsm.tanzu.vmware.com"
}

func (c *WorkloadEntry) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type WorkloadEntrySpec struct {
	Name              string `json:"name" yaml:"name"`
	Annotations       string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Labels            string `nexus-graphql-tsm-directive:"@jsonencoded"`
	CreationTimestamp string `json:"creationTimestamp" yaml:"creationTimestamp"`
	ApiLink           string `json:"apiLink" yaml:"apiLink"`
	Uid               string `json:"uid" yaml:"uid"`
	Address           string `json:"address" yaml:"address"`
	WorkloadLabels    string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Ports             string `nexus-graphql-tsm-directive:"@jsonencoded"`
	Locality          string `json:"locality" yaml:"locality"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type WorkloadEntryList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []WorkloadEntry `json:"items" yaml:"items"`
}

// +k8s:openapi-gen=true
type QueryServiceInstanceTableArgs struct {
}

// +k8s:openapi-gen=true
type QueryServiceTSArgs struct {
}

// +k8s:openapi-gen=true
type QueryServiceTableArgs struct {
	SystemServices   bool   `json:"systemServices" yaml:"systemServices"`
	ExternalServices bool   `json:"externalServices" yaml:"externalServices"`
	ShowGateways     bool   `json:"showGateways" yaml:"showGateways"`
	Groupby          string `nexus-alias-type:"ServiceGroupByEnum" json:"groupby" yaml:"groupby"`
}

// +k8s:openapi-gen=true
type QueryServiceVersionTableArgs struct {
	SystemServices   bool `json:"systemServices" yaml:"systemServices"`
	ExternalServices bool `json:"externalServices" yaml:"externalServices"`
	ShowGateways     bool `json:"showGateways" yaml:"showGateways"`
}

// +k8s:openapi-gen=true
type QueryServiceTopologyArgs struct {
}

// +k8s:openapi-gen=true
type QueryClusterTableArgs struct {
}

// +k8s:openapi-gen=true
type QueryStartEndTimeArgs struct {
}

// +k8s:openapi-gen=true
type QueryAccessControlPolicyStatsArgs struct {
}

// +k8s:openapi-gen=true
type QueryGNSServiceAPIArgs struct {
}

// +k8s:openapi-gen=true
type QueryStatsArgs struct {
}

// +k8s:openapi-gen=true
type QueryLogsArgs struct {
}

// +k8s:openapi-gen=true
type QueryListArgs struct {
}

// +k8s:openapi-gen=true
type QueryLinechartArgs struct {
}

// +k8s:openapi-gen=true
type QueryTopNArgs struct {
}

// +k8s:openapi-gen=true
type QueryDetailArgs struct {
}

// +k8s:openapi-gen=true
type QueryIncomingAPIsArgs struct {
}

// +k8s:openapi-gen=true
type QueryOutgoingAPIsArgs struct {
}

// +k8s:openapi-gen=true
type QueryIncomingTCPArgs struct {
}

// +k8s:openapi-gen=true
type QueryOutgoingTCPArgs struct {
}

// +k8s:openapi-gen=true
type ProjectQueryNodeTSArgs struct {
}

// +k8s:openapi-gen=true
type ProjectClusterInventoryCountArgs struct {
}

// +k8s:openapi-gen=true
type ProjectQueryStatsArgs struct {
}

// +k8s:openapi-gen=true
type ProjectQueryLogsArgs struct {
}

// +k8s:openapi-gen=true
type ProjectQueryListArgs struct {
}

// +k8s:openapi-gen=true
type ProjectQueryLinechartArgs struct {
}

// +k8s:openapi-gen=true
type ProjectQueryTopNArgs struct {
}

// +k8s:openapi-gen=true
type ProjectQueryDetailArgs struct {
}

// +k8s:openapi-gen=true
type ProjectRiskTrackerArgs struct {
}

// +k8s:openapi-gen=true
type ProjectRiskTrackerDetailArgs struct {
}

// +k8s:openapi-gen=true
type QueryWorkloadVersionAPIArgs struct {
}

// +k8s:openapi-gen=true
type ClusterQueryServiceVersionTableArgs struct {
	SystemServices bool `json:"systemServices" yaml:"systemServices"`
	ShowGateways   bool `json:"showGateways" yaml:"showGateways"`
}

// +k8s:openapi-gen=true
type ClusterQueryServiceTableArgs struct {
	SystemServices bool   `json:"systemServices" yaml:"systemServices"`
	ShowGateways   bool   `json:"showGateways" yaml:"showGateways"`
	Groupby        string `nexus-alias-type:"ServiceGroupByEnum" json:"groupby" yaml:"groupby"`
}

// +k8s:openapi-gen=true
type DomainQueryLogsArgs struct {
}

// +k8s:openapi-gen=true
type DomainQueryServiceTableArgs struct {
	SystemServices bool   `json:"systemServices" yaml:"systemServices"`
	ShowGateways   bool   `json:"showGateways" yaml:"showGateways"`
	Groupby        string `nexus-alias-type:"ServiceGroupByEnum" json:"groupby" yaml:"groupby"`
}

// +k8s:openapi-gen=true
type DomainQueryServiceVersionTableArgs struct {
	SystemServices bool `json:"systemServices" yaml:"systemServices"`
	ShowGateways   bool `json:"showGateways" yaml:"showGateways"`
}

// +k8s:openapi-gen=true
type QuerySloArgs struct {
}

// +k8s:openapi-gen=true
type QueryClusterInventoryCountArgs struct {
}

// +k8s:openapi-gen=true
type QueryServiceAPIArgs struct {
}

// +k8s:openapi-gen=true
type InventoryQueryServiceAPIArgs struct {
	Continue string `nexus-alias-name:"Continue" json:"continue" yaml:"continue"`
}

// +k8s:openapi-gen=true
type SvcQueryDetailArgs struct {
}

// +k8s:openapi-gen=true
type SvcQueryIncomingAPIsArgs struct {
}

// +k8s:openapi-gen=true
type SvcQueryOutgoingAPIsArgs struct {
}

// +k8s:openapi-gen=true
type SvcQueryIncomingTCPArgs struct {
}

// +k8s:openapi-gen=true
type SvcQueryOutgoingTCPArgs struct {
}

// +k8s:openapi-gen=true
type SvcQueryTopNArgs struct {
}

// +k8s:openapi-gen=true
type SvcQueryServiceVersionTableArgs struct {
	ShowGateways bool `json:"showGateways" yaml:"showGateways"`
}

// +k8s:openapi-gen=true
type ConfigChangeStatusError struct {
	Message   string `json:"message" mapstructure:"message" yaml:"message"`
	Timestamp int    `json:"timestamp" mapstructure:"timestamp" yaml:"timestamp"`
}

// +k8s:openapi-gen=true
type ConfigChangeStatusWarning struct {
	Message   string `json:"message" mapstructure:"message" yaml:"message"`
	Timestamp int    `json:"timestamp" mapstructure:"timestamp" yaml:"timestamp"`
}

// +k8s:openapi-gen=true
type ConfigChangeStatus struct {
	CurrentChangeId string                     `json:"currentChangeId" mapstructure:"currentChangeId" yaml:"currentChangeId"`
	CurrentState    RuntimeConfigChangeState   `json:"currentState" mapstructure:"currentState" yaml:"currentState"`
	LastUpdateTime  int                        `json:"lastUpdateTime" mapstructure:"lastUpdateTime" yaml:"lastUpdateTime"`
	RetryCnt        int                        `json:"retryCnt" mapstructure:"retryCnt" yaml:"retryCnt"`
	Errors          ConfigChangeStatusErrors   `json:"errors" mapstructure:"errors" yaml:"errors"`
	Warnings        ConfigChangeStatusWarnings `json:"warnings" mapstructure:"warnings" yaml:"warnings"`
}

// +k8s:openapi-gen=true
type PublicServiceRouteConfigStatus struct {
	Status string `nexus-graphql-tsm-directive:"@jsonencoded(file:\"../common-apis/api/tenant/models/gnsPublicService.ts\", gofile:\"gns_public_service.go\", name: \"GnsPublicServiceRouteStatus\")" json:"status" yaml:"status"`
}

// +k8s:openapi-gen=true
type GNSConfigStatusError struct {
	Message string `json:"message" mapstructure:"message" yaml:"message"`
	Count   int    `json:"count" mapstructure:"count" yaml:"count"`
}

// +k8s:openapi-gen=true
type GNSConfigStatusWarning struct {
	Message string `json:"message" mapstructure:"message" yaml:"message"`
	Count   int    `json:"count" mapstructure:"count" yaml:"count"`
}

// +k8s:openapi-gen=true
type GNSConfigStatus struct {
	State         GNSConfigStatusPluginState `json:"state" mapstructure:"state" yaml:"state"`
	ConfigsSynced int                        `json:"configsSynced" mapstructure:"configsSynced" yaml:"configsSynced"`
	Timestamp     int                        `json:"timestamp" mapstructure:"timestamp" yaml:"timestamp"`
	Errors        GNSConfigStatusErrors      `json:"errors" mapstructure:"errors" yaml:"errors"`
	Warnings      GNSConfigStatusWarnings    `json:"warnings" mapstructure:"warnings" yaml:"warnings"`
}

// +k8s:openapi-gen=true
type GnsExternalServiceConfig struct {
	Name                   string                         `json:"Name" mapstructure:"Name" yaml:"name"`
	Description            string                         `json:"description" mapstructure:"description" yaml:"description"`
	Labels                 ESLabels                       `json:"labels" mapstructure:"labels" yaml:"labels"`
	Tags                   []string                       `json:"tags" mapstructure:"tags" yaml:"tags"`
	Active                 bool                           `json:"active" mapstructure:"active" yaml:"active"`
	Type                   string                         `json:"type" mapstructure:"type" yaml:"type"`
	ConfigRemote           GnsExternalServiceRemoteConfig `json:"configRemote" mapstructure:"configRemote" yaml:"configRemote"`
	ConfigServiceDirectory GnsExternalServiceSDConfig     `json:"config_service_directory" mapstructure:"config_service_directory" yaml:"configServiceDirectory"`
}

// +k8s:openapi-gen=true
type GnsExternalServiceRemoteConfig struct {
	ServicePort   int32    `json:"service_port" mapstructure:"service_port" yaml:"servicePort"`
	Protocol      string   `json:"protocol" mapstructure:"protocol" yaml:"protocol"`
	Hostname      string   `json:"hostname" mapstructure:"hostname" yaml:"hostname"`
	Port          int32    `json:"port" mapstructure:"port" yaml:"port"`
	Certificate   string   `json:"certificate" mapstructure:"certificate" yaml:"certificate"`
	HostnameAlias string   `json:"hostname_alias" mapstructure:"hostname_alias" yaml:"hostnameAlias"`
	Endpoints     []string `json:"endpoints" mapstructure:"endpoints" yaml:"endpoints"`
}

// +k8s:openapi-gen=true
type GnsExternalServiceSDConfig struct {
	SdName         string   `json:"sd_name" mapstructure:"sd_name" yaml:"sdName"`
	ExactNameRules []string `json:"exact_name_rules" mapstructure:"exact_name_rules" yaml:"exactNameRules"`
	RegexNameRules []string `json:"regex_name_rules" mapstructure:"regex_name_rules" yaml:"regexNameRules"`
	LabelRules     []string `json:"label_rules" mapstructure:"label_rules" yaml:"labelRules"`
}

// +k8s:openapi-gen=true
type ESLabel struct {
	Key   string `json:"key" mapstructure:"key" yaml:"key"`
	Value string `json:"value" mapstructure:"value" yaml:"value"`
}

// +k8s:openapi-gen=true
type GnsPublicServiceConfig struct {
	Name                  string            `json:"name" mapstructure:"name" yaml:"name"`
	PublicDomain          GnspsPublicDomain `json:"public_domains,omitempty" mapstructure:"public_domains" yaml:"publicDomain"`
	DnsHaPolicy           GnspsdnshaPolicy  `json:"dns_ha_policy,omitempty" mapstructure:"dns_ha_policy" yaml:"dnsHaPolicy"`
	WildcardCertificateId string            `json:"wildcard_certificate_id,omitempty" mapstructure:"wildcard_certificate_id" yaml:"wildcardCertificateId"`
}

// +k8s:openapi-gen=true
type GnsPublicServiceConfigWithId struct {
	Name                  string            `json:"name" mapstructure:"name" yaml:"name"`
	PublicDomain          GnspsPublicDomain `json:"public_domains,omitempty" mapstructure:"public_domains" yaml:"publicDomain"`
	DnsHaPolicy           GnspsdnshaPolicy  `json:"dns_ha_policy,omitempty" mapstructure:"dns_ha_policy" yaml:"dnsHaPolicy"`
	WildcardCertificateId string            `json:"wildcard_certificate_id,omitempty" mapstructure:"wildcard_certificate_id" yaml:"wildcardCertificateId"`
	Id                    string            `json:"id,omitempty" mapstructure:"id" yaml:"id"`
}

// +k8s:openapi-gen=true
type GnsPublicServiceDomain struct {
	DnsId  string `json:"dns_id,omitempty" mapstructure:"dns_id" yaml:"dnsId"`
	Domain string `json:"domain,omitempty" mapstructure:"domain" yaml:"domain"`
}

// +k8s:openapi-gen=true
type GnsPublicServiceDomainList struct {
	Domains []GnsPublicServiceDomain `json:"domains,omitempty" mapstructure:"domains" yaml:"domains"`
}

// +k8s:openapi-gen=true
type GnsPublicServiceRouteStatus struct {
	State   string `json:"state" mapstructure:"state" yaml:"state"`
	Message string `json:"message,omitempty" mapstructure:"message" yaml:"message"`
}

// +k8s:openapi-gen=true
type GnsPublicServiceStatus struct {
	State   string `json:"state" mapstructure:"state" yaml:"state"`
	Message string `json:"message,omitempty" mapstructure:"message" yaml:"message"`
}

// +k8s:openapi-gen=true
type GnspsPublicDomain struct {
	ExternalDnsId string `json:"external_dns_id,omitempty" mapstructure:"external_dns_id" yaml:"externalDnsId"`
	PrimaryDomain string `json:"primary_domain,omitempty" mapstructure:"primary_domain" yaml:"primaryDomain"`
	SubDomain     string `json:"sub_domain,omitempty" mapstructure:"sub_domain" yaml:"subDomain"`
	CertificateId string `json:"certificate_id,omitempty" mapstructure:"certificate_id" yaml:"certificateId"`
}

// +k8s:openapi-gen=true
type GnspsdnshaPolicy struct {
	PolicyType string `json:"policyType" mapstructure:"policyType" yaml:"policyType"`
}

// +k8s:openapi-gen=true
type GnsPublicServiceRouteConfig struct {
	Paths      []string `json:"path,omitempty" mapstructure:"path" yaml:"paths"`
	Target     string   `json:"target,omitempty" mapstructure:"target" yaml:"target"`
	TargetPort int32    `json:"target_port,omitempty" mapstructure:"target_port" yaml:"targetPort"`
}

// +k8s:openapi-gen=true
type GnsPublicServiceRouteConfigWithID struct {
	Path       string `json:"path,omitempty" mapstructure:"path" yaml:"path"`
	Target     string `json:"target,omitempty" mapstructure:"target" yaml:"target"`
	TargetPort int32  `json:"target_port,omitempty" mapstructure:"target_port" yaml:"targetPort"`
	Id         string `json:"id,omitempty" mapstructure:"id" yaml:"id"`
}

// +k8s:openapi-gen=true
type FnArgs struct {
	WindowSeconds int32 `json:"windowSeconds" mapstructure:"windowSeconds" yaml:"windowSeconds"`
	Threshold     int32 `json:"threshold" mapstructure:"threshold" yaml:"threshold"`
}

// +k8s:openapi-gen=true
type queryNodeTSArgs struct {
	nodeMetric   string `nexus-alias-type:"NodeMetricTypeEnum" json:"nodeMetric" yaml:"nodeMetric"`
	startTime    string `json:"startTime" yaml:"startTime"`
	endTime      string `json:"endTime" yaml:"endTime"`
	timeInterval string `json:"timeInterval" yaml:"timeInterval"`
}

// +k8s:openapi-gen=true
type queryNodeTableArgs struct {
	startTime string `json:"startTime" yaml:"startTime"`
	endTime   string `json:"endTime" yaml:"endTime"`
}

// +k8s:openapi-gen=true
type PolicyAction struct {
	Mtls MtlsState `json:"mtls" mapstructure:"mtls" yaml:"mtls"`
}

// Some of these types can't be named the same as what we have in the graphql file,
// even though we want to emulate a recursive structure. If the names here aren't
// unique they will collide with what gets generated from the graphql file.
type RuntimeConfigChangeState int
type ConfigChangeStatusErrors []ConfigChangeStatusError
type ConfigChangeStatusWarnings []ConfigChangeStatusWarning
type ConfigChangeStatusHistory []ConfigChangeStatus

// TODO How to support ConfigMapDataStub?
type ConfigMapData map[string]string

// Some of these types can't be named the same as what we have in the graphql file,
// even though we want to emulate a recursive structure. If the names here aren't
// unique they will collide with what gets generated from the graphql file.
type GNSConfigStatusPluginState int
type GNSConfigStatusErrors []GNSConfigStatusError
type GNSConfigStatusWarnings []GNSConfigStatusWarning
type GNSConfigStatusHistory []GNSConfigStatus
type ESLabels []ESLabel
type ServiceGroupServiceList []struct {
	Type          string `json:"type,omitempty" mapstructure:"type"`
	Domain        string `json:"domain,omitempty" mapstructure:"domain"`
	Name          string `json:"name,omitempty" mapstructure:"name"`
	MatchPriority int32  `json:"matchPriority,omitempty" mapstructure:"matchPriority"`
}
type MtlsState int
type PolicyActions PolicyAction
type NexusNode nexus.Node
type ServiceGroupSvcList []struct {
	Type   string `json:"type,omitempty" mapstructure:"type"`
	Domain string `json:"domain,omitempty" mapstructure:"domain"`
	Name   string `json:"name,omitempty" mapstructure:"name"`
}

const (
	RuntimeConfigChangeState_APPLIED RuntimeConfigChangeState = iota
	RuntimeConfigChangeState_INSYNC
	RuntimeConfigChangeState_INERROR
	GNSConfigStatusPluginState_IDLE GNSConfigStatusPluginState = iota
	GNSConfigStatusPluginState_PROCESSING
	GNSConfigStatusPluginState_SYNCING
	GNSConfigStatusPluginState_SYNCED
	GNSConfigStatusPluginState_ERROR
	GnsExternalServiceConfig_FromExternal                   = "FromExternal"
	GnsExternalServiceConfig_FromServiceDirectory           = "FromServiceDirectory"
	GnsExternalServiceConfig_TCP                            = "TCP"
	GnsExternalServiceConfig_TLS                            = "TLS"
	GnsExternalServiceConfig_HTTP                           = "HTTP"
	GnsExternalServiceConfig_HTTPS                          = "HTTPS"
	INHERIT                                       MtlsState = iota
	ENFORCING
	PERMISSIVE
	DISABLED
	UNDEFINED
)

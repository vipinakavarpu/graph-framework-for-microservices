// Code generated by nexus. DO NOT EDIT.

package v1

import (
	istioauth "istio.io/api/authentication/v1alpha1"
	"istio.io/api/networking/v1alpha3"
	istio "istio.io/api/networking/v1alpha3"
	k8sappsv1 "k8s.io/api/apps/v1"
	k8sbatchv1 "k8s.io/api/batch/v1"
	k8sbatchv1beta1 "k8s.io/api/batch/v1beta1"
	k8scorev1 "k8s.io/api/core/v1"
	k8sapimachineryv1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type NexusStatus struct {
	SourceGeneration int64 `json:"sourceGeneration" yaml:"sourceGeneration"`
	RemoteGeneration int64 `json:"remoteGeneration" yaml:"remoteGeneration"`
}

/* ------------------- CRDs definitions ------------------- */

// +k8s:openapi-gen=true
type CertificateConfig struct {
	Name                 string                     `json:"name" mapstructure:"name" yaml:"name"`
	Description          string                     `json:"description" mapstructure:"description" yaml:"description"`
	CertificateType      string                     `json:"certificateType" mapstructure:"certificateType" yaml:"certificateType"`
	ManagedCertificate   ManagedCertificateConfig   `json:"managedCertificate,omitempty" mapstructure:"managedCertificate" yaml:"managedCertificate"`
	UnManagedCertificate UnManagedCertificateConfig `json:"unManagedCertificate,omitempty" mapstructure:"unManagedCertificate" yaml:"unManagedCertificate"`
}

// +k8s:openapi-gen=true
type CertificateDetails struct {
	Id                   string `json:"id,omitempty" yaml:"id"`
	CertificateType      string `json:"certificateType" yaml:"certificateType"`
	SignedCertificate    string `json:"signed_certificate,omitempty" yaml:"signedCertificate"`
	IssuedToCn           string `json:"issued_to_cn,omitempty" yaml:"issuedToCn"`
	IssuedToO            string `json:"issued_to_o,omitempty" yaml:"issuedToO"`
	IssuedToOu           string `json:"issued_to_ou,omitempty" yaml:"issuedToOu"`
	IssuedToSerialNumber string `json:"issued_to_serial_number,omitempty" yaml:"issuedToSerialNumber"`
	IssuedByCn           string `json:"issued_by_cn,omitempty" yaml:"issuedByCn"`
	IssuedByO            string `json:"issued_by_o,omitempty" yaml:"issuedByO"`
	IssuedByOu           string `json:"issued_by_ou,omitempty" yaml:"issuedByOu"`
	BeginsOn             string `json:"begins_on,omitempty" yaml:"beginsOn"`
	ExpiresOn            string `json:"expires_on,omitempty" yaml:"expiresOn"`
	Sha256Fingerprint    string `json:"sha_256_fingerprint,omitempty" yaml:"sha256Fingerprint"`
	Sha1Fingerprint      string `json:"sha_1_fingerprint,omitempty" yaml:"sha1Fingerprint"`
}

// +k8s:openapi-gen=true
type CertificateStatus struct {
	State   string `json:"state" yaml:"state"`
	Message string `json:"message,omitempty" yaml:"message"`
}

// +k8s:openapi-gen=true
type ManagedCertificateConfig struct {
	CountryName                       string `json:"country_name,omitempty" yaml:"countryName"`
	StateName                         string `json:"state_name,omitempty" yaml:"stateName"`
	CityName                          string `json:"city_name,omitempty" yaml:"cityName"`
	OrganizationName                  string `json:"organization_name,omitempty" yaml:"organizationName"`
	OrganizationalUnit                string `json:"organizational_unit,omitempty" yaml:"organizationalUnit"`
	CommonName                        string `json:"common_name,omitempty" yaml:"commonName"`
	EmailAddress                      string `json:"email_address,omitempty" yaml:"emailAddress"`
	CompanyName                       string `json:"company_name,omitempty" yaml:"companyName"`
	AutoGeneratedSingleDomain         bool   `json:"auto_generated_single_domain,omitempty" yaml:"autoGeneratedSingleDomain"`
	SelfSign                          bool   `json:"self_sign,omitempty" yaml:"selfSign"`
	ExternalCaPluginConfigPlaceholder string `json:"external_ca_plugin_config_placeholder,omitempty" yaml:"externalCaPluginConfigPlaceholder"`
}

// +k8s:openapi-gen=true
type UnManagedCertificateConfig struct {
	PrivateKey        string `json:"private_key,omitempty" mapstructure:"private_key" yaml:"privateKey"`
	SignedCertificate string `json:"signed_certificate,omitempty" mapstructure:"signed_certificate" yaml:"signedCertificate"`
	CertChain         string `json:"cert_chain,omitempty" mapstructure:"cert_chain" yaml:"certChain"`
}

// +k8s:openapi-gen=true
type CaLabel struct {
	Key   string `json:"key" mapstructure:"key" yaml:"key"`
	Value string `json:"value" mapstructure:"value" yaml:"value"`
}

// +k8s:openapi-gen=true
type Status struct {
	State State `json:"state" mapstructure:"state" yaml:"state"`
}

// +k8s:openapi-gen=true
type VenafiConfig struct {
	Zone string `json:"zone,omitempty" mapstructure:"zone" yaml:"zone"`
}

// +k8s:openapi-gen=true
type CertificateAuthorityConfig struct {
	Name        string       `json:"name" mapstructure:"name" yaml:"name"`
	Description string       `json:"description,omitempty" mapstructure:"description" yaml:"description"`
	AccoundId   string       `json:"accountId" mapstructure:"accountId" yaml:"accoundId"`
	Labels      []CaLabel    `json:"labels" mapstructure:"labels" yaml:"labels"`
	Venafi      VenafiConfig `json:"venafi" mapstructure:"venafi" yaml:"venafi"`
}

// +k8s:openapi-gen=true
type CertificateAuthorityConfigWithId struct {
	Name        string       `json:"name" mapstructure:"name" yaml:"name"`
	Description string       `json:"description,omitempty" mapstructure:"description" yaml:"description"`
	AccoundId   string       `json:"account_id" mapstructure:"account_id" yaml:"accoundId"`
	Labels      []CaLabel    `json:"labels" mapstructure:"labels" yaml:"labels"`
	Venafi      VenafiConfig `json:"venafi" mapstructure:"venafi" yaml:"venafi"`
	Id          string       `json:"id,omitempty" mapstructure:"id" yaml:"id"`
}

// +k8s:openapi-gen=true
type StatusCondition struct {
	Status  string `json:"status" mapstructure:"status" yaml:"status"`
	Reason  string `json:"reason" mapstructure:"reason" yaml:"reason"`
	Message string `json:"message" mapstructure:"message" yaml:"message"`
}

// +k8s:openapi-gen=true
type CertStatus struct {
	conditions  StatusConditions `json:"conditions" mapstructure:"conditions" yaml:"conditions"`
	notBefore   string           `json:"notBefore" mapstructure:"notBefore" yaml:"notBefore"`
	notAfter    string           `json:"notAfter" mapstructure:"notAfter" yaml:"notAfter"`
	renewalTime string           `json:"renewalTime" mapstructure:"renewalTime" yaml:"renewalTime"`
}

// +k8s:openapi-gen=true
type IssuerStatus struct {
	conditions StatusConditions `json:"conditions" mapstructure:"conditions" yaml:"conditions"`
}

// +k8s:openapi-gen=true
type CertRequestStatus struct {
	conditions  StatusConditions `json:"conditions" mapstructure:"conditions" yaml:"conditions"`
	ca          string           `json:"ca" mapstructure:"ca" yaml:"ca"`
	certificate string           `json:"certificate" mapstructure:"certificate" yaml:"certificate"`
}

// +k8s:openapi-gen=true
type ClusterSyncStatus struct {
	State ClusterSyncState `json:"state" mapstructure:"state" yaml:"state"`
}

// +k8s:openapi-gen=true
type CaSyncStatus struct {
	State   CaSyncState `json:"state" mapstructure:"state" yaml:"state"`
	Message string      `json:"message" mapstructure:"message" yaml:"message"`
}

// +k8s:openapi-gen=true
type ClusterStatusMetadata struct {
	Substate string `json:"substate" mapstructure:"substate" yaml:"substate"`
	Progress int32  `json:"progress" mapstructure:"progress" yaml:"progress"`
}

// +k8s:openapi-gen=true
type ClusterStatus struct {
	State           ClusterState          `json:"state" mapstructure:"state" yaml:"state"`
	Metadata        ClusterStatusMetadata `json:"metadata" mapstructure:"metadata" yaml:"metadata"`
	Code            int32                 `json:"code" mapstructure:"code" yaml:"code"`
	Message         string                `json:"message" mapstructure:"message" yaml:"message"`
	UpdateTimestamp string                `json:"updateTimestamp" mapstructure:"updateTimestamp" yaml:"updateTimestamp"`
}

// +k8s:openapi-gen=true
type CaStatus struct {
	Name            string  `json:"name" mapstructure:"name" yaml:"name"`
	State           CaState `json:"state" mapstructure:"state" yaml:"state"`
	Reason          string  `json:"reason" mapstructure:"reason" yaml:"reason"`
	Message         string  `json:"message" mapstructure:"message" yaml:"message"`
	UpdateTimestamp string  `json:"updateTimestamp" mapstructure:"updateTimestamp" yaml:"updateTimestamp"`
}

// +k8s:openapi-gen=true
type ComponentStatus struct {
	Component       string         `json:"component" mapstructure:"component" yaml:"component"`
	State           ComponentState `json:"state" mapstructure:"state" yaml:"state"`
	Code            int32          `json:"code" mapstructure:"code" yaml:"code"`
	Message         string         `json:"message" mapstructure:"message" yaml:"message"`
	UpdateTimestamp string         `json:"updateTimestamp" mapstructure:"updateTimestamp" yaml:"updateTimestamp"`
}

// +k8s:openapi-gen=true
type ComponentStatuses struct {
	Statuses []ComponentStatus `json:"statuses" mapstructure:"statuses" yaml:"statuses"`
}

// +k8s:openapi-gen=true
type Application struct {
	Version string `json:"version" mapstructure:"version" yaml:"version"`
}

// +k8s:openapi-gen=true
type ApplicationInstance struct {
	Version             string               `json:"version" mapstructure:"version" yaml:"version"`
	PreviousVersion     string               `json:"previousVersion" mapstructure:"previousVersion" yaml:"previousVersion"`
	State               ApplicationState     `json:"state" mapstructure:"state" yaml:"state"`
	UpgradeableVersions []UpgradeableVersion `json:"upgradeableVersions" mapstructure:"upgradeableVersions" yaml:"upgradeableVersions"`
}

// +k8s:openapi-gen=true
type UpgradeableVersion struct {
	Version string           `json:"version" mapstructure:"version" yaml:"version"`
	State   ApplicationState `json:"state" mapstructure:"state" yaml:"state"`
}

// +k8s:openapi-gen=true
type Version struct {
	Version     string `json:"version" mapstructure:"version" yaml:"version"`
	Installable bool   `json:"installable" mapstructure:"installable" yaml:"installable"`
	Reason      string `json:"reason" mapstructure:"reason" yaml:"reason"`
}

// +k8s:openapi-gen=true
type ApplicationStatus struct {
	Name              string           `json:"name" mapstructure:"name" yaml:"name"`
	Version           string           `json:"version" mapstructure:"version" yaml:"version"`
	Id                string           `json:"id" mapstructure:"id" yaml:"id"`
	State             ApplicationState `json:"state" mapstructure:"state" yaml:"state"`
	AvailableVersions Versions         `json:"availableVersions" mapstructure:"availableVersions" yaml:"availableVersions"`
}

// +k8s:openapi-gen=true
type ClusterIDs struct {
	Ids []string `json:"ids" mapstructure:"ids" yaml:"ids"`
}

// +k8s:openapi-gen=true
type Token struct {
	Token string `json:"token" mapstructure:"token" yaml:"token"`
}

// +k8s:openapi-gen=true
type LogRequest struct {
	Type      LogType `json:"type" mapstructure:"type" yaml:"type"`
	Namespace string  `json:"namespace" mapstructure:"namespace" yaml:"namespace"`
}

// +k8s:openapi-gen=true
type ProxyConfigRequest struct {
	Proxy       ProxyType     `json:"proxyType" mapstructure:"proxyType" yaml:"proxy"`
	Protocol    ProxyProtocol `json:"proxyProtocol" mapstructure:"proxyProtocol" yaml:"protocol"`
	Host        string        `json:"host" mapstructure:"host" yaml:"host"`
	Port        int32         `json:"port" mapstructure:"port" yaml:"port"`
	Username    string        `json:"username" mapstructure:"username" yaml:"username"`
	Password    string        `json:"password" mapstructure:"password" yaml:"password"`
	Certificate string        `json:"certificate" mapstructure:"certificate" yaml:"certificate"`
}

// +k8s:openapi-gen=true
type AutoInstallServiceMeshConfig struct {
	RestrictDefaultExternalAccess bool `json:"restrictDefaultExternalAccess" mapstructure:"restrictDefaultExternalAccess" yaml:"restrictDefaultExternalAccess"`
}

// +k8s:openapi-gen=true
type AttributeValue struct {
	BoolValue bool   `json:"boolValue" mapstructure:"boolValue" yaml:"boolValue"`
	NumValue  int32  `json:"numValue" mapstructure:"numValue" yaml:"numValue"`
	StrValue  string `json:"strValue" mapstructure:"strValue" yaml:"strValue"`
}

// +k8s:openapi-gen=true
type MtlsException struct {
	Enabled        bool     `json:"enabled" mapstructure:"enabled" yaml:"enabled"`
	Services       []string `json:"services" mapstructure:"services" yaml:"services"`
	Service_groups []string `json:"service_groups" mapstructure:"service_groups" yaml:"service_groups"`
}

// +k8s:openapi-gen=true
type HealthCheckType struct {
	Name                string `json:"name" mapstructure:"name" yaml:"name"`
	Protocol            string `json:"protocol" mapstructure:"protocol" yaml:"protocol"`
	Port                int32  `json:"port" mapstructure:"port" yaml:"port"`
	Path                string `json:"path" mapstructure:"path" yaml:"path"`
	FailureThreshold    int32  `json:"failureThreshold" mapstructure:"failureThreshold" yaml:"failureThreshold"`
	HealthCheckInterval int32  `json:"healthCheckInterval" mapstructure:"healthCheckInterval" yaml:"healthCheckInterval"`
}

// +k8s:openapi-gen=true
type ClusterList struct {
	Weight  int32  `json:"weight" mapstructure:"weight" yaml:"weight"`
	Primary bool   `json:"primary" mapstructure:"primary" yaml:"primary"`
	Country string `json:"country" mapstructure:"country" yaml:"country"`
}

// +k8s:openapi-gen=true
type Routing struct {
	Clusters map[string]ClusterList `json:"clusters" mapstructure:"clusters" yaml:"clusters"`
}

// +k8s:openapi-gen=true
type RoutingPolicyType struct {
	Name   string  `json:"name" mapstructure:"name" yaml:"name"`
	Type   string  `json:"type" mapstructure:"type" yaml:"type"`
	Policy Routing `json:"policy" mapstructure:"policy" yaml:"policy"`
}

// +k8s:openapi-gen=true
type Condition struct {
	Type  MatchFunction `json:"type" mapstructure:"type" yaml:"type"`
	Match string        `json:"match" mapstructure:"match" yaml:"match"`
}

// +k8s:openapi-gen=true
type GnsServiceGroupSpec struct {
	Name string `json:"name,omitempty" mapstructure:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type GnsServiceSelector struct {
	Services     []string              `json:"services,omitempty" mapstructure:"services" yaml:"services"`
	ServiceGroup []GnsServiceGroupSpec `json:"service_group,omitempty" mapstructure:"service_group" yaml:"serviceGroup"`
}

// +k8s:openapi-gen=true
type ClusterResourceSelectorRT struct {
	Services     []string              `json:"services,omitempty" mapstructure:"services" yaml:"services"`
	ServiceGroup []GnsServiceGroupSpec `json:"service_group,omitempty" mapstructure:"service_group" yaml:"serviceGroup"`
}

// +k8s:openapi-gen=true
type RoutingRuleConfigHeaderOperations struct {
	Set    map[string]string `json:"set" mapstructure:"set" yaml:"set"`
	Add    map[string]string `json:"add" mapstructure:"add" yaml:"add"`
	Remove []string          `json:"remove" mapstructure:"remove" yaml:"remove"`
}

// +k8s:openapi-gen=true
type RoutingRuleConfigHeaders struct {
	Request  RoutingRuleConfigHeaderOperations `json:"request" mapstructure:"request" yaml:"request"`
	Response RoutingRuleConfigHeaderOperations `json:"response" mapstructure:"response" yaml:"response"`
}

// +k8s:openapi-gen=true
type RoutingRuleConfigStringMatch struct {
	Exact  string `json:"exact" mapstructure:"exact" yaml:"exact"`
	Prefix string `json:"prefix" mapstructure:"prefix" yaml:"prefix"`
	Regex  string `json:"regex" mapstructure:"regex" yaml:"regex"`
}

// +k8s:openapi-gen=true
type RouteStringMatch struct {
	Type  StringMatchType `json:"type" mapstructure:"type" yaml:"type"`
	Value string          `json:"value" mapstructure:"value" yaml:"value"`
}

// +k8s:openapi-gen=true
type RouteMapMatch struct {
	Type   StringMatchType   `json:"type" mapstructure:"type" yaml:"type"`
	Values map[string]string `json:"value" mapstructure:"value" yaml:"values"`
}

// +k8s:openapi-gen=true
type HTTPRouteMatch struct {
	Path        RouteStringMatch `json:"path" mapstructure:"path" yaml:"path"`
	Headers     RouteMapMatch    `json:"headers" mapstructure:"headers" yaml:"headers"`
	QueryParams RouteMapMatch    `json:"queryParams" mapstructure:"queryParams" yaml:"queryParams"`
}

// +k8s:openapi-gen=true
type TargetRoute struct {
	ServiceVersion string `json:"service_version" mapstructure:"service_version" yaml:"serviceVersion"`
	Weight         int64  `json:"weight" mapstructure:"weight" yaml:"weight"`
}

// +k8s:openapi-gen=true
type HTTPRoutingRule struct {
	Name    string           `json:"name" mapstructure:"name" yaml:"name"`
	Matches []HTTPRouteMatch `json:"matches" mapstructure:"matches" yaml:"matches"`
	Targets []TargetRoute    `json:"targets" mapstructure:"targets" yaml:"targets"`
}

// +k8s:openapi-gen=true
type TrafficPolicy struct {
	Http []HTTPRoutingRule `json:"http" mapstructure:"http" yaml:"http"`
}

// +k8s:openapi-gen=true
type TrafficRoutingPolicy struct {
	Service       string        `json:"service" mapstructure:"service" yaml:"service"`
	Port          int32         `json:"port" mapstructure:"port" yaml:"port"`
	TrafficPolicy TrafficPolicy `json:"traffic_policy" mapstructure:"traffic_policy" yaml:"trafficPolicy"`
}

// +k8s:openapi-gen=true
type ServiceSelector struct {
	Service string `json:"service" mapstructure:"service" yaml:"service"`
}

// +k8s:openapi-gen=true
type Label struct {
	Key   string `json:"key" mapstructure:"key" yaml:"key"`
	Value string `json:"value" mapstructure:"value" yaml:"value"`
}

// +k8s:openapi-gen=true
type GatewayConfigListener struct {
	Name         string               `json:"name" mapstructure:"name" yaml:"name"`
	Port         int32                `json:"port" mapstructure:"port" yaml:"port"`
	Protocol     string               `json:"protocol" mapstructure:"protocol" yaml:"protocol"`
	Hosts        []string             `json:"hosts" mapstructure:"hosts" yaml:"hosts"`
	RoutingRules []GatewayRoutingRule `json:"routingRules" mapstructure:"routingRules" yaml:"routingRules"`
}

// +k8s:openapi-gen=true
type GatewayRoutingRuleSNI struct {
	SniRoutingRule struct {
		Name    string
		Match   string
		Replace string
	} `json:"sniRoutingRule" mapstructure:"sniRoutingRule" yaml:"sniRoutingRule"`
}

// +k8s:openapi-gen=true
type MatchCondition struct {
	Namespace Condition `json:"namespace" mapstructure:"namespace" yaml:"namespace"`
	Cluster   Condition `json:"cluster" mapstructure:"cluster" yaml:"cluster"`
}

// +k8s:openapi-gen=true
type GnsACPPolicyMatch struct {
	Port     []string            `json:"port,omitempty" mapstructure:"port" yaml:"port"`
	Hostname []string            `json:"hostname,omitempty" mapstructure:"hostname" yaml:"hostname"`
	Path     []string            `json:"path,omitempty" mapstructure:"path" yaml:"path"`
	Method   []GnsACPMatchMethod `json:"method,omitempty" mapstructure:"method" yaml:"method"`
}

// +k8s:openapi-gen=true
type GnsACPServiceGroup struct {
	ServiceGroup []GnsServiceGroupSpec `json:"service_group,omitempty" mapstructure:"service_group" yaml:"serviceGroup"`
}

// +k8s:openapi-gen=true
type GnsAccessControlPolicySpec struct {
	Destination GnsACPServiceGroup  `json:"destination,omitempty" mapstructure:"destination" yaml:"destination"`
	Source      GnsACPServiceGroup  `json:"source,omitempty" mapstructure:"source" yaml:"source"`
	Action      string              `json:"action,omitempty" mapstructure:"action" yaml:"action"`
	Match       []GnsACPPolicyMatch `json:"match,omitempty" mapstructure:"match" yaml:"match"`
}

// +k8s:openapi-gen=true
type ConfigDedup struct {
	Name         string   `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	SegmentRegex []string `json:"segment_regex,omitempty" mapstructure:"segment_regex" yaml:"segmentRegex"`
	PathTemplate []string `json:"path_template,omitempty" mapstructure:"path_template" yaml:"pathTemplate"`
	GenerationId string   `json:"generation_id,omitempty" mapstructure:"generation_id" yaml:"generationId"`
}

// +k8s:openapi-gen=true
type APIMimeConfig struct {
	IgnoredMime []string `json:"ignored_mime,omitempty" mapstructure:"ignored_mime" yaml:"ignoredMime"`
}

// +k8s:openapi-gen=true
type APIAsyncWorkerLimits struct {
	TotalMemory              *int `json:"total_memory,omitempty" mapstructure:"total_memory" yaml:"totalMemory"`
	ThroughputLimitingWindow *int `json:"throughput_limiting_window,omitempty" mapstructure:"throughput_limiting_window" yaml:"throughputLimitingWindow"`
	TransactionsPerWindow    *int `json:"transactions_per_window,omitempty" mapstructure:"transactions_per_window" yaml:"transactionsPerWindow"`
	BytesPerWindow           *int `json:"bytes_per_window,omitempty" mapstructure:"bytes_per_window" yaml:"bytesPerWindow"`
}

// +k8s:openapi-gen=true
type APIDiscoveryAppConfig struct {
	SchemaFlushIntervals             *int                  `json:"schema_flush_interval_s,omitempty" mapstructure:"schema_flush_interval_s" yaml:"schemaFlushIntervals"`
	EnableAsyncReporting             *bool                 `json:"enable_async_reporting,omitempty" mapstructure:"enable_async_reporting" yaml:"enableAsyncReporting"`
	GroupBy                          []string              `json:"group_by,omitempty" mapstructure:"group_by" yaml:"groupBy"`
	UseDefaultGrouping               *bool                 `json:"use_default_grouping,omitempty" mapstructure:"use_default_grouping" yaml:"useDefaultGrouping"`
	BranchingLimit                   *int                  `json:"branching_limit,omitempty" mapstructure:"branching_limit" yaml:"branchingLimit"`
	SchemaUpdateSendDelayMs          *int                  `json:"schema_update_send_delay_ms,omitempty" mapstructure:"schema_update_send_delay_ms" yaml:"schemaUpdateSendDelayMs"`
	APIMimeConfig                    *APIMimeConfig        `json:"mime_config,omitempty" mapstructure:"mime_config" yaml:"aPIMimeConfig"`
	WhitelistedResponseCodes         []int                 `json:"whitelisted_response_codes,omitempty" mapstructure:"whitelisted_response_codes" yaml:"whitelistedResponseCodes"`
	UseDefaultResponseCodesWhitelist string                `json:"use_default_response_codes_whitelist,omitempty" mapstructure:"use_default_response_codes_whitelist" yaml:"useDefaultResponseCodesWhitelist"`
	Limits                           *APIAsyncWorkerLimits `json:"limits,omitempty" mapstructure:"limits" yaml:"limits"`
	CacheMemoryLimit                 *int                  `json:"cache_memory_limit,omitempty" mapstructure:"cache_memory_limit" yaml:"cacheMemoryLimit"`
	Hostnames                        []ConfigDedup         `json:"-" mapstructure:"hostnames" yaml:"hostnames"`
	InternalEditTimestamp            string                `json:"internal_edit_timestamp,omitempty" mapstructure:"internal_edit_timestamp" yaml:"internalEditTimestamp"`
	EnableSquashing                  *bool                 `json:"enable_squashing,omitempty" mapstructure:"enable_squashing" yaml:"enableSquashing"`
}

// +k8s:openapi-gen=true
type APIDiscoveryIsEndpointApiPrechecks struct {
	ProtocolVersions      []string `json:"protocol_versions,omitempty" mapstructure:"protocol_versions" yaml:"protocolVersions"`
	Methods               []string `json:"methods,omitempty" mapstructure:"methods" yaml:"methods"`
	ContentTypes          []string `json:"content_types,omitempty" mapstructure:"content_types" yaml:"contentTypes"`
	PathExtensions        []string `json:"path_extensions,omitempty" mapstructure:"path_extensions" yaml:"pathExtensions"`
	MaxRequestBufferSize  *uint64  `json:"max_request_buffer_size,omitempty" mapstructure:"max_request_buffer_size" yaml:"maxRequestBufferSize"`
	MaxResponseBufferSize *uint64  `json:"max_response_buffer_size,omitempty" mapstructure:"max_response_buffer_size" yaml:"maxResponseBufferSize"`
}

// +k8s:openapi-gen=true
type APIDiscoveryProcessingToggles struct {
	RequestHeaderParameters  *bool `json:"request_header_parameters,omitempty" mapstructure:"request_header_parameters" yaml:"requestHeaderParameters"`
	ResponseHeaderParameters *bool `json:"response_header_parameters,omitempty" mapstructure:"response_header_parameters" yaml:"responseHeaderParameters"`
}

// +k8s:openapi-gen=true
type ApiDiscoveryConfig struct {
	Selectors              GnsServiceSelector                 `json:"selectors,omitempty" mapstructure:"selectors" yaml:"selectors"`
	Application            ApiDiscoveryApplicationConfigList  `json:"application,omitempty" mapstructure:"application" yaml:"application"`
	CompressionEnabled     bool                               `json:"compression_enabled,omitempty" mapstructure:"compression_enabled" yaml:"compressionEnabled"`
	IsEndpointApiPrechecks APIDiscoveryIsEndpointApiPrechecks `json:"is_endpoint_api_prechecks,omitempty" mapstructure:"is_endpoint_api_prechecks" yaml:"isEndpointApiPrechecks"`
	ProcessingToggles      APIDiscoveryProcessingToggles      `json:"processing_toggles,omitempty" mapstructure:"processing_toggles" yaml:"processingToggles"`
}

// +k8s:openapi-gen=true
type QueryParam struct {
	CaseSensitive bool   `json:"case_sensitive,omitempty" mapstructure:"case_sensitive" yaml:"caseSensitive"`
	Path          string `json:"path,omitempty" mapstructure:"path" yaml:"path"`
	Prefix        string `json:"prefix,omitempty" mapstructure:"prefix" yaml:"prefix"`
	Regex         string `json:"regex,omitempty" mapstructure:"regex" yaml:"regex"`
}

// +k8s:openapi-gen=true
type QueryParamMatchValue struct {
	CaseSensitive bool   `json:"case_sensitive,omitempty" mapstructure:"case_sensitive" yaml:"caseSensitive"`
	Path          string `json:"path,omitempty" mapstructure:"path" yaml:"path"`
	Prefix        string `json:"prefix,omitempty" mapstructure:"prefix" yaml:"prefix"`
	Regex         string `json:"regex,omitempty" mapstructure:"regex" yaml:"regex"`
}

// +k8s:openapi-gen=true
type QueryParamsMatch struct {
	MaskValue string               `json:"mask_value,omitempty" mapstructure:"mask_value" yaml:"maskValue"`
	Param     QueryParam           `json:"param,omitempty" mapstructure:"param" yaml:"param"`
	Value     QueryParamMatchValue `json:"value,omitempty" mapstructure:"value" yaml:"value"`
}

// +k8s:openapi-gen=true
type CacheConfig struct {
	QueryParamsMatches []QueryParamsMatch `json:"query_params_matches,omitempty" mapstructure:"query_params_matches" yaml:"queryParamsMatches"`
	Size               int                `json:"size,omitempty" mapstructure:"size" yaml:"size"`
}

// +k8s:openapi-gen=true
type RuleRange struct {
	IdFrom int `json:"id_from,omitempty" mapstructure:"id_from" yaml:"idFrom"`
	IdTo   int `json:"id_to,omitempty" mapstructure:"id_to" yaml:"idTo"`
}

// +k8s:openapi-gen=true
type RulesGroup struct {
	CustomRules []string     `json:"custom_rules,omitempty" mapstructure:"custom_rules" yaml:"customRules"`
	Mode        string       `json:"mode,omitempty" mapstructure:"mode" yaml:"mode"`
	Name        string       `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	RulesRanges []*RuleRange `json:"rules_ranges,omitempty" mapstructure:"rules_ranges" yaml:"rulesRanges"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyPreConditions struct {
	AllowedHTTPVersions           []string `json:"allowed_http_versions,omitempty" mapstructure:"allowed_http_versions" yaml:"allowedHTTPVersions"`
	AllowedHTTPMethods            []string `json:"allowed_http_methods,omitempty" mapstructure:"allowed_http_methods" yaml:"allowedHTTPMethods"`
	AllowedContentTypes           []string `json:"allowed_content_types,omitempty" mapstructure:"allowed_content_types" yaml:"allowedContentTypes"`
	ScannedContentTypes           []string `json:"scanned_content_types,omitempty" mapstructure:"scanned_content_types" yaml:"scannedContentTypes"`
	AllowedHTTPPathFileExtensions []string `json:"allowed_http_path_file_extensions,omitempty" mapstructure:"allowed_http_path_file_extensions" yaml:"allowedHTTPPathFileExtensions"`
	ForbiddenHTTPHeaders          []string `json:"forbidden_http_headers,omitempty" mapstructure:"forbidden_http_headers" yaml:"forbiddenHTTPHeaders"`
	MaxFileUploadSize             int64    `json:"max_file_upload_size,omitempty" mapstructure:"max_file_upload_size" yaml:"maxFileUploadSize"`
	MaxRequestBufferSize          int64    `json:"max_request_buffer_size,omitempty" mapstructure:"max_request_buffer_size" yaml:"maxRequestBufferSize"`
	MaxResponsePayloadSize        int64    `json:"max_response_payload_size,omitempty" mapstructure:"max_response_payload_size" yaml:"maxResponsePayloadSize"`
	MaxResponseBufferSize         int64    `json:"max_response_buffer_size,omitempty" mapstructure:"max_response_buffer_size" yaml:"maxResponseBufferSize"`
}

// +k8s:openapi-gen=true
type ProcessingToggles struct {
	RequestHeaders  string `json:"request_headers,omitempty" mapstructure:"request_headers" yaml:"requestHeaders"`
	RequestBody     string `json:"request_body,omitempty" mapstructure:"request_body" yaml:"requestBody"`
	ResponseHeaders string `json:"response_headers,omitempty" mapstructure:"response_headers" yaml:"responseHeaders"`
	ResponseBody    string `json:"response_body,omitempty" mapstructure:"response_body" yaml:"responseBody"`
}

// +k8s:openapi-gen=true
type AttackDiscoveryAppConfig struct {
	AuditLogEnable     *bool                               `json:"audit_log_enable,omitempty" mapstructure:"audit_log_enable" yaml:"auditLogEnable"`
	CacheConfig        *CacheConfig                        `json:"cache_config,omitempty" mapstructure:"cache_config" yaml:"cacheConfig"`
	CfgFile            string                              `json:"cfg_file,omitempty" mapstructure:"cfg_file" yaml:"cfgFile"`
	CfgPlain           string                              `json:"cfg_plain,omitempty" mapstructure:"cfg_plain" yaml:"cfgPlain"`
	MaxMatchedDataSize *int                                `json:"max_matched_data_size,omitempty" mapstructure:"max_matched_data_size" yaml:"maxMatchedDataSize"`
	ParanoiaLevel      *int                                `json:"paranoia_level,omitempty" mapstructure:"paranoia_level" yaml:"paranoiaLevel"`
	RulesGroups        []*RulesGroup                       `json:"rules_groups,omitempty" mapstructure:"rules_groups" yaml:"rulesGroups"`
	PreConditions      *GnsSegmentationPolicyPreConditions `json:"pre_conditions,omitempty" mapstructure:"pre_conditions" yaml:"preConditions"`
	RulesDirectory     string                              `json:"rules_directory,omitempty" mapstructure:"rules_directory" yaml:"rulesDirectory"`
	Process            *ProcessingToggles                  `json:"process,omitempty" mapstructure:"process" yaml:"process"`
}

// +k8s:openapi-gen=true
type AttackDiscoveryConfig struct {
	Selectors   GnsServiceSelector                   `json:"selectors,omitempty" mapstructure:"selectors" yaml:"selectors"`
	Application AttackDiscoveryApplicationConfigList `json:"application,omitempty" mapstructure:"application" yaml:"application"`
}

// +k8s:openapi-gen=true
type Center struct {
	Latitude  string `json:"latitude,omitempty" mapstructure:"latitude" yaml:"latitude"`
	Longitude string `json:"longitude,omitempty" mapstructure:"longitude" yaml:"longitude"`
}

// +k8s:openapi-gen=true
type GeoMeta struct {
	Name      string  `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	Center    *Center `json:"center,omitempty" mapstructure:"center" yaml:"center"`
	Country   string  `json:"country,omitempty" mapstructure:"country" yaml:"country"`
	Proximity string  `json:"proximity,omitempty" mapstructure:"proximity" yaml:"proximity"`
	State     string  `json:"state,omitempty" mapstructure:"state" yaml:"state"`
}

// +k8s:openapi-gen=true
type GeoDiscoveryConfig struct {
	Selectors GnsServiceSelector              `json:"selectors,omitempty" mapstructure:"selectors" yaml:"selectors"`
	GeoFences GeoDiscoveryGeoFencesConfigList `json:"geofences" mapstructure:"geofences" yaml:"geoFences"`
}

// +k8s:openapi-gen=true
type DLPMatch struct {
	PatternGroups []string `json:"pattern_groups,omitempty" mapstructure:"pattern_groups" yaml:"patternGroups"`
	Patterns      []string `json:"patterns,omitempty" mapstructure:"patterns" yaml:"patterns"`
}

// +k8s:openapi-gen=true
type Query struct {
	Name  *string  `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	Regex []string `json:"regex,omitempty" mapstructure:"regex" yaml:"regex"`
}

// +k8s:openapi-gen=true
type CheckFunction struct {
	Name       string `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	Parameters string `json:"parameters,omitempty" mapstructure:"parameters" yaml:"parameters"`
}

// +k8s:openapi-gen=true
type Check struct {
	Name       *string        `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	Confidence *uint32        `json:"confidence,omitempty" mapstructure:"confidence" yaml:"confidence"`
	Proximity  *uint32        `json:"proximity,omitempty" mapstructure:"proximity" yaml:"proximity"`
	QueryName  string         `json:"query_name,omitempty" mapstructure:"query_name" yaml:"queryName"`
	Function   *CheckFunction `json:"function,omitempty" mapstructure:"function" yaml:"function"`
	Mandatory  *bool          `json:"mandatory,omitempty" mapstructure:"mandatory" yaml:"mandatory"`
}

// +k8s:openapi-gen=true
type BaseCheck struct {
	Name       *string `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	Confidence *uint32 `json:"confidence,omitempty" mapstructure:"confidence" yaml:"confidence"`
	QueryName  *string `json:"query_name,omitempty" mapstructure:"query_name" yaml:"queryName"`
}

// +k8s:openapi-gen=true
type Pattern struct {
	Name             *string    `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	MinConfidence    int        `json:"min_confidence,omitempty" mapstructure:"min_confidence" yaml:"minConfidence"`
	Exceptions       []*Check   `json:"exceptions,omitempty" mapstructure:"exceptions" yaml:"exceptions"`
	AdditionalChecks []*Check   `json:"additional_checks,omitempty" mapstructure:"additional_checks" yaml:"additionalChecks"`
	BaseCheck        *BaseCheck `json:"base_check,omitempty" mapstructure:"base_check" yaml:"baseCheck"`
}

// +k8s:openapi-gen=true
type PatternGroup struct {
	Name     *string  `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	Patterns []string `json:"patterns,omitempty" mapstructure:"patterns" yaml:"patterns"`
}

// +k8s:openapi-gen=true
type PatternDatabase struct {
	DatabaseFile  *string         `json:"database_file,omitempty" mapstructure:"database_file" yaml:"databaseFile"`
	UseDefault    *bool           `json:"use_default,omitempty" mapstructure:"use_default" yaml:"useDefault"`
	Queries       []*Query        `json:"queries,omitempty" mapstructure:"queries" yaml:"queries"`
	Patterns      []*Pattern      `json:"patterns,omitempty" mapstructure:"patterns" yaml:"patterns"`
	PatternGroups []*PatternGroup `json:"pattern_groups,omitempty" mapstructure:"pattern_groups" yaml:"patternGroups"`
}

// +k8s:openapi-gen=true
type DLPConfig struct {
	MatchingPolicy  *DLPMatch        `json:"matching_policy,omitempty" mapstructure:"matching_policy" yaml:"matchingPolicy"`
	PatternDatabase *PatternDatabase `json:"pattern_database,omitempty" mapstructure:"pattern_database" yaml:"patternDatabase"`
}

// +k8s:openapi-gen=true
type PIIMimeConfig struct {
	IgnoredMime []string `json:"ignored_mime,omitempty" mapstructure:"ignored_mime" yaml:"ignoredMime"`
}

// +k8s:openapi-gen=true
type PIIAsyncWorkerLimits struct {
	TotalMemory              *uint64 `json:"total_memory,omitempty" mapstructure:"total_memory" yaml:"totalMemory"`
	ThroughputLimitingWindow *uint64 `json:"throughput_limiting_window,omitempty" mapstructure:"throughput_limiting_window" yaml:"throughputLimitingWindow"`
	TransactionsPerWindow    *uint64 `json:"transactions_per_window,omitempty" mapstructure:"transactions_per_window" yaml:"transactionsPerWindow"`
	BytesPerWindow           *uint64 `json:"bytes_per_window,omitempty" mapstructure:"bytes_per_window" yaml:"bytesPerWindow"`
}

// +k8s:openapi-gen=true
type RuleConfig struct {
	OnlineBufferSize      *uint32               `json:"online_buffer_size,omitempty" mapstructure:"online_buffer_size" yaml:"onlineBufferSize"`
	EnableOffline         string                `json:"enable_offline,omitempty" mapstructure:"enable_offline" yaml:"enableOffline"`
	DLPConfig             *DLPConfig            `json:"dlp_config,omitempty" mapstructure:"dlp_config" yaml:"dLPConfig"`
	EnableDetailedLogging *bool                 `json:"enable_detailed_logging,omitempty" mapstructure:"enable_detailed_logging" yaml:"enableDetailedLogging"`
	PIIMimeConfig         *PIIMimeConfig        `json:"mime_config,omitempty" mapstructure:"mime_config" yaml:"pIIMimeConfig"`
	Limits                *PIIAsyncWorkerLimits `json:"limits,omitempty" mapstructure:"limits" yaml:"limits"`
}

// +k8s:openapi-gen=true
type PiiDiscoveryAppConfig struct {
	Rule *RuleConfig `json:"rule,omitempty" mapstructure:"rule" yaml:"rule"`
}

// +k8s:openapi-gen=true
type PiiDiscoveryConfig struct {
	Selectors   GnsServiceSelector                `json:"selectors,omitempty" mapstructure:"selectors" yaml:"selectors"`
	Application PiiDiscoveryApplicationConfigList `json:"application,omitempty" mapstructure:"application" yaml:"application"`
}

// +k8s:openapi-gen=true
type OpenAPI struct {
	Inline string `json:"inline,omitempty" yaml:"inline"`
	URL    string `json:"url,omitempty" yaml:"uRL"`
}

// +k8s:openapi-gen=true
type SubToggles struct {
	Extra           Mode `json:"extra,omitempty" mapstructure:"extra" yaml:"extra"`
	Missing         Mode `json:"missing,omitempty" mapstructure:"missing" yaml:"missing"`
	SchemaViolation Mode `json:"schema_violation,omitempty" mapstructure:"schema_violation" yaml:"schemaViolation"`
	MissingSchema   Mode `json:"missing_schema,omitempty" mapstructure:"missing_schema" yaml:"missingSchema"`
}

// +k8s:openapi-gen=true
type Toggles struct {
	QueryParameters               *SubToggles `json:"query_parameters,omitempty" mapstructure:"query_parameters" yaml:"queryParameters"`
	RequestHeaders                *SubToggles `json:"request_headers,omitempty" mapstructure:"request_headers" yaml:"requestHeaders"`
	ResponseHeaders               *SubToggles `json:"response_headers,omitempty" mapstructure:"response_headers" yaml:"responseHeaders"`
	RequestPayload                *SubToggles `json:"request_payload,omitempty" mapstructure:"request_payload" yaml:"requestPayload"`
	ResponsePayload               *SubToggles `json:"response_payload,omitempty" mapstructure:"response_payload" yaml:"responsePayload"`
	RequestCookies                *SubToggles `json:"request_cookies,omitempty" mapstructure:"request_cookies" yaml:"requestCookies"`
	PathParametersSchemaViolation Mode        `json:"path_parameters_schema_violation,omitempty" mapstructure:"path_parameters_schema_violation" yaml:"pathParametersSchemaViolation"`
	UnexpectedEndpoint            Mode        `json:"unexpected_endpoint,omitempty" mapstructure:"unexpected_endpoint" yaml:"unexpectedEndpoint"`
	UnexpectedResponseCode        Mode        `json:"unexpected_response_code,omitempty" mapstructure:"unexpected_response_code" yaml:"unexpectedResponseCode"`
	UnexpectedRequestContentType  Mode        `json:"unexpected_request_content_type,omitempty" mapstructure:"unexpected_request_content_type" yaml:"unexpectedRequestContentType"`
	UnexpectedResponseContentType Mode        `json:"unexpected_response_content_type,omitempty" mapstructure:"unexpected_response_content_type" yaml:"unexpectedResponseContentType"`
}

// +k8s:openapi-gen=true
type GnsSchemaViolationDiscoveryConfig struct {
	Selectors struct{ Service string } `json:"selectors" mapstructure:"selectors" yaml:"selectors"`
	OpenAPI   OpenAPI                  `json:"openapi,omitempty" mapstructure:"openapi" yaml:"openAPI"`
	Toggles   *Toggles                 `json:"toggles,omitempty" mapstructure:"toggles" yaml:"toggles"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyActionCode struct {
	Code *uint32 `json:"code,omitempty" mapstructure:"code" yaml:"code"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyActionEmpty struct {
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyActionType struct {
	RateLimit *GnsSegmentationRateLimitingPools `json:"rate_limit,omitempty" mapstructure:"rate_limit" yaml:"rateLimit"`
	Allow     *GnsSegmentationPolicyActionEmpty `json:"allow,omitempty" mapstructure:"allow" yaml:"allow"`
	Deny      *GnsSegmentationPolicyActionCode  `json:"deny,omitempty" mapstructure:"deny" yaml:"deny"`
	Skip      *GnsSegmentationPolicyActionEmpty `json:"skip,omitempty" mapstructure:"skip" yaml:"skip"`
}

// +k8s:openapi-gen=true
type GnsSegmentationRateLimitingPool struct {
	GroupBy string  `json:"group_by,omitempty" mapstructure:"group_by" yaml:"groupBy"`
	Limit   *uint64 `json:"limit,omitempty" mapstructure:"limit" yaml:"limit"`
	Action  string  `json:"action,omitempty" mapstructure:"action" yaml:"action"`
	Cadency string  `json:"cadency,omitempty" mapstructure:"cadency" yaml:"cadency"`
}

// +k8s:openapi-gen=true
type GnsSegmentationRateLimitingPoolMap struct {
	Name string                           `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	Pool *GnsSegmentationRateLimitingPool `json:"pool,omitempty" mapstructure:"pool" yaml:"pool"`
}

// +k8s:openapi-gen=true
type GnsSegmentationRateLimitingPoolSelector struct {
	UsePool string `json:"use_pool,omitempty" mapstructure:"use_pool" yaml:"usePool"`
}

// +k8s:openapi-gen=true
type GnsSegmentationRateLimitingPools struct {
	Pools []*GnsSegmentationRateLimitingPoolSelector `json:"pools,omitempty" mapstructure:"pools" yaml:"pools"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyPiiAction struct {
	Action       *GnsSegmentationPolicyActionType `json:"action,omitempty" mapstructure:"action" yaml:"action"`
	Pattern      string                           `json:"pattern,omitempty" mapstructure:"pattern" yaml:"pattern"`
	PatternGroup string                           `json:"pattern_group,omitempty" mapstructure:"pattern_group" yaml:"patternGroup"`
}

// +k8s:openapi-gen=true
type GnsSegmentationDLPPolicy struct {
	DefaultAction *GnsSegmentationPolicyActionType  `json:"default_action,omitempty" mapstructure:"default_action" yaml:"defaultAction"`
	PiiActions    []*GnsSegmentationPolicyPiiAction `json:"pii_actions,omitempty" mapstructure:"pii_actions" yaml:"piiActions"`
}

// +k8s:openapi-gen=true
type GnsSegmentationDefensePolicyRule struct {
	Action *GnsSegmentationPolicyActionType `json:"action,omitempty" mapstructure:"action" yaml:"action"`
	Group  string                           `json:"group,omitempty" mapstructure:"group" yaml:"group"`
	Id     uint32                           `json:"id,omitempty" mapstructure:"id" yaml:"id"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyProcessingToggles struct {
	RequestHeaders  string `json:"request_headers,omitempty" mapstructure:"request_headers" yaml:"requestHeaders"`
	RequestBody     string `json:"request_body,omitempty" mapstructure:"request_body" yaml:"requestBody"`
	ResponseHeaders string `json:"response_headers,omitempty" mapstructure:"response_headers" yaml:"responseHeaders"`
	ResponseBody    string `json:"response_body,omitempty" mapstructure:"response_body" yaml:"responseBody"`
}

// +k8s:openapi-gen=true
type GnsSegmentationAttackDefense struct {
	Action             *GnsSegmentationPolicyActionType        `json:"action,omitempty" mapstructure:"action" yaml:"action"`
	Process            *GnsSegmentationPolicyProcessingToggles `json:"process,omitempty" mapstructure:"process" yaml:"process"`
	Rules              []*GnsSegmentationDefensePolicyRule     `json:"rules,omitempty" mapstructure:"rules" yaml:"rules"`
	PreconditionAction *GnsSegmentationPolicyActionType        `json:"precondition_action,omitempty" mapstructure:"precondition_action" yaml:"preconditionAction"`
}

// +k8s:openapi-gen=true
type GnsSegmentationSubPolicy struct {
	Extra           *GnsSegmentationPolicyActionType `json:"extra,omitempty" mapstructure:"extra" yaml:"extra"`
	Missing         *GnsSegmentationPolicyActionType `json:"missing,omitempty" mapstructure:"missing" yaml:"missing"`
	SchemaViolation *GnsSegmentationPolicyActionType `json:"schema_violation,omitempty" mapstructure:"schema_violation" yaml:"schemaViolation"`
	MissingSchema   *GnsSegmentationPolicyActionType `json:"missing_schema,omitempty" mapstructure:"missing_schema" yaml:"missingSchema"`
}

// +k8s:openapi-gen=true
type GnsSegmentationSchemaValidation struct {
	ViolationAction               *GnsSegmentationPolicyActionType `json:"violation_action,omitempty" mapstructure:"violation_action" yaml:"violationAction"`
	PathParametersSchemaViolation *GnsSegmentationPolicyActionType `json:"path_parameters_schema_violation,omitempty" mapstructure:"path_parameters_schema_violation" yaml:"pathParametersSchemaViolation"`
	QueryParameters               *GnsSegmentationSubPolicy        `json:"query_parameters,omitempty" mapstructure:"query_parameters" yaml:"queryParameters"`
	RequestHeaders                *GnsSegmentationSubPolicy        `json:"request_headers,omitempty" mapstructure:"request_headers" yaml:"requestHeaders"`
	ResponseHeaders               *GnsSegmentationSubPolicy        `json:"response_headers,omitempty" mapstructure:"response_headers" yaml:"responseHeaders"`
	RequestPayload                *GnsSegmentationSubPolicy        `json:"request_payload,omitempty" mapstructure:"request_payload" yaml:"requestPayload"`
	ResponsePayload               *GnsSegmentationSubPolicy        `json:"response_payload,omitempty" mapstructure:"response_payload" yaml:"responsePayload"`
	RequestCookies                *GnsSegmentationSubPolicy        `json:"request_cookies,omitempty" mapstructure:"request_cookies" yaml:"requestCookies"`
	UnexpectedEndpoint            *GnsSegmentationPolicyActionType `json:"unexpected_endpoint,omitempty" mapstructure:"unexpected_endpoint" yaml:"unexpectedEndpoint"`
	UnexpectedResponseCode        *GnsSegmentationPolicyActionType `json:"unexpected_response_code,omitempty" mapstructure:"unexpected_response_code" yaml:"unexpectedResponseCode"`
	UnexpectedRequestContentType  *GnsSegmentationPolicyActionType `json:"unexpected_request_content_type,omitempty" mapstructure:"unexpected_request_content_type" yaml:"unexpectedRequestContentType"`
	UnexpectedResponseContentType *GnsSegmentationPolicyActionType `json:"unexpected_response_content_type,omitempty" mapstructure:"unexpected_response_content_type" yaml:"unexpectedResponseContentType"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyIngressFeatures struct {
	APISegmentation  *GnsSegmentationPolicyActionType    `json:"api_segmentation,omitempty" mapstructure:"api_segmentation" yaml:"aPISegmentation"`
	PIISegmentation  *GnsSegmentationDLPPolicy           `json:"pii_segmentation,omitempty" mapstructure:"pii_segmentation" yaml:"pIISegmentation"`
	RateLimit        []*GnsSegmentationRateLimitingPools `json:"rate_limit,omitempty" mapstructure:"rate_limit" yaml:"rateLimit"`
	AttackDefense    *GnsSegmentationAttackDefense       `json:"attack_defense,omitempty" mapstructure:"attack_defense" yaml:"attackDefense"`
	SchemaValidation *GnsSegmentationSchemaValidation    `json:"schema_validation,omitempty" mapstructure:"schema_validation" yaml:"schemaValidation"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyMatchEndpoint struct {
	Method string `json:"method,omitempty" mapstructure:"method" yaml:"method"`
	Path   string `json:"path,omitempty" mapstructure:"path" yaml:"path"`
}

// +k8s:openapi-gen=true
type GnsSegmentationSourceSelectorIpBlock struct {
	Cidr   []string `json:"cidr,omitempty" mapstructure:"cidr" yaml:"cidr"`
	Except []string `json:"except,omitempty" mapstructure:"except" yaml:"except"`
}

// +k8s:openapi-gen=true
type GnsSegmentationServiceGroupSpec struct {
	Name string `json:"name,omitempty" mapstructure:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type GnsSegmentationSourceSelector struct {
	IpBlock      *GnsSegmentationSourceSelectorIpBlock `json:"ip_block,omitempty" mapstructure:"ip_block" yaml:"ipBlock"`
	ServiceGroup []string                              `json:"service_group,omitempty" mapstructure:"service_group" yaml:"serviceGroup"`
	ServiceName  []string                              `json:"service_name,omitempty" mapstructure:"service_name" yaml:"serviceName"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicyHeadersMap struct {
	Key   string `json:"key,omitempty" mapstructure:"key" yaml:"key"`
	Value string `json:"value,omitempty" mapstructure:"value" yaml:"value"`
}

// +k8s:openapi-gen=true
type GnsSegmentationIngressApplication struct {
	Hostname        []string                              `json:"hostname,omitempty" mapstructure:"hostname" yaml:"hostname"`
	UserID          []string                              `json:"user_id,omitempty" mapstructure:"user_id" yaml:"userID"`
	UserAgent       []string                              `json:"user_agent,omitempty" mapstructure:"user_agent" yaml:"userAgent"`
	Headers         []*GnsSegmentationPolicyHeadersMap    `json:"headers,omitempty" mapstructure:"headers" yaml:"headers"`
	Endpoint        []*GnsSegmentationPolicyMatchEndpoint `json:"endpoint,omitempty" mapstructure:"endpoint" yaml:"endpoint"`
	Protocol        string                                `json:"protocol,omitempty" mapstructure:"protocol" yaml:"protocol"`
	ServiceGroup    []string                              `json:"service_group,omitempty" mapstructure:"service_group" yaml:"serviceGroup"`
	SourceSelector  *GnsSegmentationSourceSelector        `json:"source_selector,omitempty" mapstructure:"source_selector" yaml:"sourceSelector"`
	IngressFeatures GnsSegmentationPolicyIngressFeatures  `json:"ingress_features,omitempty" mapstructure:"ingress_features" yaml:"ingressFeatures"`
}

// +k8s:openapi-gen=true
type GnsSegmentationPolicySpec struct {
	Selectors         struct{ Service string }             `json:"selectors" mapstructure:"selectors" yaml:"selectors"`
	RateLimitingPools []GnsSegmentationRateLimitingPoolMap `json:"rate_limiting_pools,omitempty" mapstructure:"rate_limiting_pools" yaml:"rateLimitingPools"`
	Application       []GnsSegmentationIngressApplication  `json:"application,omitempty" mapstructure:"application" yaml:"application"`
	Default           GnsSegmentationPolicyIngressFeatures `json:"default,omitempty" mapstructure:"default" yaml:"default"`
}

// +k8s:openapi-gen=true
type IdentityFormat_Jwt struct {
	Claim     string `json:"claim,omitempty" mapstructure:"claim" yaml:"claim"`
	ClaimPath string `json:"claim_path,omitempty" mapstructure:"claim_path" yaml:"claimPath"`
}

// +k8s:openapi-gen=true
type IdentityFormat_Json struct {
	ClaimPath string `json:"claim_path,omitempty" mapstructure:"claim_path" yaml:"claimPath"`
}

// +k8s:openapi-gen=true
type IdentityFormat struct {
	Type string               `json:"type,omitempty" mapstructure:"type" yaml:"type"`
	Jwt  *IdentityFormat_Jwt  `json:"jwt,omitempty" mapstructure:"jwt" yaml:"jwt"`
	Json *IdentityFormat_Json `json:"json,omitempty" mapstructure:"json" yaml:"json"`
}

// +k8s:openapi-gen=true
type LocationHeader struct {
	Name        string `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	ValuePrefix string `json:"value_prefix,omitempty" mapstructure:"value_prefix" yaml:"valuePrefix"`
}

// +k8s:openapi-gen=true
type TokenLocation struct {
	Headers   []*LocationHeader `json:"headers,omitempty" mapstructure:"headers" yaml:"headers"`
	UrlParams []string          `json:"url_params,omitempty" mapstructure:"url_params" yaml:"urlParams"`
	Cookies   []string          `json:"cookies,omitempty" mapstructure:"cookies" yaml:"cookies"`
	Body      []string          `json:"body,omitempty" mapstructure:"body" yaml:"body"`
}

// +k8s:openapi-gen=true
type RouteMatch struct {
	Prefix        string `json:"prefix,omitempty" mapstructure:"prefix" yaml:"prefix"`
	Path          string `json:"path,omitempty" mapstructure:"path" yaml:"path"`
	Regex         string `json:"regex,omitempty" mapstructure:"regex" yaml:"regex"`
	CaseSensitive *bool  `json:"case_sensitive,omitempty" mapstructure:"case_sensitive" yaml:"caseSensitive"`
}

// +k8s:openapi-gen=true
type IdentityProvider struct {
	IdentityType string          `json:"identity_type,omitempty" mapstructure:"identity_type" yaml:"identityType"`
	Format       *IdentityFormat `json:"format,omitempty" mapstructure:"format" yaml:"format"`
	From         *TokenLocation  `json:"from,omitempty" mapstructure:"from" yaml:"from"`
	Direction    string          `json:"direction,omitempty" mapstructure:"direction" yaml:"direction"`
	Route        *RouteMatch     `json:"route,omitempty" mapstructure:"route" yaml:"route"`
}

// +k8s:openapi-gen=true
type UserIdentityProviderItem struct {
	Name     string            `json:"name,omitempty" mapstructure:"name" yaml:"name"`
	Provider *IdentityProvider `json:"provider,omitempty" mapstructure:"provider" yaml:"provider"`
}

// +k8s:openapi-gen=true
type UserDiscoveryAppConfig struct {
	Providers          []UserIdentityProviderItem `json:"-" mapstructure:"providers" yaml:"providers"`
	RequestBufferSize  *uint64                    `json:"request_buffer_size,omitempty" mapstructure:"request_buffer_size" yaml:"requestBufferSize"`
	ResponseBufferSize *uint64                    `json:"response_buffer_size,omitempty" mapstructure:"response_buffer_size" yaml:"responseBufferSize"`
}

// +k8s:openapi-gen=true
type UserDiscoveryConfig struct {
	Selectors   GnsServiceSelector                 `json:"selectors,omitempty" mapstructure:"selectors" yaml:"selectors"`
	Application UserDiscoveryApplicationConfigList `json:"application,omitempty" mapstructure:"application" yaml:"application"`
}

// +k8s:openapi-gen=true
type HealthCheckConfig struct {
	Name            string                    `json:"name" mapstructure:"name" yaml:"name"`
	Protocol        HealthCheckConfigProtocol `json:"protocol" mapstructure:"protocol" yaml:"protocol"`
	Domain          string                    `json:"domain" mapstructure:"domain" yaml:"domain"`
	Port            int                       `json:"port" mapstructure:"port" yaml:"port"`
	Path            string                    `json:"path" mapstructure:"path" yaml:"path"`
	HealthThreshold int                       `json:"healthThreshold" mapstructure:"healthThreshold" yaml:"healthThreshold"`
	Interval        int                       `json:"interval" mapstructure:"interval" yaml:"interval"`
}

// +k8s:openapi-gen=true
type HealthCheckStatus struct {
	Healthy        bool   `json:"healthy" mapstructure:"healthy" yaml:"healthy"`
	Message        string `json:"message" mapstructure:"message" yaml:"message"`
	LastCheckTime  int64  `json:"last_check_time" mapstructure:"last_check_time" yaml:"lastCheckTime"`
	LastChangeTime int64  `json:"last_change_time" mapstructure:"last_change_time" yaml:"lastChangeTime"`
}

// +k8s:openapi-gen=true
type PeerAuthenticationPolicy struct {
	Mtls *PeerAuthentication_MutualTLS `json:"mtls" mapstructure:"mtls" yaml:"mtls"`
}

// +k8s:openapi-gen=true
type PeerAuthentication_MutualTLS struct {
	Mode PeerAuthentication_MutualTLS_Mode `json:"mode" mapstructure:"mode" yaml:"mode"`
}

// +k8s:openapi-gen=true
type JobID struct {
	Id string `json:"id" mapstructure:"id" yaml:"id"`
}

// +k8s:openapi-gen=true
type JobIDs struct {
	Ids []string `json:"ids" mapstructure:"ids" yaml:"ids"`
}

// +k8s:openapi-gen=true
type JobInfo struct {
	Uri             string  `json:"uri" mapstructure:"uri" yaml:"uri"`
	Type            JobType `json:"type" mapstructure:"type" yaml:"type"`
	Payload         string  `json:"payload" mapstructure:"payload" yaml:"payload"`
	CreateTimestamp string  `json:"createTimestamp" mapstructure:"createTimestamp" yaml:"createTimestamp"`
}

// +k8s:openapi-gen=true
type JobStatusInfo struct {
	Uri             string   `json:"uri" mapstructure:"uri" yaml:"uri"`
	Type            JobType  `json:"type" mapstructure:"type" yaml:"type"`
	Payload         string   `json:"payload" mapstructure:"payload" yaml:"payload"`
	CreateTimestamp string   `json:"createTimestamp" mapstructure:"createTimestamp" yaml:"createTimestamp"`
	Id              string   `json:"id" mapstructure:"id" yaml:"id"`
	State           JobState `json:"state" mapstructure:"state" yaml:"state"`
	Progress        int32    `json:"progress" mapstructure:"progress" yaml:"progress"`
	UpdateTimestamp string   `json:"updateTimestamp" mapstructure:"updateTimestamp" yaml:"updateTimestamp"`
	Code            int32    `json:"code" mapstructure:"code" yaml:"code"`
	Message         string   `json:"message" mapstructure:"message" yaml:"message"`
	OutputPath      string   `json:"outputPath" mapstructure:"outputPath" yaml:"outputPath"`
}

// +k8s:openapi-gen=true
type PolicyCfgAction struct {
	Action PolicyActionType `json:"action" mapstructure:"action" yaml:"action"`
}

// +k8s:openapi-gen=true
type ResourceGroupID struct {
	Name string `json:"name" mapstruction:"name" yaml:"name"`
	Type string `json:"type" mapstruction:"type" yaml:"type"`
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeStep struct {
	Current       int32 `json:"current" mapstructure:"current" yaml:"current"`
	TotalSteps    int32 `json:"totalSteps" mapstructure:"totalSteps" yaml:"totalSteps"`
	LastStepRunAt int32 `json:"lastStepRunAt" mapstructure:"lastStepRunAt" yaml:"lastStepRunAt"`
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeStatus struct {
	RunningState     ProgressiveUpgradeState    `json:"runningState" mapstructure:"runningState" yaml:"runningState"`
	SubState         ProgressiveUpgradeSubstate `json:"subState" mapstructure:"subState" yaml:"subState"`
	StateDescription string                     `json:"stateDescription" mapstructure:"stateDescription" yaml:"stateDescription"`
}

// +k8s:openapi-gen=true
type ProgressiveUpgradeStrategy struct {
	StepCount int32 `json:"stepCount" mapstructure:"stepCount" yaml:"stepCount"`
	StepDelay int32 `json:"stepDelay" mapstructure:"stepDelay" yaml:"stepDelay"`
}

// +k8s:openapi-gen=true
type TargetVersion struct {
	ExistingVersionName string `json:"existingVersionName" mapstructure:"existingVersionName" yaml:"existingVersionName"`
}

// +k8s:openapi-gen=true
type CurrentVersion struct {
	Name                  string `json:"name" mapstructure:"name" yaml:"name"`
	OriginalTrafficWeight int32  `json:"originalTrafficWeight" mapstructure:"originalTrafficWeight" yaml:"originalTrafficWeight"`
}

// +k8s:openapi-gen=true
type UpgradeTargetVersion struct {
	Version               TargetVersion `json:"version" mapstructure:"version" yaml:"version"`
	OriginalTrafficWeight int32         `json:"originalTrafficWeight" mapstructure:"originalTrafficWeight" yaml:"originalTrafficWeight"`
}

// +k8s:openapi-gen=true
type UpgradeService struct {
	Name           string               `json:"name" mapstructure:"name" yaml:"name"`
	Cluster        string               `json:"cluster" mapstructure:"cluster" yaml:"cluster"`
	Domain         string               `json:"domain" mapstructure:"domain" yaml:"domain"`
	Namespace      string               `json:"namespace" mapstructure:"namespace" yaml:"namespace"`
	CurrentVersion CurrentVersion       `json:"currentVersion" mapstructure:"currentVersion" yaml:"currentVersion"`
	TargetVersion  UpgradeTargetVersion `json:"targetVersion" mapstructure:"targetVersion" yaml:"targetVersion"`
}

// +k8s:openapi-gen=true
type ServicePort struct {
	Name        string             `json:"name" mapstructure:"name" yaml:"name"`
	Port        int32              `json:"port" mapstructure:"port" yaml:"port"`
	TargetPort  intstr.IntOrString `json:"targetPort" mapstructure:"targetPort" yaml:"targetPort"`
	NodePort    int32              `json:"nodePort" mapstructure:"nodePort" yaml:"nodePort"`
	Proto       string             `json:"proto" mapstructure:"proto" yaml:"proto"`
	Protocol    string             `json:"protocol" mapstructure:"protocol" yaml:"protocol"`
	AppProtocol string             `json:"appProtocol" mapstructure:"port" yaml:"appProtocol"`
}

// +k8s:openapi-gen=true
type ServiceEndpoint struct {
	Address string           `json:"address" mapstructure:"address" yaml:"address"`
	Ports   map[string]int32 `json:"ports" mapstructure:"ports" yaml:"ports"`
}

// +k8s:openapi-gen=true
type ServiceEndpointList struct {
	List []ServiceEndpoint `json:"list" mapstructure:"list" yaml:"list"`
}

// +k8s:openapi-gen=true
type ServiceVersionList struct {
	List []SvcVersion `json:"list" mapstructure:"list" yaml:"list"`
}

// +k8s:openapi-gen=true
type SvcVersion struct {
	Version         string            `json:"version" mapstructure:"version" yaml:"version"`
	IsLocalPresent  bool              `json:"isLocalPresent" mapstructure:"isLocalPresent" yaml:"isLocalPresent"`
	RemoteEndpoints []ServiceEndpoint `json:"remoteEndpoints" mapstructure:"remoteEndpoints" yaml:"remoteEndpoints"`
}

// +k8s:openapi-gen=true
type PortLevelAuthenticationMap struct {
	Ports map[string]int32 `json:"ports" mapstructure:"ports" yaml:"ports"`
}

// +k8s:openapi-gen=true
type SloService struct {
	Cluster string `json:"cluster" mapstructure:"cluster" yaml:"cluster"`
	Domain  string `json:"domain" mapstructure:"domain" yaml:"domain"`
	Name    string `json:"name" mapstructure:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type SloServices struct {
	Services      []SloService `json:"services" yaml:"services"`
	ServiceGroups []string     `json:"serviceGroups" yaml:"serviceGroups"`
}

// +k8s:openapi-gen=true
type SloTargetValue struct {
	Value float64 `json:"value" mapstructure:"value" yaml:"value"`
}

// +k8s:openapi-gen=true
type ServiceLevelIndication struct {
	MetricName ServiceLevelIndicationMetricName `json:"metricName" mapstructure:"metricName" yaml:"metricName"`
	Value      float64                          `json:"value" mapstructure:"value" yaml:"value"`
}

type State string
type StatusConditions []StatusCondition
type ClusterSyncState string
type CaSyncState string
type ClusterState string
type ClusterStatusHistory []ClusterStatus
type CaState string
type ComponentState string
type ComponentStatusesHistory []ComponentStatuses
type CaStatusHistory []CaStatus
type ApplicationState string
type Versions []Version
type LogType string
type ProxyProtocol string
type ProxyType string
type Labels map[string]string
type CaLabels map[string]string
type ASLabels []map[string]string
type Selector []map[string]string
type DMSet map[string]bool
type MtlsExceptions []MtlsException
type StringList []string
type MatchFunction string
type Conditions []Condition
type StringMatchType string
type HTTPRoutingRules []HTTPRoutingRule
type RoutingProtocolType string
type LabelsList []Label

// Defines platform type for a service.
// KUBERNETES : The service is a Kuberbetes Service
type ServiceType string
type EnvoyFilterSpec v1alpha3.EnvoyFilter
type GatewaySpec istio.Gateway
type GatewayConfigListeners []GatewayConfigListener
type GatewayRoutingRule GatewayRoutingRuleSNI
type MatchConditions []MatchCondition
type GnsACPMatchMethod string
type ApiDiscoveryApplicationConfigList []APIDiscoveryAppConfig
type ApiDiscoveryClusterResourceSelectorRT ClusterResourceSelectorRT
type AttackDiscoveryApplicationConfigList []AttackDiscoveryAppConfig
type AttackDiscoveryClusterResourceSelectorRT ClusterResourceSelectorRT
type GeoDiscoveryGeoFencesConfigList []GeoMeta
type GeoDiscoveryClusterResourceSelectorRT ClusterResourceSelectorRT
type PiiDiscoveryApplicationConfigList []PiiDiscoveryAppConfig
type PiiDiscoveryClusterResourceSelectorRT ClusterResourceSelectorRT
type Mode string
type GnsSchemaViolationDiscoveryClusterResourceSelectorRT ServiceSelector
type UserDiscoveryApplicationConfigList []UserDiscoveryAppConfig
type UserDiscoveryClusterResourceSelectorRT ClusterResourceSelectorRT
type HealthCheckConfigProtocol string
type PeerAuthenticationSpec PeerAuthenticationPolicy
type PeerAuthentication_MutualTLS_Mode int32
type PolicySpec istioauth.Policy
type JobType string
type JobState string
type DeploymentSpec k8sappsv1.DeploymentSpec
type DeploymentStatus k8sappsv1.DeploymentStatus
type ReplicaSetSpec k8sappsv1.ReplicaSetSpec
type ReplicaSetStatus k8sappsv1.ReplicaSetStatus
type StatefulSetSpec k8sappsv1.StatefulSetSpec
type StatefulSetStatus k8sappsv1.StatefulSetStatus
type DaemonSetSpec k8sappsv1.DaemonSetSpec
type DaemonSetStatus k8sappsv1.DaemonSetStatus
type CronJobSpec k8sbatchv1beta1.CronJobSpec
type CronJobStatus k8sbatchv1beta1.CronJobStatus
type JobSpec k8sbatchv1.JobSpec
type JobStatus k8sbatchv1.JobStatus
type ServiceInstanceSpec k8scorev1.PodSpec
type ServiceInstanceStatus k8scorev1.PodStatus
type ServiceSpec k8scorev1.ServiceSpec
type ServiceStatus k8scorev1.ServiceStatus
type Metadata k8sapimachineryv1.ObjectMeta
type NodeSpec k8scorev1.NodeSpec
type KNodeStatus k8scorev1.NodeStatus
type EndpointSubsets []k8scorev1.EndpointSubset
type IntOrString intstr.IntOrString
type PolicyActionType string
type PolicyCfgActions []PolicyCfgAction
type ResourceGroupIDs []ResourceGroupID

// ProgressiveUpgradeState represents runnig status of the upgrade
type ProgressiveUpgradeState int

// ProgressiveUpgradeSubstate represents error/ok status of the upgrade
type ProgressiveUpgradeSubstate int
type UpgradeServices []UpgradeService
type ServicePortList []ServicePort

// It defines the mTLS mode used for peer authentication which is
// used to configure what type of mTLS traffic the sidecar will Accept.
// INHERIT : Inherit mTLS mode from namespace (or mesh) settings
//
//	This mode is used in conjunction with the port level mtls settings.
//	This is useful when user wants to override namespace level mtls settings for specific port(s).
//
// DISABLE	: Connection is not tunneled.
// PERMISSIVE : Connection can be either plaintext or mTLS tunnel.
// STRICT : Connection is an mTLS tunnel (TLS with client cert must be presented).
type InboundMode string

// It is used to configure what type of TLS traffic the downstream endpoint will send.
// DISABLE: Do not setup a TLS connection to the upstream endpoint.
// SIMPLE: Originate a TLS connection to the upstream endpoint.
// MUTUAL_WITH_USER_PROVIDED_CERTS: Secure connections to the upstream using mutual TLS by presenting client certificates for authentication.
//
//	In this mode, user will provide client certificates that will be used to program the downstream endpoint.
//
// MUTUAL_WITH_INTERNAL_CERTS: Compared to Mutual mode, this mode uses certificates generated automatically by Internal CA for mTLS authentication.
//
//	In this mode, downstream endpoints are pre-programmed with certificates provided by the Internal CA (TSM CA), so user does not need to provide any certificates.
type OutboundMode string
type HAType string
type DNSList []string
type ServiceLevelIndicationMetricName string
type ServiceLevelIndicationGroup []ServiceLevelIndication

const (
	ActiveState                            State               = "Active"
	ExpiredState                           State               = "Expired"
	InvalidState                           State               = "Invalid"
	UnknownState                           State               = "Unknown"
	ApprovedState                          State               = "Approved"
	DeniedState                            State               = "Denied"
	ReadyState                             State               = "Ready"
	ClusterSyncState_Syncing               ClusterSyncState    = "Syncing"
	ClusterSyncState_Synced                ClusterSyncState    = "Synced"
	ClusterSyncState_Error                 ClusterSyncState    = "Error"
	CaSyncState_Applied                    CaSyncState         = "Applied"
	CaSyncState_InSync                     CaSyncState         = "InSync"
	CaSyncState_Error                      CaSyncState         = "Error"
	ClusterState_Connecting                ClusterState        = "Connecting"
	ClusterState_ConnectFailed             ClusterState        = "ConnectFailed"
	ClusterState_Connected                 ClusterState        = "Connected"
	ClusterState_Disconnected              ClusterState        = "Disconnected"
	ClusterState_Validating                ClusterState        = "Validating"
	ClusterState_ValidateFailed            ClusterState        = "ValidateFailed"
	ClusterState_Validated                 ClusterState        = "Validated"
	ClusterState_Installing                ClusterState        = "Installing"
	ClusterState_InstallFailed             ClusterState        = "InstallFailed"
	ClusterState_Ready                     ClusterState        = "Ready"
	ClusterState_Upgrading                 ClusterState        = "Upgrading"
	ClusterState_UpgradeFailed             ClusterState        = "UpgradeFailed"
	ClusterState_Uninstalling              ClusterState        = "Uninstalling"
	ClusterState_UninstallFailed           ClusterState        = "UninstallFailed"
	ClusterState_Deleting                  ClusterState        = "Deleting"
	ClusterState_DeleteFailed              ClusterState        = "DeleteFailed"
	ClusterState_Deleted                   ClusterState        = "Deleted"
	ClusterState_PermanentError            ClusterState        = "PermanentError"
	CaState_Connected                      CaState             = "Connected"
	CaState_Connecting                     CaState             = "Connecting"
	CaState_Error                          CaState             = "Error"
	CaState_Unknown                        CaState             = "Unknown"
	ComponentState_Unknown                 ComponentState      = "Unknown"
	ComponentState_Healthy                 ComponentState      = "Healthy"
	ComponentState_Unhealthy               ComponentState      = "Unhealthy"
	ApplicationState_NotInstalled          ApplicationState    = "NotInstalled"
	ApplicationState_Installing            ApplicationState    = "Installing"
	ApplicationState_InstallFailed         ApplicationState    = "InstallFailed"
	ApplicationState_InstallComplete       ApplicationState    = "InstallComplete"
	ApplicationState_Uninstalling          ApplicationState    = "Uninstalling"
	ApplicationState_UninstallFailed       ApplicationState    = "UninstallFailed"
	ApplicationState_Healthy               ApplicationState    = "Healthy"
	ApplicationState_Unhealthy             ApplicationState    = "Unhealthy"
	ApplicationState_Upgrading             ApplicationState    = "Upgrading"
	ApplicationState_UpgradeFailed         ApplicationState    = "UpgradeFailed"
	ApplicationState_UpgradeAvailable      ApplicationState    = "UpgradeAvailable"
	ApplicationState_UpgradeComplete       ApplicationState    = "UpgradeComplete"
	ApplicationState_RollbackAvailable     ApplicationState    = "RollbackAvailable"
	ApplicationState_RollbackComplete      ApplicationState    = "RollbackComplete"
	ApplicationState_RollbackFailed        ApplicationState    = "RollbackFailed"
	ApplicationState_RollingBack           ApplicationState    = "RollingBack"
	LogTypeAgent                           LogType             = "Agent"
	LogTypeServiceMesh                     LogType             = "ServiceMesh"
	LogTypeSidecar                         LogType             = "Sidecar"
	LogTypeDNS                             LogType             = "DNS"
	LogTypePlatform                        LogType             = "Platform"
	ProxyProtocol_HTTPS                    ProxyProtocol       = "HTTPS"
	ProxyProtocol_HTTP                     ProxyProtocol       = "HTTP"
	ProxyType_Explicit                     ProxyType           = "Explicit"
	ProxyType_Transparent                  ProxyType           = "Transparent"
	MatchFunction_EXACT                    MatchFunction       = "EXACT"
	MatchFunction_START_WITH               MatchFunction       = "START_WITH"
	StringMatchType_Exact                  StringMatchType     = "Exact"
	StringMatchType_Prefix                 StringMatchType     = "Prefix"
	StringMatchType_RegularExpression      StringMatchType     = "RegularExpression"
	StringMatchType_ImplementationSpecific StringMatchType     = "ImplementationSpecific"
	RoutingProtocolType_HTTP               RoutingProtocolType = "HTTP"
	RoutingProtocolType_HTTPS              RoutingProtocolType = "HTTPS"
	RoutingProtocolType_TLS                RoutingProtocolType = "TLS"
	RoutingProtocolType_TCP                RoutingProtocolType = "TCP"
	GnsACPMatchMethod_GET                  GnsACPMatchMethod   = "GET"
	GnsACPMatchMethod_HEAD                 GnsACPMatchMethod   = "HEAD"
	GnsACPMatchMethod_POST                 GnsACPMatchMethod   = "POST"
	GnsACPMatchMethod_PUT                  GnsACPMatchMethod   = "PUT"
	GnsACPMatchMethod_DELETE               GnsACPMatchMethod   = "DELETE"
	GnsACPMatchMethod_CONNECT              GnsACPMatchMethod   = "CONNECT"
	GnsACPMatchMethod_OPTIONS              GnsACPMatchMethod   = "OPTIONS"
	GnsACPMatchMethod_TRACE                GnsACPMatchMethod   = "TRACE"
	GnsACPMatchMethod_PATCH                GnsACPMatchMethod   = "PATCH"
	// Check is enabled
	Enabled Mode = "ENABLED"
	// Check is disabled
	Disabled                                                                  = "DISABLED"
	HealthCheckConfigProtocol_HTTP          HealthCheckConfigProtocol         = "HTTP"
	HealthCheckConfigProtocol_HTTPS         HealthCheckConfigProtocol         = "HTTPS"
	HealthCheckConfigProtocol_TCP           HealthCheckConfigProtocol         = "TCP"
	HealthCheckConfigProtocol_UNKNOWN       HealthCheckConfigProtocol         = "UNKNOWN"
	PeerAuthentication_MutualTLS_UNSET      PeerAuthentication_MutualTLS_Mode = 0
	PeerAuthentication_MutualTLS_DISABLE    PeerAuthentication_MutualTLS_Mode = 1
	PeerAuthentication_MutualTLS_PERMISSIVE PeerAuthentication_MutualTLS_Mode = 2
	PeerAuthentication_MutualTLS_STRICT     PeerAuthentication_MutualTLS_Mode = 3
	JobType_Create                          JobType                           = "Create"
	JobType_Update                          JobType                           = "Update"
	JobType_Delete                          JobType                           = "Delete"
	NotStarted                              JobState                          = "NotStarted"
	Deleted                                 JobState                          = "Deleted"
	Started                                 JobState                          = "Started"
	Restarted                               JobState                          = "Restarted"
	Failed                                  JobState                          = "Failed"
	Aborted                                 JobState                          = "Aborted"
	Completed                               JobState                          = "Completed"
	PolicyActionType_Allow                  PolicyActionType                  = "ALLOW"
	PolicyActionType_Deny                   PolicyActionType                  = "DENY"
	PolicyActionType_Log                    PolicyActionType                  = "LOG"
	PolicyActionType_Mirror                 PolicyActionType                  = "MIRROR"
	NOT_STARTED                             ProgressiveUpgradeState           = iota
	IN_PROGRESS
	PAUSED
	COMPLETED
	OK ProgressiveUpgradeSubstate = iota
	ERROR
	InboundMode_Inherit                           InboundMode                      = "INHERIT"
	InboundMode_Disable                           InboundMode                      = "DISABLE"
	InboundMode_Permissive                        InboundMode                      = "PERMISSIVE"
	InboundMode_Strict                            InboundMode                      = "STRICT"
	OutboundMode_Mutual_Using_User_Provided_Certs OutboundMode                     = "MUTUAL_USING_USER_PROVIDED_CERTS"
	OutboundMode_Simple                           OutboundMode                     = "SIMPLE"
	OutboundMode_Disable                          OutboundMode                     = "DISABLE"
	OutboundMode_Mutual_Using_Internal_Certs      OutboundMode                     = "MUTUAL_USING_INTERNAL_CERTS"
	HAType_BASIC                                  HAType                           = "BASIC"
	ServiceLevelIndicationMetricName_UNKNOWN      ServiceLevelIndicationMetricName = "UNKNOWN"
	ServiceLevelIndicationMetricName_P50LATENCY   ServiceLevelIndicationMetricName = "p50LATENCY"
	ServiceLevelIndicationMetricName_P90LATENCY   ServiceLevelIndicationMetricName = "p90LATENCY"
	ServiceLevelIndicationMetricName_P99LATENCY   ServiceLevelIndicationMetricName = "p99LATENCY"
	ServiceLevelIndicationMetricName_ERRORRATE    ServiceLevelIndicationMetricName = "ERRORRATE"
)

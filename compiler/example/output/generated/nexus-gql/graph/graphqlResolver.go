package graph

import (
	"context"
	"encoding/json"
	"fmt"

	log "github.com/sirupsen/logrus"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/rest"

	qm "github.com/vmware-tanzu/graph-framework-for-microservices/nexus/generated/query-manager"
	nexus_client "nexustempmodule/nexus-client"
	"nexustempmodule/nexus-gql/graph/model"
)

var c = GrpcClients{
		mtx: sync.Mutex{},
		Clients: map[string]GrpcClient{},
}
var nc *nexus_client.Clientset

func getParentName(parentLabels map[string]interface{}, key string) string {
    if v, ok := parentLabels[key]; ok && v != nil {
	    return v.(string)
	}
	return ""
}

type NodeMetricTypeEnum string
type ServiceMetricTypeEnum string
type ServiceGroupByEnum string
type HTTPMethodEnum string
type EventSeverityEnum string
type AnalyticsMetricEnum string
type AnalyticsSubMetricEnum string
type TrafficDirectionEnum string
type SloDetailsEnum string

//////////////////////////////////////
// Nexus K8sAPIEndpointConfig
//////////////////////////////////////
func getK8sAPIEndpointConfig() *rest.Config {
    var (
		config *rest.Config
		err    error
	)
	filePath := os.Getenv("KUBECONFIG")
	if filePath != "" {
		config, err = clientcmd.BuildConfigFromFlags("", filePath)
		if err != nil {
			return nil
		}
	} else {
	    config, err = rest.InClusterConfig()
	    if err != nil {
		    return nil
	    }
	}
	config.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(200, 300)
	return config
}
// Custom query
func getGlobalClusterqueryNodeTSResolver(obj *model.GlobalCluster,  nodeMetric *model.NodeMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryNodeTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"nodeMetric": pointerToString(nodeMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryServiceTSResolver(obj *model.GlobalCluster,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryServiceTableResolver(obj *model.GlobalCluster,  startTime *string, endTime *string, SystemServices *bool, ShowGateways *bool, Groupby *model.ServiceGroupByEnum, noMetrics *bool, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ShowGateways": pointerToString(ShowGateways),
			"Groupby": pointerToString(Groupby),
			"noMetrics": pointerToString(noMetrics),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryServiceVersionTableResolver(obj *model.GlobalCluster,  startTime *string, endTime *string, SystemServices *bool, ShowGateways *bool, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceVersionTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ShowGateways": pointerToString(ShowGateways),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryServiceInstanceTableResolver(obj *model.GlobalCluster,  startTime *string, endTime *string, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceInstanceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryServiceTopologyResolver(obj *model.GlobalCluster,  metricStringArray *string, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTopology",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryClusterTableResolver(obj *model.GlobalCluster,  startTime *string, endTime *string, timeInterval *string, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryClusterTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryNodeTableResolver(obj *model.GlobalCluster,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryNodeTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryServiceNodeMapGroupedByNodeResolver(obj *model.GlobalCluster,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByNode",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryServiceNodeMapGroupedByServiceResolver(obj *model.GlobalCluster,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByService",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryServiceNodeMapGroupedByServiceVersionResolver(obj *model.GlobalCluster,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByServiceVersion",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryStatsResolver(obj *model.GlobalCluster,  metricStringArray *string, api *string, method *model.HTTPMethodEnum, sourceWorkloadDN *string, severity *model.EventSeverityEnum, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryStats",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryLogsResolver(obj *model.GlobalCluster,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, from *int, size *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLogs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"from": pointerToString(from),
			"size": pointerToString(size),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryListResolver(obj *model.GlobalCluster,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryList",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryLinechartResolver(obj *model.GlobalCluster,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLinechart",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryTopNResolver(obj *model.GlobalCluster,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryTopN",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalClusterqueryDetailResolver(obj *model.GlobalCluster,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryDetail",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryServiceTSResolver(obj *model.GlobalDomain,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryServiceTableResolver(obj *model.GlobalDomain,  startTime *string, endTime *string, SystemServices *bool, ShowGateways *bool, Groupby *model.ServiceGroupByEnum, noMetrics *bool, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ShowGateways": pointerToString(ShowGateways),
			"Groupby": pointerToString(Groupby),
			"noMetrics": pointerToString(noMetrics),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryServiceVersionTableResolver(obj *model.GlobalDomain,  startTime *string, endTime *string, SystemServices *bool, ShowGateways *bool, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceVersionTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ShowGateways": pointerToString(ShowGateways),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryServiceInstanceTableResolver(obj *model.GlobalDomain,  startTime *string, endTime *string, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceInstanceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryServiceNodeMapGroupedByNodeResolver(obj *model.GlobalDomain,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByNode",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryServiceNodeMapGroupedByServiceResolver(obj *model.GlobalDomain,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByService",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryServiceNodeMapGroupedByServiceVersionResolver(obj *model.GlobalDomain,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByServiceVersion",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryStatsResolver(obj *model.GlobalDomain,  metricStringArray *string, api *string, method *model.HTTPMethodEnum, sourceWorkloadDN *string, severity *model.EventSeverityEnum, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryStats",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryLogsResolver(obj *model.GlobalDomain,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, from *int, size *int, gns *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLogs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"from": pointerToString(from),
			"size": pointerToString(size),
			"gns": pointerToString(gns),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryListResolver(obj *model.GlobalDomain,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryList",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryLinechartResolver(obj *model.GlobalDomain,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLinechart",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryTopNResolver(obj *model.GlobalDomain,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryTopN",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalDomainqueryDetailResolver(obj *model.GlobalDomain,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryDetail",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalExternalServiceConfigqueryServiceTSResolver(obj *model.GlobalExternalServiceConfig,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSSvcGroupqueryServiceTSResolver(obj *model.GlobalGNSSvcGroup,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSSvcGroupqueryServiceInstanceTableResolver(obj *model.GlobalGNSSvcGroup,  startTime *string, endTime *string, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceInstanceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSSvcGroupqueryServiceTableResolver(obj *model.GlobalGNSSvcGroup,  startTime *string, endTime *string, SystemServices *bool, ExternalServices *bool, ShowGateways *bool, Groupby *model.ServiceGroupByEnum, noMetrics *bool, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ExternalServices": pointerToString(ExternalServices),
			"ShowGateways": pointerToString(ShowGateways),
			"Groupby": pointerToString(Groupby),
			"noMetrics": pointerToString(noMetrics),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSSvcGroupqueryServiceVersionTableResolver(obj *model.GlobalGNSSvcGroup,  startTime *string, endTime *string, SystemServices *bool, ExternalServices *bool, ShowGateways *bool, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceVersionTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ExternalServices": pointerToString(ExternalServices),
			"ShowGateways": pointerToString(ShowGateways),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSSvcGroupqueryServiceNodeMapGroupedByNodeResolver(obj *model.GlobalGNSSvcGroup,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByNode",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSSvcGroupqueryServiceNodeMapGroupedByServiceResolver(obj *model.GlobalGNSSvcGroup,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByService",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSSvcGroupqueryClusterTableResolver(obj *model.GlobalGNSSvcGroup,  startTime *string, endTime *string, timeInterval *string, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryClusterTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryServiceTSResolver(obj *model.GlobalGNS,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryServiceInstanceTableResolver(obj *model.GlobalGNS,  startTime *string, endTime *string, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceInstanceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryServiceTableResolver(obj *model.GlobalGNS,  startTime *string, endTime *string, SystemServices *bool, ExternalServices *bool, ShowGateways *bool, Groupby *model.ServiceGroupByEnum, noMetrics *bool, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ExternalServices": pointerToString(ExternalServices),
			"ShowGateways": pointerToString(ShowGateways),
			"Groupby": pointerToString(Groupby),
			"noMetrics": pointerToString(noMetrics),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryServiceVersionTableResolver(obj *model.GlobalGNS,  startTime *string, endTime *string, SystemServices *bool, ExternalServices *bool, ShowGateways *bool, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceVersionTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ExternalServices": pointerToString(ExternalServices),
			"ShowGateways": pointerToString(ShowGateways),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryServiceTopologyResolver(obj *model.GlobalGNS,  metricStringArray *string, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTopology",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryClusterTableResolver(obj *model.GlobalGNS,  startTime *string, endTime *string, timeInterval *string, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryClusterTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryNodeTableResolver(obj *model.GlobalGNS,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryNodeTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryServiceNodeMapGroupedByNodeResolver(obj *model.GlobalGNS,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByNode",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryServiceNodeMapGroupedByServiceResolver(obj *model.GlobalGNS,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByService",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryAccessControlPolicyStatsResolver(obj *model.GlobalGNS,  sourceServiceDN *string, destinationServiceDN *string, policy *string, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryAccessControlPolicyStats",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"sourceServiceDN": pointerToString(sourceServiceDN),
			"destinationServiceDN": pointerToString(destinationServiceDN),
			"policy": pointerToString(policy),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryGNSServiceAPIResolver(obj *model.GlobalGNS,  service *string, version *string, showLabels *bool, openapiFormatting *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryGNSServiceAPI",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"service": pointerToString(service),
			"version": pointerToString(version),
			"showLabels": pointerToString(showLabels),
			"openapiFormatting": pointerToString(openapiFormatting),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryStatsResolver(obj *model.GlobalGNS,  metricStringArray *string, destinationService *string, destinationServiceVersion *string, api *string, method *model.HTTPMethodEnum, sourceWorkloadDN *string, severity *model.EventSeverityEnum, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryStats",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryLogsResolver(obj *model.GlobalGNS,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, destinationService *string, destinationServiceVersion *string, api *string, method *model.HTTPMethodEnum, from *int, size *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLogs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"from": pointerToString(from),
			"size": pointerToString(size),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryListResolver(obj *model.GlobalGNS,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, api *string, method *model.HTTPMethodEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryList",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryLinechartResolver(obj *model.GlobalGNS,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, destinationService *string, destinationServiceVersion *string, api *string, method *model.HTTPMethodEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLinechart",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryTopNResolver(obj *model.GlobalGNS,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryTopN",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryDetailResolver(obj *model.GlobalGNS,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryDetail",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryIncomingAPIsResolver(obj *model.GlobalGNS,  startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryIncomingAPIs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryOutgoingAPIsResolver(obj *model.GlobalGNS,  startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryOutgoingAPIs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryIncomingTCPResolver(obj *model.GlobalGNS,  startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryIncomingTCP",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalGNSqueryOutgoingTCPResolver(obj *model.GlobalGNS,  startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryOutgoingTCP",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"destinationService": pointerToString(destinationService),
			"destinationServiceVersion": pointerToString(destinationServiceVersion),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryClusterTableResolver(obj *model.GlobalInventory,  startTime *string, endTime *string, timeInterval *string, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryClusterTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryNodeTSResolver(obj *model.GlobalInventory,  nodeMetric *model.NodeMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryNodeTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"nodeMetric": pointerToString(nodeMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryNodeTableResolver(obj *model.GlobalInventory,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryNodeTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryServiceTSResolver(obj *model.GlobalInventory,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryquerySloCountsResolver(obj *model.GlobalInventory,  svcMetric *model.SloDetailsEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/querySloCounts",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryquerySloTableResolver(obj *model.GlobalInventory,  svcMetric *model.SloDetailsEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/querySloTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryClusterInventoryCountResolver(obj *model.GlobalInventory,  startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryClusterInventoryCount",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryServiceInstanceTableResolver(obj *model.GlobalInventory,  startTime *string, endTime *string, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceInstanceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryServiceTableResolver(obj *model.GlobalInventory,  startTime *string, endTime *string, SystemServices *bool, ShowGateways *bool, Groupby *model.ServiceGroupByEnum, noMetrics *bool, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ShowGateways": pointerToString(ShowGateways),
			"Groupby": pointerToString(Groupby),
			"noMetrics": pointerToString(noMetrics),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryServiceVersionTableResolver(obj *model.GlobalInventory,  startTime *string, endTime *string, SystemServices *bool, ShowGateways *bool, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceVersionTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ShowGateways": pointerToString(ShowGateways),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryServiceAPIsResolver(obj *model.GlobalInventory,  startTime *string, endTime *string, Continue *string, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceAPIs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"Continue": pointerToString(Continue),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryStatsResolver(obj *model.GlobalInventory,  metricStringArray *string, api *string, method *model.HTTPMethodEnum, sourceWorkloadDN *string, severity *model.EventSeverityEnum, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryStats",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryLogsResolver(obj *model.GlobalInventory,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, from *int, size *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLogs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"from": pointerToString(from),
			"size": pointerToString(size),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryListResolver(obj *model.GlobalInventory,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryList",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryLinechartResolver(obj *model.GlobalInventory,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLinechart",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryTopNResolver(obj *model.GlobalInventory,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryTopN",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryDetailResolver(obj *model.GlobalInventory,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryDetail",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryRiskTrackerResolver(obj *model.GlobalInventory,  startTime *string, endTime *string, metric *model.AnalyticsMetricEnum, direction *model.TrafficDirectionEnum,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryRiskTracker",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"metric": pointerToString(metric),
			"direction": pointerToString(direction),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalInventoryqueryRiskTrackerDetailResolver(obj *model.GlobalInventory,  startTime *string, endTime *string, metric *model.AnalyticsMetricEnum, subCategory *string, direction *model.TrafficDirectionEnum, from *int, size *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryRiskTrackerDetail",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"metric": pointerToString(metric),
			"subCategory": pointerToString(subCategory),
			"direction": pointerToString(direction),
			"from": pointerToString(from),
			"size": pointerToString(size),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalNodequeryNodeTSResolver(obj *model.GlobalNode,  nodeMetric *model.NodeMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryNodeTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"nodeMetric": pointerToString(nodeMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:15002", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalNodequeryNodeTableResolver(obj *model.GlobalNode,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryNodeTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:15002", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryClusterTableResolver(obj *model.GlobalProjectQuery,  startTime *string, endTime *string, timeInterval *string, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryClusterTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryNodeTSResolver(obj *model.GlobalProjectQuery,  nodeMetric *model.NodeMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryNodeTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"nodeMetric": pointerToString(nodeMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryNodeTableResolver(obj *model.GlobalProjectQuery,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryNodeTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryServiceTSResolver(obj *model.GlobalProjectQuery,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryClusterInventoryCountResolver(obj *model.GlobalProjectQuery,  startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryClusterInventoryCount",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryServiceTableResolver(obj *model.GlobalProjectQuery,  startTime *string, endTime *string, SystemServices *bool, ShowGateways *bool, Groupby *model.ServiceGroupByEnum, noMetrics *bool, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ShowGateways": pointerToString(ShowGateways),
			"Groupby": pointerToString(Groupby),
			"noMetrics": pointerToString(noMetrics),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryServiceVersionTableResolver(obj *model.GlobalProjectQuery,  startTime *string, endTime *string, SystemServices *bool, ShowGateways *bool, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceVersionTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ShowGateways": pointerToString(ShowGateways),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryStatsResolver(obj *model.GlobalProjectQuery,  metricStringArray *string, api *string, method *model.HTTPMethodEnum, sourceWorkloadDN *string, severity *model.EventSeverityEnum, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryStats",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryLogsResolver(obj *model.GlobalProjectQuery,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, from *int, size *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLogs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"from": pointerToString(from),
			"size": pointerToString(size),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryListResolver(obj *model.GlobalProjectQuery,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryList",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryLinechartResolver(obj *model.GlobalProjectQuery,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLinechart",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryTopNResolver(obj *model.GlobalProjectQuery,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryTopN",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryDetailResolver(obj *model.GlobalProjectQuery,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, direction *model.TrafficDirectionEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryDetail",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"direction": pointerToString(direction),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryRiskTrackerResolver(obj *model.GlobalProjectQuery,  startTime *string, endTime *string, metric *model.AnalyticsMetricEnum, direction *model.TrafficDirectionEnum,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryRiskTracker",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"metric": pointerToString(metric),
			"direction": pointerToString(direction),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalProjectQueryqueryRiskTrackerDetailResolver(obj *model.GlobalProjectQuery,  startTime *string, endTime *string, metric *model.AnalyticsMetricEnum, subCategory *string, direction *model.TrafficDirectionEnum, from *int, size *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryRiskTrackerDetail",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"metric": pointerToString(metric),
			"subCategory": pointerToString(subCategory),
			"direction": pointerToString(direction),
			"from": pointerToString(from),
			"size": pointerToString(size),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
//////////////////////////////////////
// Singleton Resolver for Parent Node
// PKG: Global, NODE: Global
//////////////////////////////////////
func getRootResolver() (*model.GlobalRoot, error) {
	if nc == nil {
		k8sApiConfig := getK8sAPIEndpointConfig()
		nexusClient, err := nexus_client.NewForConfig(k8sApiConfig)
		if err != nil {
			return nil, fmt.Errorf("failed to get k8s client config: %s", err)
		}
		nc = nexusClient
		nc.SubscribeAll()
		log.Debugf("Subscribed to all nodes in datamodel")
	}

	vRoot, err := nc.GetGlobalRoot(context.TODO())
	if err != nil {
		log.Errorf("[getRootResolver]Error getting Root node %s", err)
		return nil, nil
	}
	dn := vRoot.DisplayName()
parentLabels := map[string]interface{}{"roots.global.tsm.tanzu.vmware.com":dn}
vName := string(vRoot.Spec.Name)

	ret := &model.GlobalRoot {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
	log.Debugf("[getRootResolver]Output Root object %+v", ret)
	return ret, nil
}
// Custom query
func getGlobalServiceDaemonSetqueryWorkloadVersionAPIResolver(obj *model.GlobalServiceDaemonSet,  version *string, showLabels *bool, openapiFormatting *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryWorkloadVersionAPI",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"version": pointerToString(version),
			"showLabels": pointerToString(showLabels),
			"openapiFormatting": pointerToString(openapiFormatting),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceDeploymentqueryServiceTSResolver(obj *model.GlobalServiceDeployment,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceDeploymentqueryServiceInstanceTableResolver(obj *model.GlobalServiceDeployment,  startTime *string, endTime *string, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceInstanceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceDeploymentqueryWorkloadVersionAPIResolver(obj *model.GlobalServiceDeployment,  version *string, showLabels *bool, openapiFormatting *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryWorkloadVersionAPI",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"version": pointerToString(version),
			"showLabels": pointerToString(showLabels),
			"openapiFormatting": pointerToString(openapiFormatting),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceInstancequeryServiceTSResolver(obj *model.GlobalServiceInstance,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceInstancequeryServiceInstanceTableResolver(obj *model.GlobalServiceInstance,  startTime *string, endTime *string, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceInstanceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceStatefulSetqueryWorkloadVersionAPIResolver(obj *model.GlobalServiceStatefulSet,  version *string, showLabels *bool, openapiFormatting *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryWorkloadVersionAPI",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"version": pointerToString(version),
			"showLabels": pointerToString(showLabels),
			"openapiFormatting": pointerToString(openapiFormatting),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryStatsResolver(obj *model.GlobalServiceVersion,  metricStringArray *string, api *string, method *model.HTTPMethodEnum, sourceWorkloadDN *string, severity *model.EventSeverityEnum, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryStats",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryLogsResolver(obj *model.GlobalServiceVersion,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, from *int, size *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLogs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"from": pointerToString(from),
			"size": pointerToString(size),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryListResolver(obj *model.GlobalServiceVersion,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryList",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryLinechartResolver(obj *model.GlobalServiceVersion,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLinechart",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryTopNResolver(obj *model.GlobalServiceVersion,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryTopN",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryDetailResolver(obj *model.GlobalServiceVersion,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryDetail",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryIncomingAPIsResolver(obj *model.GlobalServiceVersion,  startTime *string, endTime *string, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryIncomingAPIs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryOutgoingAPIsResolver(obj *model.GlobalServiceVersion,  startTime *string, endTime *string, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryOutgoingAPIs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryIncomingTCPResolver(obj *model.GlobalServiceVersion,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryIncomingTCP",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServiceVersionqueryOutgoingTCPResolver(obj *model.GlobalServiceVersion,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryOutgoingTCP",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryServiceAPIsResolver(obj *model.GlobalService,  startTime *string, endTime *string, version *string, showLabels *bool, openapiFormatting *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceAPIs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"version": pointerToString(version),
			"showLabels": pointerToString(showLabels),
			"openapiFormatting": pointerToString(openapiFormatting),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryServiceTSResolver(obj *model.GlobalService,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequerySloDetailsResolver(obj *model.GlobalService,  svcMetric *model.SloDetailsEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/querySloDetails",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequerySloCountsResolver(obj *model.GlobalService,  svcMetric *model.SloDetailsEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/querySloCounts",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequerySloTableResolver(obj *model.GlobalService,  svcMetric *model.SloDetailsEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/querySloTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryServiceInstanceTableResolver(obj *model.GlobalService,  startTime *string, endTime *string, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceInstanceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryServiceTopologyResolver(obj *model.GlobalService,  metricStringArray *string, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTopology",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryServiceNodeMapGroupedByServiceResolver(obj *model.GlobalService,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByService",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryServiceTableResolver(obj *model.GlobalService,  startTime *string, endTime *string, SystemServices *bool, ShowGateways *bool, Groupby *model.ServiceGroupByEnum, noMetrics *bool, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ShowGateways": pointerToString(ShowGateways),
			"Groupby": pointerToString(Groupby),
			"noMetrics": pointerToString(noMetrics),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryServiceVersionTableResolver(obj *model.GlobalService,  startTime *string, endTime *string, ShowGateways *bool, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceVersionTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"ShowGateways": pointerToString(ShowGateways),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryStatsResolver(obj *model.GlobalService,  metricStringArray *string, api *string, method *model.HTTPMethodEnum, sourceWorkloadDN *string, severity *model.EventSeverityEnum, startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryStats",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metricStringArray": pointerToString(metricStringArray),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryLogsResolver(obj *model.GlobalService,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, from *int, size *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLogs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"from": pointerToString(from),
			"size": pointerToString(size),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryListResolver(obj *model.GlobalService,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryList",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryLinechartResolver(obj *model.GlobalService,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, sourceWorkloadDN *string, severity *model.EventSeverityEnum, api *string, method *model.HTTPMethodEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryLinechart",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"sourceWorkloadDN": pointerToString(sourceWorkloadDN),
			"severity": pointerToString(severity),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryTopNResolver(obj *model.GlobalService,  metric *model.AnalyticsMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, limit *int,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryTopN",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"limit": pointerToString(limit),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryDetailResolver(obj *model.GlobalService,  metric *model.AnalyticsMetricEnum, subMetric *model.AnalyticsSubMetricEnum, startTime *string, endTime *string, api *string, method *model.HTTPMethodEnum, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryDetail",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"metric": pointerToString(metric),
			"subMetric": pointerToString(subMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"api": pointerToString(api),
			"method": pointerToString(method),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryIncomingAPIsResolver(obj *model.GlobalService,  startTime *string, endTime *string, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryIncomingAPIs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryOutgoingAPIsResolver(obj *model.GlobalService,  startTime *string, endTime *string, timeInterval *string, timeZone *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryOutgoingAPIs",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"timeZone": pointerToString(timeZone),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryIncomingTCPResolver(obj *model.GlobalService,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryIncomingTCP",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalServicequeryOutgoingTCPResolver(obj *model.GlobalService,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryOutgoingTCP",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalSvcGroupqueryServiceTSResolver(obj *model.GlobalSvcGroup,  svcMetric *model.ServiceMetricTypeEnum, startTime *string, endTime *string, timeInterval *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTS",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"svcMetric": pointerToString(svcMetric),
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalSvcGroupqueryServiceInstanceTableResolver(obj *model.GlobalSvcGroup,  startTime *string, endTime *string, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceInstanceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalSvcGroupqueryServiceTableResolver(obj *model.GlobalSvcGroup,  startTime *string, endTime *string, SystemServices *bool, ExternalServices *bool, ShowGateways *bool, Groupby *model.ServiceGroupByEnum, noMetrics *bool, limit *int, last *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ExternalServices": pointerToString(ExternalServices),
			"ShowGateways": pointerToString(ShowGateways),
			"Groupby": pointerToString(Groupby),
			"noMetrics": pointerToString(noMetrics),
			"limit": pointerToString(limit),
			"last": pointerToString(last),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalSvcGroupqueryServiceVersionTableResolver(obj *model.GlobalSvcGroup,  startTime *string, endTime *string, SystemServices *bool, ExternalServices *bool, ShowGateways *bool, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceVersionTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"SystemServices": pointerToString(SystemServices),
			"ExternalServices": pointerToString(ExternalServices),
			"ShowGateways": pointerToString(ShowGateways),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalSvcGroupqueryServiceNodeMapGroupedByNodeResolver(obj *model.GlobalSvcGroup,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByNode",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalSvcGroupqueryServiceNodeMapGroupedByServiceResolver(obj *model.GlobalSvcGroup,  startTime *string, endTime *string,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryServiceNodeMapGroupedByService",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
// Custom query
func getGlobalSvcGroupqueryClusterTableResolver(obj *model.GlobalSvcGroup,  startTime *string, endTime *string, timeInterval *string, noMetrics *bool,) (*model.TimeSeriesData, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	metricArgs := &qm.MetricArg{
		QueryType: "/queryClusterTable",
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			"startTime": pointerToString(startTime),
			"endTime": pointerToString(endTime),
			"timeInterval": pointerToString(timeInterval),
			"noMetrics": pointerToString(noMetrics),
		},
	}
	resp, err := c.Request("query-manager:45781", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
}
//////////////////////////////////////
// LINKS RESOLVER
// FieldName: DestSvcGroups Node: ACPConfig PKG: Global
//////////////////////////////////////
func getGlobalACPConfigDestSvcGroupsResolver(obj *model.GlobalACPConfig, id *string) ([]*model.GlobalSvcGroup, error) {
	log.Debugf("[getGlobalACPConfigDestSvcGroupsResolver]Parent Object %+v", obj)
	var vGlobalSvcGroupList []*model.GlobalSvcGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalACPConfigDestSvcGroupsResolver]Id %q", *id)
		vSvcGroupParent, err := nc.GlobalRoot().Config().Policy(getParentName(obj.ParentLabels, "accesscontrolpolicies.global.tsm.tanzu.vmware.com")).GetPolicyConfigs(context.TODO(), getParentName(obj.ParentLabels, "acpconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalACPConfigDestSvcGroupsResolver]Error getting DestSvcGroups %q : %s", *id, err)
			return vGlobalSvcGroupList, nil
		}
		vSvcGroup, err := vSvcGroupParent.GetDestSvcGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalACPConfigDestSvcGroupsResolver]Error getting DestSvcGroups %q : %s", *id, err)
			return vGlobalSvcGroupList, nil
		}
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)

		log.Debugf("[getGlobalACPConfigDestSvcGroupsResolver]Output DestSvcGroups objects %v", vGlobalSvcGroupList)

		return vGlobalSvcGroupList, nil
	}

	log.Debug("[getGlobalACPConfigDestSvcGroupsResolver]Id is empty, process all DestSvcGroupss")

	vSvcGroupParent, err := nc.GlobalRoot().Config().Policy(getParentName(obj.ParentLabels, "accesscontrolpolicies.global.tsm.tanzu.vmware.com")).GetPolicyConfigs(context.TODO(), getParentName(obj.ParentLabels, "acpconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalACPConfigDestSvcGroupsResolver]Error getting parent node %s", err)
        return vGlobalSvcGroupList, nil
    }
	vSvcGroupAllObj, err := vSvcGroupParent.GetAllDestSvcGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalACPConfigDestSvcGroupsResolver]Error getting DestSvcGroups %s", err)
        return vGlobalSvcGroupList, nil
    }
	for _, i := range vSvcGroupAllObj {
		vSvcGroupParent, err := nc.GlobalRoot().Config().Policy(getParentName(obj.ParentLabels, "accesscontrolpolicies.global.tsm.tanzu.vmware.com")).GetPolicyConfigs(context.TODO(), getParentName(obj.ParentLabels, "acpconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalACPConfigDestSvcGroupsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vSvcGroup, err := vSvcGroupParent.GetDestSvcGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalACPConfigDestSvcGroupsResolver]Error getting DestSvcGroups node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)
	}
	log.Debugf("[getGlobalACPConfigDestSvcGroupsResolver]List of DestSvcGroups object %v", vGlobalSvcGroupList)
	return vGlobalSvcGroupList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: SourceSvcGroups Node: ACPConfig PKG: Global
//////////////////////////////////////
func getGlobalACPConfigSourceSvcGroupsResolver(obj *model.GlobalACPConfig, id *string) ([]*model.GlobalSvcGroup, error) {
	log.Debugf("[getGlobalACPConfigSourceSvcGroupsResolver]Parent Object %+v", obj)
	var vGlobalSvcGroupList []*model.GlobalSvcGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalACPConfigSourceSvcGroupsResolver]Id %q", *id)
		vSvcGroupParent, err := nc.GlobalRoot().Config().Policy(getParentName(obj.ParentLabels, "accesscontrolpolicies.global.tsm.tanzu.vmware.com")).GetPolicyConfigs(context.TODO(), getParentName(obj.ParentLabels, "acpconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalACPConfigSourceSvcGroupsResolver]Error getting SourceSvcGroups %q : %s", *id, err)
			return vGlobalSvcGroupList, nil
		}
		vSvcGroup, err := vSvcGroupParent.GetSourceSvcGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalACPConfigSourceSvcGroupsResolver]Error getting SourceSvcGroups %q : %s", *id, err)
			return vGlobalSvcGroupList, nil
		}
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)

		log.Debugf("[getGlobalACPConfigSourceSvcGroupsResolver]Output SourceSvcGroups objects %v", vGlobalSvcGroupList)

		return vGlobalSvcGroupList, nil
	}

	log.Debug("[getGlobalACPConfigSourceSvcGroupsResolver]Id is empty, process all SourceSvcGroupss")

	vSvcGroupParent, err := nc.GlobalRoot().Config().Policy(getParentName(obj.ParentLabels, "accesscontrolpolicies.global.tsm.tanzu.vmware.com")).GetPolicyConfigs(context.TODO(), getParentName(obj.ParentLabels, "acpconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalACPConfigSourceSvcGroupsResolver]Error getting parent node %s", err)
        return vGlobalSvcGroupList, nil
    }
	vSvcGroupAllObj, err := vSvcGroupParent.GetAllSourceSvcGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalACPConfigSourceSvcGroupsResolver]Error getting SourceSvcGroups %s", err)
        return vGlobalSvcGroupList, nil
    }
	for _, i := range vSvcGroupAllObj {
		vSvcGroupParent, err := nc.GlobalRoot().Config().Policy(getParentName(obj.ParentLabels, "accesscontrolpolicies.global.tsm.tanzu.vmware.com")).GetPolicyConfigs(context.TODO(), getParentName(obj.ParentLabels, "acpconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalACPConfigSourceSvcGroupsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vSvcGroup, err := vSvcGroupParent.GetSourceSvcGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalACPConfigSourceSvcGroupsResolver]Error getting SourceSvcGroups node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)
	}
	log.Debugf("[getGlobalACPConfigSourceSvcGroupsResolver]List of SourceSvcGroups object %v", vGlobalSvcGroupList)
	return vGlobalSvcGroupList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: GlobalRegistrationService Node: AllSparkServices PKG: Global
//////////////////////////////////////
func getGlobalAllSparkServicesGlobalRegistrationServiceResolver(obj *model.GlobalAllSparkServices, id *string) (*model.GlobalGlobalRegistrationService, error) {
	log.Debugf("[getGlobalAllSparkServicesGlobalRegistrationServiceResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalAllSparkServicesGlobalRegistrationServiceResolver]Id %q", *id)
		vGlobalRegistrationService, err := nc.GlobalRoot().Runtime().AllsparkServices().GetGlobalRegistrationService(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalAllSparkServicesGlobalRegistrationServiceResolver]Error getting GlobalRegistrationService node %q : %s", *id, err)
			return &model.GlobalGlobalRegistrationService{}, nil
		}
		dn := vGlobalRegistrationService.DisplayName()
parentLabels := map[string]interface{}{"globalregistrationservices.global.tsm.tanzu.vmware.com":dn}
vBuildID := string(vGlobalRegistrationService.Spec.BuildID)
vVersion := string(vGlobalRegistrationService.Spec.Version)
vErrorCount := int(vGlobalRegistrationService.Spec.ErrorCount)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalGlobalRegistrationService {
	Id: &dn,
	ParentLabels: parentLabels,
	BuildID: &vBuildID,
	Version: &vVersion,
	ErrorCount: &vErrorCount,
	}

		log.Debugf("[getGlobalAllSparkServicesGlobalRegistrationServiceResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalAllSparkServicesGlobalRegistrationServiceResolver]Id is empty, process all GlobalRegistrationServices")
	vGlobalRegistrationServiceParent, err := nc.GlobalRoot().Runtime().GetAllsparkServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAllSparkServicesGlobalRegistrationServiceResolver]Failed to get parent node %s", err)
        return &model.GlobalGlobalRegistrationService{}, nil
    }
	vGlobalRegistrationService, err := vGlobalRegistrationServiceParent.GetGlobalRegistrationService(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAllSparkServicesGlobalRegistrationServiceResolver]Error getting GlobalRegistrationService node %s", err)
        return &model.GlobalGlobalRegistrationService{}, nil
    }
	dn := vGlobalRegistrationService.DisplayName()
parentLabels := map[string]interface{}{"globalregistrationservices.global.tsm.tanzu.vmware.com":dn}
vBuildID := string(vGlobalRegistrationService.Spec.BuildID)
vVersion := string(vGlobalRegistrationService.Spec.Version)
vErrorCount := int(vGlobalRegistrationService.Spec.ErrorCount)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalGlobalRegistrationService {
	Id: &dn,
	ParentLabels: parentLabels,
	BuildID: &vBuildID,
	Version: &vVersion,
	ErrorCount: &vErrorCount,
	}

	log.Debugf("[getGlobalAllSparkServicesGlobalRegistrationServiceResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: LocalRegistrationService Node: AllSparkServices PKG: Global
//////////////////////////////////////
func getGlobalAllSparkServicesLocalRegistrationServiceResolver(obj *model.GlobalAllSparkServices, id *string) (*model.GlobalLocalRegistrationService, error) {
	log.Debugf("[getGlobalAllSparkServicesLocalRegistrationServiceResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalAllSparkServicesLocalRegistrationServiceResolver]Id %q", *id)
		vLocalRegistrationService, err := nc.GlobalRoot().Runtime().AllsparkServices().GetLocalRegistrationService(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalAllSparkServicesLocalRegistrationServiceResolver]Error getting LocalRegistrationService node %q : %s", *id, err)
			return &model.GlobalLocalRegistrationService{}, nil
		}
		dn := vLocalRegistrationService.DisplayName()
parentLabels := map[string]interface{}{"localregistrationservices.global.tsm.tanzu.vmware.com":dn}
vBuildID := string(vLocalRegistrationService.Spec.BuildID)
vVersion := string(vLocalRegistrationService.Spec.Version)
vErrorCount := int(vLocalRegistrationService.Spec.ErrorCount)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalLocalRegistrationService {
	Id: &dn,
	ParentLabels: parentLabels,
	BuildID: &vBuildID,
	Version: &vVersion,
	ErrorCount: &vErrorCount,
	}

		log.Debugf("[getGlobalAllSparkServicesLocalRegistrationServiceResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalAllSparkServicesLocalRegistrationServiceResolver]Id is empty, process all LocalRegistrationServices")
	vLocalRegistrationServiceParent, err := nc.GlobalRoot().Runtime().GetAllsparkServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAllSparkServicesLocalRegistrationServiceResolver]Failed to get parent node %s", err)
        return &model.GlobalLocalRegistrationService{}, nil
    }
	vLocalRegistrationService, err := vLocalRegistrationServiceParent.GetLocalRegistrationService(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAllSparkServicesLocalRegistrationServiceResolver]Error getting LocalRegistrationService node %s", err)
        return &model.GlobalLocalRegistrationService{}, nil
    }
	dn := vLocalRegistrationService.DisplayName()
parentLabels := map[string]interface{}{"localregistrationservices.global.tsm.tanzu.vmware.com":dn}
vBuildID := string(vLocalRegistrationService.Spec.BuildID)
vVersion := string(vLocalRegistrationService.Spec.Version)
vErrorCount := int(vLocalRegistrationService.Spec.ErrorCount)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalLocalRegistrationService {
	Id: &dn,
	ParentLabels: parentLabels,
	BuildID: &vBuildID,
	Version: &vVersion,
	ErrorCount: &vErrorCount,
	}

	log.Debugf("[getGlobalAllSparkServicesLocalRegistrationServiceResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: AwsConnector Node: AllSparkServices PKG: Global
//////////////////////////////////////
func getGlobalAllSparkServicesAwsConnectorResolver(obj *model.GlobalAllSparkServices) (*model.GlobalAwsConnector, error) {
	log.Debugf("[getGlobalAllSparkServicesAwsConnectorResolver]Parent Object %+v", obj)
	vAwsConnector, err := nc.GlobalRoot().Runtime().AllsparkServices().GetAwsConnector(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAllSparkServicesAwsConnectorResolver]Error getting AllSparkServices node %s", err)
        return &model.GlobalAwsConnector{}, nil
    }
	dn := vAwsConnector.DisplayName()
parentLabels := map[string]interface{}{"awsconnectors.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalAwsConnector {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalAllSparkServicesAwsConnectorResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: App Node: AppFolder PKG: Global
//////////////////////////////////////
func getGlobalAppFolderAppResolver(obj *model.GlobalAppFolder, id *string) ([]*model.GlobalApp, error) {
	log.Debugf("[getGlobalAppFolderAppResolver]Parent Object %+v", obj)
	var vGlobalAppList []*model.GlobalApp
	if id != nil && *id != "" {
		log.Debugf("[getGlobalAppFolderAppResolver]Id %q", *id)
		vApp, err := nc.GlobalRoot().Runtime().AppFolder(getParentName(obj.ParentLabels, "appfolders.global.tsm.tanzu.vmware.com")).GetApp(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalAppFolderAppResolver]Error getting App node %q : %s", *id, err)
            return vGlobalAppList, nil
        }
		dn := vApp.DisplayName()
parentLabels := map[string]interface{}{"apps.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalApp {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalAppList = append(vGlobalAppList, ret)

		log.Debugf("[getGlobalAppFolderAppResolver]Output App objects %v", vGlobalAppList)

		return vGlobalAppList, nil
	}

	log.Debug("[getGlobalAppFolderAppResolver]Id is empty, process all Apps")

	vAppParent, err := nc.GlobalRoot().Runtime().GetAppFolder(context.TODO(), getParentName(obj.ParentLabels, "appfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalAppFolderAppResolver]Error getting parent node %s", err)
        return vGlobalAppList, nil
    }
	vAppAllObj, err := vAppParent.GetAllApp(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAppFolderAppResolver]Error getting App objects %s", err)
        return vGlobalAppList, nil
    }
	for _, i := range vAppAllObj {
		vApp, err := nc.GlobalRoot().Runtime().AppFolder(getParentName(obj.ParentLabels, "appfolders.global.tsm.tanzu.vmware.com")).GetApp(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalAppFolderAppResolver]Error getting App node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vApp.DisplayName()
parentLabels := map[string]interface{}{"apps.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalApp {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalAppList = append(vGlobalAppList, ret)
	}

	log.Debugf("[getGlobalAppFolderAppResolver]Output App objects %v", vGlobalAppList)

	return vGlobalAppList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Services Node: AppGroup PKG: Global
//////////////////////////////////////
func getGlobalAppGroupServicesResolver(obj *model.GlobalAppGroup, id *string) ([]*model.GlobalService, error) {
	log.Debugf("[getGlobalAppGroupServicesResolver]Parent Object %+v", obj)
	var vGlobalServiceList []*model.GlobalService
	if id != nil && *id != "" {
		log.Debugf("[getGlobalAppGroupServicesResolver]Id %q", *id)
		vServiceParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetAppGroups(context.TODO(), getParentName(obj.ParentLabels, "appgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalAppGroupServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		vService, err := vServiceParent.GetServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalAppGroupServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)

		log.Debugf("[getGlobalAppGroupServicesResolver]Output Services objects %v", vGlobalServiceList)

		return vGlobalServiceList, nil
	}

	log.Debug("[getGlobalAppGroupServicesResolver]Id is empty, process all Servicess")

	vServiceParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetAppGroups(context.TODO(), getParentName(obj.ParentLabels, "appgroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalAppGroupServicesResolver]Error getting parent node %s", err)
        return vGlobalServiceList, nil
    }
	vServiceAllObj, err := vServiceParent.GetAllServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAppGroupServicesResolver]Error getting Services %s", err)
        return vGlobalServiceList, nil
    }
	for _, i := range vServiceAllObj {
		vServiceParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetAppGroups(context.TODO(), getParentName(obj.ParentLabels, "appgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalAppGroupServicesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vService, err := vServiceParent.GetServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalAppGroupServicesResolver]Error getting Services node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)
	}
	log.Debugf("[getGlobalAppGroupServicesResolver]List of Services object %v", vGlobalServiceList)
	return vGlobalServiceList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceDefinitions Node: AppTemplate PKG: Global
//////////////////////////////////////
func getGlobalAppTemplateServiceDefinitionsResolver(obj *model.GlobalAppTemplate, id *string) ([]*model.GlobalAppTemplateServiceDefinition, error) {
	log.Debugf("[getGlobalAppTemplateServiceDefinitionsResolver]Parent Object %+v", obj)
	var vGlobalAppTemplateServiceDefinitionList []*model.GlobalAppTemplateServiceDefinition
	if id != nil && *id != "" {
		log.Debugf("[getGlobalAppTemplateServiceDefinitionsResolver]Id %q", *id)
		vAppTemplateServiceDefinition, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).AppTemplates(getParentName(obj.ParentLabels, "apptemplates.global.tsm.tanzu.vmware.com")).GetServiceDefinitions(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalAppTemplateServiceDefinitionsResolver]Error getting ServiceDefinitions node %q : %s", *id, err)
            return vGlobalAppTemplateServiceDefinitionList, nil
        }
		dn := vAppTemplateServiceDefinition.DisplayName()
parentLabels := map[string]interface{}{"apptemplateservicedefinitions.global.tsm.tanzu.vmware.com":dn}
vType := string(vAppTemplateServiceDefinition.Spec.Type)
vVersion := string(vAppTemplateServiceDefinition.Spec.Version)
vTemplate := string(vAppTemplateServiceDefinition.Spec.Template)
TemplateArgs, _ := json.Marshal(vAppTemplateServiceDefinition.Spec.TemplateArgs)
TemplateArgsData := string(TemplateArgs)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAppTemplateServiceDefinition {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Version: &vVersion,
	Template: &vTemplate,
	TemplateArgs: &TemplateArgsData,
	}
		vGlobalAppTemplateServiceDefinitionList = append(vGlobalAppTemplateServiceDefinitionList, ret)

		log.Debugf("[getGlobalAppTemplateServiceDefinitionsResolver]Output ServiceDefinitions objects %v", vGlobalAppTemplateServiceDefinitionList)

		return vGlobalAppTemplateServiceDefinitionList, nil
	}

	log.Debug("[getGlobalAppTemplateServiceDefinitionsResolver]Id is empty, process all ServiceDefinitionss")

	vAppTemplateServiceDefinitionParent, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetAppTemplates(context.TODO(), getParentName(obj.ParentLabels, "apptemplates.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalAppTemplateServiceDefinitionsResolver]Error getting parent node %s", err)
        return vGlobalAppTemplateServiceDefinitionList, nil
    }
	vAppTemplateServiceDefinitionAllObj, err := vAppTemplateServiceDefinitionParent.GetAllServiceDefinitions(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAppTemplateServiceDefinitionsResolver]Error getting ServiceDefinitions objects %s", err)
        return vGlobalAppTemplateServiceDefinitionList, nil
    }
	for _, i := range vAppTemplateServiceDefinitionAllObj {
		vAppTemplateServiceDefinition, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).AppTemplates(getParentName(obj.ParentLabels, "apptemplates.global.tsm.tanzu.vmware.com")).GetServiceDefinitions(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalAppTemplateServiceDefinitionsResolver]Error getting ServiceDefinitions node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAppTemplateServiceDefinition.DisplayName()
parentLabels := map[string]interface{}{"apptemplateservicedefinitions.global.tsm.tanzu.vmware.com":dn}
vType := string(vAppTemplateServiceDefinition.Spec.Type)
vVersion := string(vAppTemplateServiceDefinition.Spec.Version)
vTemplate := string(vAppTemplateServiceDefinition.Spec.Template)
TemplateArgs, _ := json.Marshal(vAppTemplateServiceDefinition.Spec.TemplateArgs)
TemplateArgsData := string(TemplateArgs)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAppTemplateServiceDefinition {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Version: &vVersion,
	Template: &vTemplate,
	TemplateArgs: &TemplateArgsData,
	}
		vGlobalAppTemplateServiceDefinitionList = append(vGlobalAppTemplateServiceDefinitionList, ret)
	}

	log.Debugf("[getGlobalAppTemplateServiceDefinitionsResolver]Output ServiceDefinitions objects %v", vGlobalAppTemplateServiceDefinitionList)

	return vGlobalAppTemplateServiceDefinitionList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Template Node: AppVersion PKG: Global
//////////////////////////////////////
func getGlobalAppVersionTemplateResolver(obj *model.GlobalAppVersion) (*model.GlobalTemplate, error) {
    log.Debugf("[getGlobalAppVersionTemplateResolver]Parent Object %+v", obj)
	vTemplateParent, err := nc.GlobalRoot().Runtime().AppFolder(getParentName(obj.ParentLabels, "appfolders.global.tsm.tanzu.vmware.com")).App(getParentName(obj.ParentLabels, "apps.global.tsm.tanzu.vmware.com")).GetVersion(context.TODO(), getParentName(obj.ParentLabels, "appversions.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalAppVersionTemplateResolver]Error getting parent node %s", err)
        return &model.GlobalTemplate{}, nil
    }
	vTemplate, err := vTemplateParent.GetTemplate(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalAppVersionTemplateResolver]Error getting Template object %s", err)
        return &model.GlobalTemplate{}, nil
    }
	dn := vTemplate.DisplayName()
parentLabels := map[string]interface{}{"templates.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
	log.Debugf("[getGlobalAppVersionTemplateResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Inventory Node: AppVersion PKG: Global
//////////////////////////////////////
func getGlobalAppVersionInventoryResolver(obj *model.GlobalAppVersion) (*model.GlobalInventory, error) {
    log.Debugf("[getGlobalAppVersionInventoryResolver]Parent Object %+v", obj)
	vInventoryParent, err := nc.GlobalRoot().Runtime().AppFolder(getParentName(obj.ParentLabels, "appfolders.global.tsm.tanzu.vmware.com")).App(getParentName(obj.ParentLabels, "apps.global.tsm.tanzu.vmware.com")).GetVersion(context.TODO(), getParentName(obj.ParentLabels, "appversions.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalAppVersionInventoryResolver]Error getting parent node %s", err)
        return &model.GlobalInventory{}, nil
    }
	vInventory, err := vInventoryParent.GetInventory(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalAppVersionInventoryResolver]Error getting Inventory object %s", err)
        return &model.GlobalInventory{}, nil
    }
	dn := vInventory.DisplayName()
parentLabels := map[string]interface{}{"inventories.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	}
	log.Debugf("[getGlobalAppVersionInventoryResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Version Node: App PKG: Global
//////////////////////////////////////
func getGlobalAppVersionResolver(obj *model.GlobalApp, id *string) (*model.GlobalAppVersion, error) {
	log.Debugf("[getGlobalAppVersionResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalAppVersionResolver]Id %q", *id)
		vAppVersion, err := nc.GlobalRoot().Runtime().AppFolder(getParentName(obj.ParentLabels, "appfolders.global.tsm.tanzu.vmware.com")).App(getParentName(obj.ParentLabels, "apps.global.tsm.tanzu.vmware.com")).GetVersion(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalAppVersionResolver]Error getting Version node %q : %s", *id, err)
			return &model.GlobalAppVersion{}, nil
		}
		dn := vAppVersion.DisplayName()
parentLabels := map[string]interface{}{"appversions.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalAppVersion {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalAppVersionResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalAppVersionResolver]Id is empty, process all Versions")
	vAppVersionParent, err := nc.GlobalRoot().Runtime().AppFolder(getParentName(obj.ParentLabels, "appfolders.global.tsm.tanzu.vmware.com")).GetApp(context.TODO(), getParentName(obj.ParentLabels, "apps.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalAppVersionResolver]Failed to get parent node %s", err)
        return &model.GlobalAppVersion{}, nil
    }
	vAppVersion, err := vAppVersionParent.GetVersion(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAppVersionResolver]Error getting Version node %s", err)
        return &model.GlobalAppVersion{}, nil
    }
	dn := vAppVersion.DisplayName()
parentLabels := map[string]interface{}{"appversions.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalAppVersion {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalAppVersionResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Autoscalers Node: AutoscalerFolder PKG: Global
//////////////////////////////////////
func getGlobalAutoscalerFolderAutoscalersResolver(obj *model.GlobalAutoscalerFolder, id *string) ([]*model.GlobalAutoscaler, error) {
	log.Debugf("[getGlobalAutoscalerFolderAutoscalersResolver]Parent Object %+v", obj)
	var vGlobalAutoscalerList []*model.GlobalAutoscaler
	if id != nil && *id != "" {
		log.Debugf("[getGlobalAutoscalerFolderAutoscalersResolver]Id %q", *id)
		vAutoscaler, err := nc.GlobalRoot().Config().AutoscalerFolder(getParentName(obj.ParentLabels, "autoscalerfolders.global.tsm.tanzu.vmware.com")).GetAutoscalers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalAutoscalerFolderAutoscalersResolver]Error getting Autoscalers node %q : %s", *id, err)
            return vGlobalAutoscalerList, nil
        }
		dn := vAutoscaler.DisplayName()
parentLabels := map[string]interface{}{"autoscalers.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscaler.Spec.Name)
vProjectId := string(vAutoscaler.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscaler {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ProjectId: &vProjectId,
	}
		vGlobalAutoscalerList = append(vGlobalAutoscalerList, ret)

		log.Debugf("[getGlobalAutoscalerFolderAutoscalersResolver]Output Autoscalers objects %v", vGlobalAutoscalerList)

		return vGlobalAutoscalerList, nil
	}

	log.Debug("[getGlobalAutoscalerFolderAutoscalersResolver]Id is empty, process all Autoscalerss")

	vAutoscalerParent, err := nc.GlobalRoot().Config().GetAutoscalerFolder(context.TODO(), getParentName(obj.ParentLabels, "autoscalerfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalAutoscalerFolderAutoscalersResolver]Error getting parent node %s", err)
        return vGlobalAutoscalerList, nil
    }
	vAutoscalerAllObj, err := vAutoscalerParent.GetAllAutoscalers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAutoscalerFolderAutoscalersResolver]Error getting Autoscalers objects %s", err)
        return vGlobalAutoscalerList, nil
    }
	for _, i := range vAutoscalerAllObj {
		vAutoscaler, err := nc.GlobalRoot().Config().AutoscalerFolder(getParentName(obj.ParentLabels, "autoscalerfolders.global.tsm.tanzu.vmware.com")).GetAutoscalers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalAutoscalerFolderAutoscalersResolver]Error getting Autoscalers node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAutoscaler.DisplayName()
parentLabels := map[string]interface{}{"autoscalers.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscaler.Spec.Name)
vProjectId := string(vAutoscaler.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscaler {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ProjectId: &vProjectId,
	}
		vGlobalAutoscalerList = append(vGlobalAutoscalerList, ret)
	}

	log.Debugf("[getGlobalAutoscalerFolderAutoscalersResolver]Output Autoscalers objects %v", vGlobalAutoscalerList)

	return vGlobalAutoscalerList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Autoscaler Node: Autoscaler PKG: Global
//////////////////////////////////////
func getGlobalAutoscalerAutoscalerResolver(obj *model.GlobalAutoscaler) (*model.GlobalAutoscalerCR, error) {
    log.Debugf("[getGlobalAutoscalerAutoscalerResolver]Parent Object %+v", obj)
	vAutoscalerCRParent, err := nc.GlobalRoot().Config().AutoscalerFolder(getParentName(obj.ParentLabels, "autoscalerfolders.global.tsm.tanzu.vmware.com")).GetAutoscalers(context.TODO(), getParentName(obj.ParentLabels, "autoscalers.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalAutoscalerAutoscalerResolver]Error getting parent node %s", err)
        return &model.GlobalAutoscalerCR{}, nil
    }
	vAutoscalerCR, err := vAutoscalerCRParent.GetAutoscaler(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalAutoscalerAutoscalerResolver]Error getting Autoscaler object %s", err)
        return &model.GlobalAutoscalerCR{}, nil
    }
	dn := vAutoscalerCR.DisplayName()
parentLabels := map[string]interface{}{"autoscalercrs.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscalerCR.Spec.Name)
vAutoscalingDefinition := string(vAutoscalerCR.Spec.AutoscalingDefinition)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalAutoscalerCR {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	AutoscalingDefinition: &vAutoscalingDefinition,
	}
	log.Debugf("[getGlobalAutoscalerAutoscalerResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Gns Node: AwsConnector PKG: Global
//////////////////////////////////////
func getGlobalAwsConnectorGnsResolver(obj *model.GlobalAwsConnector, id *string) ([]*model.GlobalGlobalNs, error) {
	log.Debugf("[getGlobalAwsConnectorGnsResolver]Parent Object %+v", obj)
	var vGlobalGlobalNsList []*model.GlobalGlobalNs
	if id != nil && *id != "" {
		log.Debugf("[getGlobalAwsConnectorGnsResolver]Id %q", *id)
		vGlobalNs, err := nc.GlobalRoot().Runtime().AllsparkServices().AwsConnector().GetGns(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalAwsConnectorGnsResolver]Error getting Gns node %q : %s", *id, err)
            return vGlobalGlobalNsList, nil
        }
		dn := vGlobalNs.DisplayName()
parentLabels := map[string]interface{}{"globalnses.global.tsm.tanzu.vmware.com":dn}
vGnsName := string(vGlobalNs.Spec.GnsName)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGlobalNs {
	Id: &dn,
	ParentLabels: parentLabels,
	GnsName: &vGnsName,
	}
		vGlobalGlobalNsList = append(vGlobalGlobalNsList, ret)

		log.Debugf("[getGlobalAwsConnectorGnsResolver]Output Gns objects %v", vGlobalGlobalNsList)

		return vGlobalGlobalNsList, nil
	}

	log.Debug("[getGlobalAwsConnectorGnsResolver]Id is empty, process all Gnss")

	vGlobalNsParent, err := nc.GlobalRoot().Runtime().AllsparkServices().GetAwsConnector(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAwsConnectorGnsResolver]Error getting parent node %s", err)
        return vGlobalGlobalNsList, nil
    }
	vGlobalNsAllObj, err := vGlobalNsParent.GetAllGns(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAwsConnectorGnsResolver]Error getting Gns objects %s", err)
        return vGlobalGlobalNsList, nil
    }
	for _, i := range vGlobalNsAllObj {
		vGlobalNs, err := nc.GlobalRoot().Runtime().AllsparkServices().AwsConnector().GetGns(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalAwsConnectorGnsResolver]Error getting Gns node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGlobalNs.DisplayName()
parentLabels := map[string]interface{}{"globalnses.global.tsm.tanzu.vmware.com":dn}
vGnsName := string(vGlobalNs.Spec.GnsName)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGlobalNs {
	Id: &dn,
	ParentLabels: parentLabels,
	GnsName: &vGnsName,
	}
		vGlobalGlobalNsList = append(vGlobalGlobalNsList, ret)
	}

	log.Debugf("[getGlobalAwsConnectorGnsResolver]Output Gns objects %v", vGlobalGlobalNsList)

	return vGlobalGlobalNsList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Template Node: Bucket PKG: Global
//////////////////////////////////////
func getGlobalBucketTemplateResolver(obj *model.GlobalBucket) (*model.GlobalTemplate, error) {
    log.Debugf("[getGlobalBucketTemplateResolver]Parent Object %+v", obj)
	vTemplateParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetBuckets(context.TODO(), getParentName(obj.ParentLabels, "buckets.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalBucketTemplateResolver]Error getting parent node %s", err)
        return &model.GlobalTemplate{}, nil
    }
	vTemplate, err := vTemplateParent.GetTemplate(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalBucketTemplateResolver]Error getting Template object %s", err)
        return &model.GlobalTemplate{}, nil
    }
	dn := vTemplate.DisplayName()
parentLabels := map[string]interface{}{"templates.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
	log.Debugf("[getGlobalBucketTemplateResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Inventory Node: Bucket PKG: Global
//////////////////////////////////////
func getGlobalBucketInventoryResolver(obj *model.GlobalBucket) (*model.GlobalInventory, error) {
    log.Debugf("[getGlobalBucketInventoryResolver]Parent Object %+v", obj)
	vInventoryParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetBuckets(context.TODO(), getParentName(obj.ParentLabels, "buckets.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalBucketInventoryResolver]Error getting parent node %s", err)
        return &model.GlobalInventory{}, nil
    }
	vInventory, err := vInventoryParent.GetInventory(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalBucketInventoryResolver]Error getting Inventory object %s", err)
        return &model.GlobalInventory{}, nil
    }
	dn := vInventory.DisplayName()
parentLabels := map[string]interface{}{"inventories.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	}
	log.Debugf("[getGlobalBucketInventoryResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Clusters Node: ClusterConfigFolder PKG: Global
//////////////////////////////////////
func getGlobalClusterConfigFolderClustersResolver(obj *model.GlobalClusterConfigFolder, id *string) ([]*model.GlobalClusterSettings, error) {
	log.Debugf("[getGlobalClusterConfigFolderClustersResolver]Parent Object %+v", obj)
	var vGlobalClusterSettingsList []*model.GlobalClusterSettings
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterConfigFolderClustersResolver]Id %q", *id)
		vClusterSettings, err := nc.GlobalRoot().Config().Clusters(getParentName(obj.ParentLabels, "clusterconfigfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterConfigFolderClustersResolver]Error getting Clusters node %q : %s", *id, err)
            return vGlobalClusterSettingsList, nil
        }
		dn := vClusterSettings.DisplayName()
parentLabels := map[string]interface{}{"clustersettingses.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vClusterSettings.Spec.ProjectId)
vDisplayName := string(vClusterSettings.Spec.DisplayName)
vDescription := string(vClusterSettings.Spec.Description)
vTags := string(vClusterSettings.Spec.Tags)
vLabels := string(vClusterSettings.Spec.Labels)
vAutoInstallServiceMesh := bool(vClusterSettings.Spec.AutoInstallServiceMesh)
vEnableNamespaceExclusions := bool(vClusterSettings.Spec.EnableNamespaceExclusions)
vNamespaceExclusions := string(vClusterSettings.Spec.NamespaceExclusions)
vSystemNamespaceExclusions := string(vClusterSettings.Spec.SystemNamespaceExclusions)
vAgentDomain := string(vClusterSettings.Spec.AgentDomain)
vProxyConfig := string(vClusterSettings.Spec.ProxyConfig)
vAutoInstallServiceMeshConfig := string(vClusterSettings.Spec.AutoInstallServiceMeshConfig)
vRegistryAccount := string(vClusterSettings.Spec.RegistryAccount)
vCaLabels := string(vClusterSettings.Spec.CaLabels)
vEnableInternalGateway := bool(vClusterSettings.Spec.EnableInternalGateway)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalClusterSettings {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Tags: &vTags,
	Labels: &vLabels,
	AutoInstallServiceMesh: &vAutoInstallServiceMesh,
	EnableNamespaceExclusions: &vEnableNamespaceExclusions,
	NamespaceExclusions: &vNamespaceExclusions,
	SystemNamespaceExclusions: &vSystemNamespaceExclusions,
	AgentDomain: &vAgentDomain,
	ProxyConfig: &vProxyConfig,
	AutoInstallServiceMeshConfig: &vAutoInstallServiceMeshConfig,
	RegistryAccount: &vRegistryAccount,
	CaLabels: &vCaLabels,
	EnableInternalGateway: &vEnableInternalGateway,
	}
		vGlobalClusterSettingsList = append(vGlobalClusterSettingsList, ret)

		log.Debugf("[getGlobalClusterConfigFolderClustersResolver]Output Clusters objects %v", vGlobalClusterSettingsList)

		return vGlobalClusterSettingsList, nil
	}

	log.Debug("[getGlobalClusterConfigFolderClustersResolver]Id is empty, process all Clusterss")

	vClusterSettingsParent, err := nc.GlobalRoot().Config().GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusterconfigfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigFolderClustersResolver]Error getting parent node %s", err)
        return vGlobalClusterSettingsList, nil
    }
	vClusterSettingsAllObj, err := vClusterSettingsParent.GetAllClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigFolderClustersResolver]Error getting Clusters objects %s", err)
        return vGlobalClusterSettingsList, nil
    }
	for _, i := range vClusterSettingsAllObj {
		vClusterSettings, err := nc.GlobalRoot().Config().Clusters(getParentName(obj.ParentLabels, "clusterconfigfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterConfigFolderClustersResolver]Error getting Clusters node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vClusterSettings.DisplayName()
parentLabels := map[string]interface{}{"clustersettingses.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vClusterSettings.Spec.ProjectId)
vDisplayName := string(vClusterSettings.Spec.DisplayName)
vDescription := string(vClusterSettings.Spec.Description)
vTags := string(vClusterSettings.Spec.Tags)
vLabels := string(vClusterSettings.Spec.Labels)
vAutoInstallServiceMesh := bool(vClusterSettings.Spec.AutoInstallServiceMesh)
vEnableNamespaceExclusions := bool(vClusterSettings.Spec.EnableNamespaceExclusions)
vNamespaceExclusions := string(vClusterSettings.Spec.NamespaceExclusions)
vSystemNamespaceExclusions := string(vClusterSettings.Spec.SystemNamespaceExclusions)
vAgentDomain := string(vClusterSettings.Spec.AgentDomain)
vProxyConfig := string(vClusterSettings.Spec.ProxyConfig)
vAutoInstallServiceMeshConfig := string(vClusterSettings.Spec.AutoInstallServiceMeshConfig)
vRegistryAccount := string(vClusterSettings.Spec.RegistryAccount)
vCaLabels := string(vClusterSettings.Spec.CaLabels)
vEnableInternalGateway := bool(vClusterSettings.Spec.EnableInternalGateway)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalClusterSettings {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Tags: &vTags,
	Labels: &vLabels,
	AutoInstallServiceMesh: &vAutoInstallServiceMesh,
	EnableNamespaceExclusions: &vEnableNamespaceExclusions,
	NamespaceExclusions: &vNamespaceExclusions,
	SystemNamespaceExclusions: &vSystemNamespaceExclusions,
	AgentDomain: &vAgentDomain,
	ProxyConfig: &vProxyConfig,
	AutoInstallServiceMeshConfig: &vAutoInstallServiceMeshConfig,
	RegistryAccount: &vRegistryAccount,
	CaLabels: &vCaLabels,
	EnableInternalGateway: &vEnableInternalGateway,
	}
		vGlobalClusterSettingsList = append(vGlobalClusterSettingsList, ret)
	}

	log.Debugf("[getGlobalClusterConfigFolderClustersResolver]Output Clusters objects %v", vGlobalClusterSettingsList)

	return vGlobalClusterSettingsList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: DnsConfigFolder Node: ClusterConfig PKG: Global
//////////////////////////////////////
func getGlobalClusterConfigDnsConfigFolderResolver(obj *model.GlobalClusterConfig, id *string) (*model.GlobalDNSConfigFolder, error) {
	log.Debugf("[getGlobalClusterConfigDnsConfigFolderResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalClusterConfigDnsConfigFolderResolver]Id %q", *id)
		vDNSConfigFolder, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDnsConfigFolder(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterConfigDnsConfigFolderResolver]Error getting DnsConfigFolder node %q : %s", *id, err)
			return &model.GlobalDNSConfigFolder{}, nil
		}
		dn := vDNSConfigFolder.DisplayName()
parentLabels := map[string]interface{}{"dnsconfigfolders.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalDNSConfigFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalClusterConfigDnsConfigFolderResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalClusterConfigDnsConfigFolderResolver]Id is empty, process all DnsConfigFolders")
	vDNSConfigFolderParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigDnsConfigFolderResolver]Failed to get parent node %s", err)
        return &model.GlobalDNSConfigFolder{}, nil
    }
	vDNSConfigFolder, err := vDNSConfigFolderParent.GetDnsConfigFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigDnsConfigFolderResolver]Error getting DnsConfigFolder node %s", err)
        return &model.GlobalDNSConfigFolder{}, nil
    }
	dn := vDNSConfigFolder.DisplayName()
parentLabels := map[string]interface{}{"dnsconfigfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalDNSConfigFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalClusterConfigDnsConfigFolderResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: DnsProbesConfigFolder Node: ClusterConfig PKG: Global
//////////////////////////////////////
func getGlobalClusterConfigDnsProbesConfigFolderResolver(obj *model.GlobalClusterConfig) (*model.GlobalDNSProbesConfigFolder, error) {
	log.Debugf("[getGlobalClusterConfigDnsProbesConfigFolderResolver]Parent Object %+v", obj)
	vDNSProbesConfigFolder, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDnsProbesConfigFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigDnsProbesConfigFolderResolver]Error getting ClusterConfig node %s", err)
        return &model.GlobalDNSProbesConfigFolder{}, nil
    }
	dn := vDNSProbesConfigFolder.DisplayName()
parentLabels := map[string]interface{}{"dnsprobesconfigfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalDNSProbesConfigFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalClusterConfigDnsProbesConfigFolderResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: LogFolder Node: ClusterConfig PKG: Global
//////////////////////////////////////
func getGlobalClusterConfigLogFolderResolver(obj *model.GlobalClusterConfig, id *string) (*model.GlobalLogFolder, error) {
	log.Debugf("[getGlobalClusterConfigLogFolderResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalClusterConfigLogFolderResolver]Id %q", *id)
		vLogFolder, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetLogFolder(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterConfigLogFolderResolver]Error getting LogFolder node %q : %s", *id, err)
			return &model.GlobalLogFolder{}, nil
		}
		dn := vLogFolder.DisplayName()
parentLabels := map[string]interface{}{"logfolders.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalLogFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalClusterConfigLogFolderResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalClusterConfigLogFolderResolver]Id is empty, process all LogFolders")
	vLogFolderParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigLogFolderResolver]Failed to get parent node %s", err)
        return &model.GlobalLogFolder{}, nil
    }
	vLogFolder, err := vLogFolderParent.GetLogFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigLogFolderResolver]Error getting LogFolder node %s", err)
        return &model.GlobalLogFolder{}, nil
    }
	dn := vLogFolder.DisplayName()
parentLabels := map[string]interface{}{"logfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalLogFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalClusterConfigLogFolderResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: ResourceGroup Node: ClusterConfig PKG: Global
//////////////////////////////////////
func getGlobalClusterConfigResourceGroupResolver(obj *model.GlobalClusterConfig, id *string) (*model.GlobalResourceGroupRT, error) {
	log.Debugf("[getGlobalClusterConfigResourceGroupResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalClusterConfigResourceGroupResolver]Id %q", *id)
		vResourceGroupRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetResourceGroup(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterConfigResourceGroupResolver]Error getting ResourceGroup node %q : %s", *id, err)
			return &model.GlobalResourceGroupRT{}, nil
		}
		dn := vResourceGroupRT.DisplayName()
parentLabels := map[string]interface{}{"resourcegrouprts.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalResourceGroupRT {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalClusterConfigResourceGroupResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalClusterConfigResourceGroupResolver]Id is empty, process all ResourceGroups")
	vResourceGroupRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigResourceGroupResolver]Failed to get parent node %s", err)
        return &model.GlobalResourceGroupRT{}, nil
    }
	vResourceGroupRT, err := vResourceGroupRTParent.GetResourceGroup(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigResourceGroupResolver]Error getting ResourceGroup node %s", err)
        return &model.GlobalResourceGroupRT{}, nil
    }
	dn := vResourceGroupRT.DisplayName()
parentLabels := map[string]interface{}{"resourcegrouprts.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalResourceGroupRT {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalClusterConfigResourceGroupResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Domains Node: ClusterConfig PKG: Global
//////////////////////////////////////
func getGlobalClusterConfigDomainsResolver(obj *model.GlobalClusterConfig, id *string) ([]*model.GlobalDomainConfig, error) {
	log.Debugf("[getGlobalClusterConfigDomainsResolver]Parent Object %+v", obj)
	var vGlobalDomainConfigList []*model.GlobalDomainConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterConfigDomainsResolver]Id %q", *id)
		vDomainConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterConfigDomainsResolver]Error getting Domains node %q : %s", *id, err)
            return vGlobalDomainConfigList, nil
        }
		dn := vDomainConfig.DisplayName()
parentLabels := map[string]interface{}{"domainconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vDomainConfig.Spec.Name)
vOwnedBy := string(vDomainConfig.Spec.OwnedBy)
vLabels := string(vDomainConfig.Spec.Labels)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDomainConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	Labels: &vLabels,
	}
		vGlobalDomainConfigList = append(vGlobalDomainConfigList, ret)

		log.Debugf("[getGlobalClusterConfigDomainsResolver]Output Domains objects %v", vGlobalDomainConfigList)

		return vGlobalDomainConfigList, nil
	}

	log.Debug("[getGlobalClusterConfigDomainsResolver]Id is empty, process all Domainss")

	vDomainConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigDomainsResolver]Error getting parent node %s", err)
        return vGlobalDomainConfigList, nil
    }
	vDomainConfigAllObj, err := vDomainConfigParent.GetAllDomains(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigDomainsResolver]Error getting Domains objects %s", err)
        return vGlobalDomainConfigList, nil
    }
	for _, i := range vDomainConfigAllObj {
		vDomainConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterConfigDomainsResolver]Error getting Domains node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDomainConfig.DisplayName()
parentLabels := map[string]interface{}{"domainconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vDomainConfig.Spec.Name)
vOwnedBy := string(vDomainConfig.Spec.OwnedBy)
vLabels := string(vDomainConfig.Spec.Labels)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDomainConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	Labels: &vLabels,
	}
		vGlobalDomainConfigList = append(vGlobalDomainConfigList, ret)
	}

	log.Debugf("[getGlobalClusterConfigDomainsResolver]Output Domains objects %v", vGlobalDomainConfigList)

	return vGlobalDomainConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: HostConfig Node: ClusterConfig PKG: Global
//////////////////////////////////////
func getGlobalClusterConfigHostConfigResolver(obj *model.GlobalClusterConfig, id *string) ([]*model.GlobalHostConfig, error) {
	log.Debugf("[getGlobalClusterConfigHostConfigResolver]Parent Object %+v", obj)
	var vGlobalHostConfigList []*model.GlobalHostConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterConfigHostConfigResolver]Id %q", *id)
		vHostConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetHostConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterConfigHostConfigResolver]Error getting HostConfig node %q : %s", *id, err)
            return vGlobalHostConfigList, nil
        }
		dn := vHostConfig.DisplayName()
parentLabels := map[string]interface{}{"hostconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vHostConfig.Spec.Name)
vHost := string(vHostConfig.Spec.Host)
vOwnedBy := string(vHostConfig.Spec.OwnedBy)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalHostConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Host: &vHost,
	OwnedBy: &vOwnedBy,
	}
		vGlobalHostConfigList = append(vGlobalHostConfigList, ret)

		log.Debugf("[getGlobalClusterConfigHostConfigResolver]Output HostConfig objects %v", vGlobalHostConfigList)

		return vGlobalHostConfigList, nil
	}

	log.Debug("[getGlobalClusterConfigHostConfigResolver]Id is empty, process all HostConfigs")

	vHostConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigHostConfigResolver]Error getting parent node %s", err)
        return vGlobalHostConfigList, nil
    }
	vHostConfigAllObj, err := vHostConfigParent.GetAllHostConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigHostConfigResolver]Error getting HostConfig objects %s", err)
        return vGlobalHostConfigList, nil
    }
	for _, i := range vHostConfigAllObj {
		vHostConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetHostConfig(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterConfigHostConfigResolver]Error getting HostConfig node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vHostConfig.DisplayName()
parentLabels := map[string]interface{}{"hostconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vHostConfig.Spec.Name)
vHost := string(vHostConfig.Spec.Host)
vOwnedBy := string(vHostConfig.Spec.OwnedBy)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalHostConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Host: &vHost,
	OwnedBy: &vOwnedBy,
	}
		vGlobalHostConfigList = append(vGlobalHostConfigList, ret)
	}

	log.Debugf("[getGlobalClusterConfigHostConfigResolver]Output HostConfig objects %v", vGlobalHostConfigList)

	return vGlobalHostConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsBinding Node: ClusterConfig PKG: Global
//////////////////////////////////////
func getGlobalClusterConfigGnsBindingResolver(obj *model.GlobalClusterConfig, id *string) ([]*model.GlobalGnsBindingRT, error) {
	log.Debugf("[getGlobalClusterConfigGnsBindingResolver]Parent Object %+v", obj)
	var vGlobalGnsBindingRTList []*model.GlobalGnsBindingRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterConfigGnsBindingResolver]Id %q", *id)
		vGnsBindingRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetGnsBinding(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterConfigGnsBindingResolver]Error getting GnsBinding node %q : %s", *id, err)
            return vGlobalGnsBindingRTList, nil
        }
		dn := vGnsBindingRT.DisplayName()
parentLabels := map[string]interface{}{"gnsbindingrts.global.tsm.tanzu.vmware.com":dn}
vName := string(vGnsBindingRT.Spec.Name)
vDomain := string(vGnsBindingRT.Spec.Domain)
Namespaces, _ := json.Marshal(vGnsBindingRT.Spec.Namespaces)
NamespacesData := string(Namespaces)
vApiDiscoveryEnabled := bool(vGnsBindingRT.Spec.ApiDiscoveryEnabled)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsBindingRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Domain: &vDomain,
	Namespaces: &NamespacesData,
	ApiDiscoveryEnabled: &vApiDiscoveryEnabled,
	}
		vGlobalGnsBindingRTList = append(vGlobalGnsBindingRTList, ret)

		log.Debugf("[getGlobalClusterConfigGnsBindingResolver]Output GnsBinding objects %v", vGlobalGnsBindingRTList)

		return vGlobalGnsBindingRTList, nil
	}

	log.Debug("[getGlobalClusterConfigGnsBindingResolver]Id is empty, process all GnsBindings")

	vGnsBindingRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigGnsBindingResolver]Error getting parent node %s", err)
        return vGlobalGnsBindingRTList, nil
    }
	vGnsBindingRTAllObj, err := vGnsBindingRTParent.GetAllGnsBinding(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigGnsBindingResolver]Error getting GnsBinding objects %s", err)
        return vGlobalGnsBindingRTList, nil
    }
	for _, i := range vGnsBindingRTAllObj {
		vGnsBindingRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetGnsBinding(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterConfigGnsBindingResolver]Error getting GnsBinding node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsBindingRT.DisplayName()
parentLabels := map[string]interface{}{"gnsbindingrts.global.tsm.tanzu.vmware.com":dn}
vName := string(vGnsBindingRT.Spec.Name)
vDomain := string(vGnsBindingRT.Spec.Domain)
Namespaces, _ := json.Marshal(vGnsBindingRT.Spec.Namespaces)
NamespacesData := string(Namespaces)
vApiDiscoveryEnabled := bool(vGnsBindingRT.Spec.ApiDiscoveryEnabled)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsBindingRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Domain: &vDomain,
	Namespaces: &NamespacesData,
	ApiDiscoveryEnabled: &vApiDiscoveryEnabled,
	}
		vGlobalGnsBindingRTList = append(vGlobalGnsBindingRTList, ret)
	}

	log.Debugf("[getGlobalClusterConfigGnsBindingResolver]Output GnsBinding objects %v", vGlobalGnsBindingRTList)

	return vGlobalGnsBindingRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: SecurityContextConstraints Node: ClusterConfig PKG: Global
//////////////////////////////////////
func getGlobalClusterConfigSecurityContextConstraintsResolver(obj *model.GlobalClusterConfig, id *string) ([]*model.GlobalSecurityContextConstraintsConfig, error) {
	log.Debugf("[getGlobalClusterConfigSecurityContextConstraintsResolver]Parent Object %+v", obj)
	var vGlobalSecurityContextConstraintsConfigList []*model.GlobalSecurityContextConstraintsConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterConfigSecurityContextConstraintsResolver]Id %q", *id)
		vSecurityContextConstraintsConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetSecurityContextConstraints(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterConfigSecurityContextConstraintsResolver]Error getting SecurityContextConstraints node %q : %s", *id, err)
            return vGlobalSecurityContextConstraintsConfigList, nil
        }
		dn := vSecurityContextConstraintsConfig.DisplayName()
parentLabels := map[string]interface{}{"securitycontextconstraintsconfigs.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vSecurityContextConstraintsConfig.Spec.Metadata)
vName := string(vSecurityContextConstraintsConfig.Spec.Name)
Groups, _ := json.Marshal(vSecurityContextConstraintsConfig.Spec.Groups)
GroupsData := string(Groups)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSecurityContextConstraintsConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Name: &vName,
	Groups: &GroupsData,
	}
		vGlobalSecurityContextConstraintsConfigList = append(vGlobalSecurityContextConstraintsConfigList, ret)

		log.Debugf("[getGlobalClusterConfigSecurityContextConstraintsResolver]Output SecurityContextConstraints objects %v", vGlobalSecurityContextConstraintsConfigList)

		return vGlobalSecurityContextConstraintsConfigList, nil
	}

	log.Debug("[getGlobalClusterConfigSecurityContextConstraintsResolver]Id is empty, process all SecurityContextConstraintss")

	vSecurityContextConstraintsConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigSecurityContextConstraintsResolver]Error getting parent node %s", err)
        return vGlobalSecurityContextConstraintsConfigList, nil
    }
	vSecurityContextConstraintsConfigAllObj, err := vSecurityContextConstraintsConfigParent.GetAllSecurityContextConstraints(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConfigSecurityContextConstraintsResolver]Error getting SecurityContextConstraints objects %s", err)
        return vGlobalSecurityContextConstraintsConfigList, nil
    }
	for _, i := range vSecurityContextConstraintsConfigAllObj {
		vSecurityContextConstraintsConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetSecurityContextConstraints(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterConfigSecurityContextConstraintsResolver]Error getting SecurityContextConstraints node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSecurityContextConstraintsConfig.DisplayName()
parentLabels := map[string]interface{}{"securitycontextconstraintsconfigs.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vSecurityContextConstraintsConfig.Spec.Metadata)
vName := string(vSecurityContextConstraintsConfig.Spec.Name)
Groups, _ := json.Marshal(vSecurityContextConstraintsConfig.Spec.Groups)
GroupsData := string(Groups)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSecurityContextConstraintsConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Name: &vName,
	Groups: &GroupsData,
	}
		vGlobalSecurityContextConstraintsConfigList = append(vGlobalSecurityContextConstraintsConfigList, ret)
	}

	log.Debugf("[getGlobalClusterConfigSecurityContextConstraintsResolver]Output SecurityContextConstraints objects %v", vGlobalSecurityContextConstraintsConfigList)

	return vGlobalSecurityContextConstraintsConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Clusters Node: ClusterFolder PKG: Global
//////////////////////////////////////
func getGlobalClusterFolderClustersResolver(obj *model.GlobalClusterFolder, id *string) ([]*model.GlobalClusterConfig, error) {
	log.Debugf("[getGlobalClusterFolderClustersResolver]Parent Object %+v", obj)
	var vGlobalClusterConfigList []*model.GlobalClusterConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterFolderClustersResolver]Id %q", *id)
		vClusterConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterFolderClustersResolver]Error getting Clusters node %q : %s", *id, err)
            return vGlobalClusterConfigList, nil
        }
		dn := vClusterConfig.DisplayName()
parentLabels := map[string]interface{}{"clusterconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vClusterConfig.Spec.Name)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalClusterConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalClusterConfigList = append(vGlobalClusterConfigList, ret)

		log.Debugf("[getGlobalClusterFolderClustersResolver]Output Clusters objects %v", vGlobalClusterConfigList)

		return vGlobalClusterConfigList, nil
	}

	log.Debug("[getGlobalClusterFolderClustersResolver]Id is empty, process all Clusterss")

	vClusterConfigParent, err := nc.GlobalRoot().Runtime().GetClusterFolder(context.TODO(), getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterFolderClustersResolver]Error getting parent node %s", err)
        return vGlobalClusterConfigList, nil
    }
	vClusterConfigAllObj, err := vClusterConfigParent.GetAllClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterFolderClustersResolver]Error getting Clusters objects %s", err)
        return vGlobalClusterConfigList, nil
    }
	for _, i := range vClusterConfigAllObj {
		vClusterConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterFolderClustersResolver]Error getting Clusters node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vClusterConfig.DisplayName()
parentLabels := map[string]interface{}{"clusterconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vClusterConfig.Spec.Name)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalClusterConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalClusterConfigList = append(vGlobalClusterConfigList, ret)
	}

	log.Debugf("[getGlobalClusterFolderClustersResolver]Output Clusters objects %v", vGlobalClusterConfigList)

	return vGlobalClusterConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: RemoteGatewayServiceConfigs Node: ClusterFolder PKG: Global
//////////////////////////////////////
func getGlobalClusterFolderRemoteGatewayServiceConfigsResolver(obj *model.GlobalClusterFolder, id *string) ([]*model.GlobalRemoteGatewayServiceConfig, error) {
	log.Debugf("[getGlobalClusterFolderRemoteGatewayServiceConfigsResolver]Parent Object %+v", obj)
	var vGlobalRemoteGatewayServiceConfigList []*model.GlobalRemoteGatewayServiceConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterFolderRemoteGatewayServiceConfigsResolver]Id %q", *id)
		vRemoteGatewayServiceConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetRemoteGatewayServiceConfigs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterFolderRemoteGatewayServiceConfigsResolver]Error getting RemoteGatewayServiceConfigs node %q : %s", *id, err)
            return vGlobalRemoteGatewayServiceConfigList, nil
        }
		dn := vRemoteGatewayServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"remotegatewayserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vRemoteGatewayServiceConfig.Spec.OwnedBy)
vLabels := string(vRemoteGatewayServiceConfig.Spec.Labels)
vNodeIPs := string(vRemoteGatewayServiceConfig.Spec.NodeIPs)
vPorts := string(vRemoteGatewayServiceConfig.Spec.Ports)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalRemoteGatewayServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	Labels: &vLabels,
	NodeIPs: &vNodeIPs,
	Ports: &vPorts,
	}
		vGlobalRemoteGatewayServiceConfigList = append(vGlobalRemoteGatewayServiceConfigList, ret)

		log.Debugf("[getGlobalClusterFolderRemoteGatewayServiceConfigsResolver]Output RemoteGatewayServiceConfigs objects %v", vGlobalRemoteGatewayServiceConfigList)

		return vGlobalRemoteGatewayServiceConfigList, nil
	}

	log.Debug("[getGlobalClusterFolderRemoteGatewayServiceConfigsResolver]Id is empty, process all RemoteGatewayServiceConfigss")

	vRemoteGatewayServiceConfigParent, err := nc.GlobalRoot().Runtime().GetClusterFolder(context.TODO(), getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterFolderRemoteGatewayServiceConfigsResolver]Error getting parent node %s", err)
        return vGlobalRemoteGatewayServiceConfigList, nil
    }
	vRemoteGatewayServiceConfigAllObj, err := vRemoteGatewayServiceConfigParent.GetAllRemoteGatewayServiceConfigs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterFolderRemoteGatewayServiceConfigsResolver]Error getting RemoteGatewayServiceConfigs objects %s", err)
        return vGlobalRemoteGatewayServiceConfigList, nil
    }
	for _, i := range vRemoteGatewayServiceConfigAllObj {
		vRemoteGatewayServiceConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).GetRemoteGatewayServiceConfigs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterFolderRemoteGatewayServiceConfigsResolver]Error getting RemoteGatewayServiceConfigs node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vRemoteGatewayServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"remotegatewayserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vRemoteGatewayServiceConfig.Spec.OwnedBy)
vLabels := string(vRemoteGatewayServiceConfig.Spec.Labels)
vNodeIPs := string(vRemoteGatewayServiceConfig.Spec.NodeIPs)
vPorts := string(vRemoteGatewayServiceConfig.Spec.Ports)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalRemoteGatewayServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	Labels: &vLabels,
	NodeIPs: &vNodeIPs,
	Ports: &vPorts,
	}
		vGlobalRemoteGatewayServiceConfigList = append(vGlobalRemoteGatewayServiceConfigList, ret)
	}

	log.Debugf("[getGlobalClusterFolderRemoteGatewayServiceConfigsResolver]Output RemoteGatewayServiceConfigs objects %v", vGlobalRemoteGatewayServiceConfigList)

	return vGlobalRemoteGatewayServiceConfigList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: ConnectionStatus Node: Cluster PKG: Global
//////////////////////////////////////
func getGlobalClusterConnectionStatusResolver(obj *model.GlobalCluster, id *string) (*model.GlobalConnectionStatus, error) {
	log.Debugf("[getGlobalClusterConnectionStatusResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalClusterConnectionStatusResolver]Id %q", *id)
		vConnectionStatus, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetConnectionStatus(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterConnectionStatusResolver]Error getting ConnectionStatus node %q : %s", *id, err)
			return &model.GlobalConnectionStatus{}, nil
		}
		dn := vConnectionStatus.DisplayName()
parentLabels := map[string]interface{}{"connectionstatuses.global.tsm.tanzu.vmware.com":dn}
vConnected := bool(vConnectionStatus.Spec.Connected)
vMessage := string(vConnectionStatus.Spec.Message)
vCode := int(vConnectionStatus.Spec.Code)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalConnectionStatus {
	Id: &dn,
	ParentLabels: parentLabels,
	Connected: &vConnected,
	Message: &vMessage,
	Code: &vCode,
	}

		log.Debugf("[getGlobalClusterConnectionStatusResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalClusterConnectionStatusResolver]Id is empty, process all ConnectionStatuss")
	vConnectionStatusParent, err := nc.GlobalRoot().Inventory().GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterConnectionStatusResolver]Failed to get parent node %s", err)
        return &model.GlobalConnectionStatus{}, nil
    }
	vConnectionStatus, err := vConnectionStatusParent.GetConnectionStatus(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterConnectionStatusResolver]Error getting ConnectionStatus node %s", err)
        return &model.GlobalConnectionStatus{}, nil
    }
	dn := vConnectionStatus.DisplayName()
parentLabels := map[string]interface{}{"connectionstatuses.global.tsm.tanzu.vmware.com":dn}
vConnected := bool(vConnectionStatus.Spec.Connected)
vMessage := string(vConnectionStatus.Spec.Message)
vCode := int(vConnectionStatus.Spec.Code)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalConnectionStatus {
	Id: &dn,
	ParentLabels: parentLabels,
	Connected: &vConnected,
	Message: &vMessage,
	Code: &vCode,
	}

	log.Debugf("[getGlobalClusterConnectionStatusResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Apps Node: Cluster PKG: Global
//////////////////////////////////////
func getGlobalClusterAppsResolver(obj *model.GlobalCluster, id *string) ([]*model.GlobalApplicationInfo, error) {
	log.Debugf("[getGlobalClusterAppsResolver]Parent Object %+v", obj)
	var vGlobalApplicationInfoList []*model.GlobalApplicationInfo
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterAppsResolver]Id %q", *id)
		vApplicationInfo, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetApps(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterAppsResolver]Error getting Apps node %q : %s", *id, err)
            return vGlobalApplicationInfoList, nil
        }
		dn := vApplicationInfo.DisplayName()
parentLabels := map[string]interface{}{"applicationinfos.global.tsm.tanzu.vmware.com":dn}
vApp := string(vApplicationInfo.Spec.App)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalApplicationInfo {
	Id: &dn,
	ParentLabels: parentLabels,
	App: &vApp,
	}
		vGlobalApplicationInfoList = append(vGlobalApplicationInfoList, ret)

		log.Debugf("[getGlobalClusterAppsResolver]Output Apps objects %v", vGlobalApplicationInfoList)

		return vGlobalApplicationInfoList, nil
	}

	log.Debug("[getGlobalClusterAppsResolver]Id is empty, process all Appss")

	vApplicationInfoParent, err := nc.GlobalRoot().Inventory().GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterAppsResolver]Error getting parent node %s", err)
        return vGlobalApplicationInfoList, nil
    }
	vApplicationInfoAllObj, err := vApplicationInfoParent.GetAllApps(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterAppsResolver]Error getting Apps objects %s", err)
        return vGlobalApplicationInfoList, nil
    }
	for _, i := range vApplicationInfoAllObj {
		vApplicationInfo, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetApps(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterAppsResolver]Error getting Apps node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vApplicationInfo.DisplayName()
parentLabels := map[string]interface{}{"applicationinfos.global.tsm.tanzu.vmware.com":dn}
vApp := string(vApplicationInfo.Spec.App)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalApplicationInfo {
	Id: &dn,
	ParentLabels: parentLabels,
	App: &vApp,
	}
		vGlobalApplicationInfoList = append(vGlobalApplicationInfoList, ret)
	}

	log.Debugf("[getGlobalClusterAppsResolver]Output Apps objects %v", vGlobalApplicationInfoList)

	return vGlobalApplicationInfoList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: DnsProbeStatus Node: Cluster PKG: Global
//////////////////////////////////////
func getGlobalClusterDnsProbeStatusResolver(obj *model.GlobalCluster, id *string) ([]*model.GlobalDNSProbeStatus, error) {
	log.Debugf("[getGlobalClusterDnsProbeStatusResolver]Parent Object %+v", obj)
	var vGlobalDNSProbeStatusList []*model.GlobalDNSProbeStatus
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterDnsProbeStatusResolver]Id %q", *id)
		vDNSProbeStatus, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDnsProbeStatus(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterDnsProbeStatusResolver]Error getting DnsProbeStatus node %q : %s", *id, err)
            return vGlobalDNSProbeStatusList, nil
        }
		dn := vDNSProbeStatus.DisplayName()
parentLabels := map[string]interface{}{"dnsprobestatuses.global.tsm.tanzu.vmware.com":dn}
vName := string(vDNSProbeStatus.Spec.Name)
vDomain := string(vDNSProbeStatus.Spec.Domain)
vSuccess := bool(vDNSProbeStatus.Spec.Success)
vUpdateTimestamp := string(vDNSProbeStatus.Spec.UpdateTimestamp)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDNSProbeStatus {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Domain: &vDomain,
	Success: &vSuccess,
	UpdateTimestamp: &vUpdateTimestamp,
	}
		vGlobalDNSProbeStatusList = append(vGlobalDNSProbeStatusList, ret)

		log.Debugf("[getGlobalClusterDnsProbeStatusResolver]Output DnsProbeStatus objects %v", vGlobalDNSProbeStatusList)

		return vGlobalDNSProbeStatusList, nil
	}

	log.Debug("[getGlobalClusterDnsProbeStatusResolver]Id is empty, process all DnsProbeStatuss")

	vDNSProbeStatusParent, err := nc.GlobalRoot().Inventory().GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterDnsProbeStatusResolver]Error getting parent node %s", err)
        return vGlobalDNSProbeStatusList, nil
    }
	vDNSProbeStatusAllObj, err := vDNSProbeStatusParent.GetAllDnsProbeStatus(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterDnsProbeStatusResolver]Error getting DnsProbeStatus objects %s", err)
        return vGlobalDNSProbeStatusList, nil
    }
	for _, i := range vDNSProbeStatusAllObj {
		vDNSProbeStatus, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDnsProbeStatus(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterDnsProbeStatusResolver]Error getting DnsProbeStatus node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDNSProbeStatus.DisplayName()
parentLabels := map[string]interface{}{"dnsprobestatuses.global.tsm.tanzu.vmware.com":dn}
vName := string(vDNSProbeStatus.Spec.Name)
vDomain := string(vDNSProbeStatus.Spec.Domain)
vSuccess := bool(vDNSProbeStatus.Spec.Success)
vUpdateTimestamp := string(vDNSProbeStatus.Spec.UpdateTimestamp)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDNSProbeStatus {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Domain: &vDomain,
	Success: &vSuccess,
	UpdateTimestamp: &vUpdateTimestamp,
	}
		vGlobalDNSProbeStatusList = append(vGlobalDNSProbeStatusList, ret)
	}

	log.Debugf("[getGlobalClusterDnsProbeStatusResolver]Output DnsProbeStatus objects %v", vGlobalDNSProbeStatusList)

	return vGlobalDNSProbeStatusList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: SecurityContextConstraints Node: Cluster PKG: Global
//////////////////////////////////////
func getGlobalClusterSecurityContextConstraintsResolver(obj *model.GlobalCluster, id *string) ([]*model.GlobalSecurityContextConstraints, error) {
	log.Debugf("[getGlobalClusterSecurityContextConstraintsResolver]Parent Object %+v", obj)
	var vGlobalSecurityContextConstraintsList []*model.GlobalSecurityContextConstraints
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterSecurityContextConstraintsResolver]Id %q", *id)
		vSecurityContextConstraints, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetSecurityContextConstraints(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterSecurityContextConstraintsResolver]Error getting SecurityContextConstraints node %q : %s", *id, err)
            return vGlobalSecurityContextConstraintsList, nil
        }
		dn := vSecurityContextConstraints.DisplayName()
parentLabels := map[string]interface{}{"securitycontextconstraintses.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vSecurityContextConstraints.Spec.Metadata)
vName := string(vSecurityContextConstraints.Spec.Name)
Groups, _ := json.Marshal(vSecurityContextConstraints.Spec.Groups)
GroupsData := string(Groups)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSecurityContextConstraints {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Name: &vName,
	Groups: &GroupsData,
	}
		vGlobalSecurityContextConstraintsList = append(vGlobalSecurityContextConstraintsList, ret)

		log.Debugf("[getGlobalClusterSecurityContextConstraintsResolver]Output SecurityContextConstraints objects %v", vGlobalSecurityContextConstraintsList)

		return vGlobalSecurityContextConstraintsList, nil
	}

	log.Debug("[getGlobalClusterSecurityContextConstraintsResolver]Id is empty, process all SecurityContextConstraintss")

	vSecurityContextConstraintsParent, err := nc.GlobalRoot().Inventory().GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterSecurityContextConstraintsResolver]Error getting parent node %s", err)
        return vGlobalSecurityContextConstraintsList, nil
    }
	vSecurityContextConstraintsAllObj, err := vSecurityContextConstraintsParent.GetAllSecurityContextConstraints(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterSecurityContextConstraintsResolver]Error getting SecurityContextConstraints objects %s", err)
        return vGlobalSecurityContextConstraintsList, nil
    }
	for _, i := range vSecurityContextConstraintsAllObj {
		vSecurityContextConstraints, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetSecurityContextConstraints(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterSecurityContextConstraintsResolver]Error getting SecurityContextConstraints node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSecurityContextConstraints.DisplayName()
parentLabels := map[string]interface{}{"securitycontextconstraintses.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vSecurityContextConstraints.Spec.Metadata)
vName := string(vSecurityContextConstraints.Spec.Name)
Groups, _ := json.Marshal(vSecurityContextConstraints.Spec.Groups)
GroupsData := string(Groups)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSecurityContextConstraints {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Name: &vName,
	Groups: &GroupsData,
	}
		vGlobalSecurityContextConstraintsList = append(vGlobalSecurityContextConstraintsList, ret)
	}

	log.Debugf("[getGlobalClusterSecurityContextConstraintsResolver]Output SecurityContextConstraints objects %v", vGlobalSecurityContextConstraintsList)

	return vGlobalSecurityContextConstraintsList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Domains Node: Cluster PKG: Global
//////////////////////////////////////
func getGlobalClusterDomainsResolver(obj *model.GlobalCluster, id *string) ([]*model.GlobalDomain, error) {
	log.Debugf("[getGlobalClusterDomainsResolver]Parent Object %+v", obj)
	var vGlobalDomainList []*model.GlobalDomain
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterDomainsResolver]Id %q", *id)
		vDomain, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterDomainsResolver]Error getting Domains node %q : %s", *id, err)
            return vGlobalDomainList, nil
        }
		dn := vDomain.DisplayName()
parentLabels := map[string]interface{}{"domains.global.tsm.tanzu.vmware.com":dn}
vName := string(vDomain.Spec.Name)
vEnviornmentType := string(vDomain.Spec.EnviornmentType)
vApiLink := string(vDomain.Spec.ApiLink)
vAnnotations := string(vDomain.Spec.Annotations)
vLabels := string(vDomain.Spec.Labels)
vMetadata := string(vDomain.Spec.Metadata)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	EnviornmentType: &vEnviornmentType,
	ApiLink: &vApiLink,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Metadata: &vMetadata,
	}
		vGlobalDomainList = append(vGlobalDomainList, ret)

		log.Debugf("[getGlobalClusterDomainsResolver]Output Domains objects %v", vGlobalDomainList)

		return vGlobalDomainList, nil
	}

	log.Debug("[getGlobalClusterDomainsResolver]Id is empty, process all Domainss")

	vDomainParent, err := nc.GlobalRoot().Inventory().GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterDomainsResolver]Error getting parent node %s", err)
        return vGlobalDomainList, nil
    }
	vDomainAllObj, err := vDomainParent.GetAllDomains(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterDomainsResolver]Error getting Domains objects %s", err)
        return vGlobalDomainList, nil
    }
	for _, i := range vDomainAllObj {
		vDomain, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterDomainsResolver]Error getting Domains node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDomain.DisplayName()
parentLabels := map[string]interface{}{"domains.global.tsm.tanzu.vmware.com":dn}
vName := string(vDomain.Spec.Name)
vEnviornmentType := string(vDomain.Spec.EnviornmentType)
vApiLink := string(vDomain.Spec.ApiLink)
vAnnotations := string(vDomain.Spec.Annotations)
vLabels := string(vDomain.Spec.Labels)
vMetadata := string(vDomain.Spec.Metadata)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	EnviornmentType: &vEnviornmentType,
	ApiLink: &vApiLink,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Metadata: &vMetadata,
	}
		vGlobalDomainList = append(vGlobalDomainList, ret)
	}

	log.Debugf("[getGlobalClusterDomainsResolver]Output Domains objects %v", vGlobalDomainList)

	return vGlobalDomainList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Nodes Node: Cluster PKG: Global
//////////////////////////////////////
func getGlobalClusterNodesResolver(obj *model.GlobalCluster, id *string) ([]*model.GlobalNode, error) {
	log.Debugf("[getGlobalClusterNodesResolver]Parent Object %+v", obj)
	var vGlobalNodeList []*model.GlobalNode
	if id != nil && *id != "" {
		log.Debugf("[getGlobalClusterNodesResolver]Id %q", *id)
		vNode, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetNodes(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalClusterNodesResolver]Error getting Nodes node %q : %s", *id, err)
            return vGlobalNodeList, nil
        }
		dn := vNode.DisplayName()
parentLabels := map[string]interface{}{"nodes.global.tsm.tanzu.vmware.com":dn}
vName := string(vNode.Spec.Name)
vExternalID := string(vNode.Spec.ExternalID)
vProviderID := string(vNode.Spec.ProviderID)
vArchitecture := string(vNode.Spec.Architecture)
vContainerRuntimeVersion := string(vNode.Spec.ContainerRuntimeVersion)
vKernelVersion := string(vNode.Spec.KernelVersion)
vOperatingSystem := string(vNode.Spec.OperatingSystem)
vOsImage := string(vNode.Spec.OsImage)
vSystemUUID := string(vNode.Spec.SystemUUID)
vHostName := string(vNode.Spec.HostName)
vApiLink := string(vNode.Spec.ApiLink)
vBootID := string(vNode.Spec.BootID)
vKubeletVersion := string(vNode.Spec.KubeletVersion)
vMachineID := string(vNode.Spec.MachineID)
vCreationTimestamp := string(vNode.Spec.CreationTimestamp)
vAnnotations := string(vNode.Spec.Annotations)
vLabels := string(vNode.Spec.Labels)
vUid := string(vNode.Spec.Uid)
vSpec := string(vNode.Spec.Spec)
vKStatus := string(vNode.Spec.KStatus)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNode {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ExternalID: &vExternalID,
	ProviderID: &vProviderID,
	Architecture: &vArchitecture,
	ContainerRuntimeVersion: &vContainerRuntimeVersion,
	KernelVersion: &vKernelVersion,
	OperatingSystem: &vOperatingSystem,
	OsImage: &vOsImage,
	SystemUUID: &vSystemUUID,
	HostName: &vHostName,
	ApiLink: &vApiLink,
	BootID: &vBootID,
	KubeletVersion: &vKubeletVersion,
	MachineID: &vMachineID,
	CreationTimestamp: &vCreationTimestamp,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Uid: &vUid,
	Spec: &vSpec,
	KStatus: &vKStatus,
	}
		vGlobalNodeList = append(vGlobalNodeList, ret)

		log.Debugf("[getGlobalClusterNodesResolver]Output Nodes objects %v", vGlobalNodeList)

		return vGlobalNodeList, nil
	}

	log.Debug("[getGlobalClusterNodesResolver]Id is empty, process all Nodess")

	vNodeParent, err := nc.GlobalRoot().Inventory().GetClusters(context.TODO(), getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalClusterNodesResolver]Error getting parent node %s", err)
        return vGlobalNodeList, nil
    }
	vNodeAllObj, err := vNodeParent.GetAllNodes(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalClusterNodesResolver]Error getting Nodes objects %s", err)
        return vGlobalNodeList, nil
    }
	for _, i := range vNodeAllObj {
		vNode, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetNodes(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalClusterNodesResolver]Error getting Nodes node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vNode.DisplayName()
parentLabels := map[string]interface{}{"nodes.global.tsm.tanzu.vmware.com":dn}
vName := string(vNode.Spec.Name)
vExternalID := string(vNode.Spec.ExternalID)
vProviderID := string(vNode.Spec.ProviderID)
vArchitecture := string(vNode.Spec.Architecture)
vContainerRuntimeVersion := string(vNode.Spec.ContainerRuntimeVersion)
vKernelVersion := string(vNode.Spec.KernelVersion)
vOperatingSystem := string(vNode.Spec.OperatingSystem)
vOsImage := string(vNode.Spec.OsImage)
vSystemUUID := string(vNode.Spec.SystemUUID)
vHostName := string(vNode.Spec.HostName)
vApiLink := string(vNode.Spec.ApiLink)
vBootID := string(vNode.Spec.BootID)
vKubeletVersion := string(vNode.Spec.KubeletVersion)
vMachineID := string(vNode.Spec.MachineID)
vCreationTimestamp := string(vNode.Spec.CreationTimestamp)
vAnnotations := string(vNode.Spec.Annotations)
vLabels := string(vNode.Spec.Labels)
vUid := string(vNode.Spec.Uid)
vSpec := string(vNode.Spec.Spec)
vKStatus := string(vNode.Spec.KStatus)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNode {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ExternalID: &vExternalID,
	ProviderID: &vProviderID,
	Architecture: &vArchitecture,
	ContainerRuntimeVersion: &vContainerRuntimeVersion,
	KernelVersion: &vKernelVersion,
	OperatingSystem: &vOperatingSystem,
	OsImage: &vOsImage,
	SystemUUID: &vSystemUUID,
	HostName: &vHostName,
	ApiLink: &vApiLink,
	BootID: &vBootID,
	KubeletVersion: &vKubeletVersion,
	MachineID: &vMachineID,
	CreationTimestamp: &vCreationTimestamp,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Uid: &vUid,
	Spec: &vSpec,
	KStatus: &vKStatus,
	}
		vGlobalNodeList = append(vGlobalNodeList, ret)
	}

	log.Debugf("[getGlobalClusterNodesResolver]Output Nodes objects %v", vGlobalNodeList)

	return vGlobalNodeList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: ResourceGroups Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigResourceGroupsResolver(obj *model.GlobalConfig, id *string) (*model.GlobalResourceGroup, error) {
	log.Debugf("[getGlobalConfigResourceGroupsResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigResourceGroupsResolver]Id %q", *id)
		vResourceGroup, err := nc.GlobalRoot().Config().GetResourceGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigResourceGroupsResolver]Error getting ResourceGroups node %q : %s", *id, err)
			return &model.GlobalResourceGroup{}, nil
		}
		dn := vResourceGroup.DisplayName()
parentLabels := map[string]interface{}{"resourcegroups.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalResourceGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalConfigResourceGroupsResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigResourceGroupsResolver]Id is empty, process all ResourceGroupss")
	vResourceGroupParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigResourceGroupsResolver]Failed to get parent node %s", err)
        return &model.GlobalResourceGroup{}, nil
    }
	vResourceGroup, err := vResourceGroupParent.GetResourceGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigResourceGroupsResolver]Error getting ResourceGroups node %s", err)
        return &model.GlobalResourceGroup{}, nil
    }
	dn := vResourceGroup.DisplayName()
parentLabels := map[string]interface{}{"resourcegroups.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalResourceGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalConfigResourceGroupsResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: GlobalNamespace Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigGlobalNamespaceResolver(obj *model.GlobalConfig, id *string) (*model.GlobalGlobalNamespace, error) {
	log.Debugf("[getGlobalConfigGlobalNamespaceResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigGlobalNamespaceResolver]Id %q", *id)
		vGlobalNamespace, err := nc.GlobalRoot().Config().GetGlobalNamespace(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigGlobalNamespaceResolver]Error getting GlobalNamespace node %q : %s", *id, err)
			return &model.GlobalGlobalNamespace{}, nil
		}
		dn := vGlobalNamespace.DisplayName()
parentLabels := map[string]interface{}{"globalnamespaces.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalGlobalNamespace {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalConfigGlobalNamespaceResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigGlobalNamespaceResolver]Id is empty, process all GlobalNamespaces")
	vGlobalNamespaceParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigGlobalNamespaceResolver]Failed to get parent node %s", err)
        return &model.GlobalGlobalNamespace{}, nil
    }
	vGlobalNamespace, err := vGlobalNamespaceParent.GetGlobalNamespace(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigGlobalNamespaceResolver]Error getting GlobalNamespace node %s", err)
        return &model.GlobalGlobalNamespace{}, nil
    }
	dn := vGlobalNamespace.DisplayName()
parentLabels := map[string]interface{}{"globalnamespaces.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalGlobalNamespace {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalConfigGlobalNamespaceResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Policy Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigPolicyResolver(obj *model.GlobalConfig, id *string) (*model.GlobalAccessControlPolicy, error) {
	log.Debugf("[getGlobalConfigPolicyResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigPolicyResolver]Id %q", *id)
		vAccessControlPolicy, err := nc.GlobalRoot().Config().GetPolicy(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigPolicyResolver]Error getting Policy node %q : %s", *id, err)
			return &model.GlobalAccessControlPolicy{}, nil
		}
		dn := vAccessControlPolicy.DisplayName()
parentLabels := map[string]interface{}{"accesscontrolpolicies.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalAccessControlPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalConfigPolicyResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigPolicyResolver]Id is empty, process all Policys")
	vAccessControlPolicyParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigPolicyResolver]Failed to get parent node %s", err)
        return &model.GlobalAccessControlPolicy{}, nil
    }
	vAccessControlPolicy, err := vAccessControlPolicyParent.GetPolicy(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigPolicyResolver]Error getting Policy node %s", err)
        return &model.GlobalAccessControlPolicy{}, nil
    }
	dn := vAccessControlPolicy.DisplayName()
parentLabels := map[string]interface{}{"accesscontrolpolicies.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalAccessControlPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalConfigPolicyResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Templates Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigTemplatesResolver(obj *model.GlobalConfig, id *string) (*model.GlobalTemplate, error) {
	log.Debugf("[getGlobalConfigTemplatesResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigTemplatesResolver]Id %q", *id)
		vTemplate, err := nc.GlobalRoot().Config().GetTemplates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigTemplatesResolver]Error getting Templates node %q : %s", *id, err)
			return &model.GlobalTemplate{}, nil
		}
		dn := vTemplate.DisplayName()
parentLabels := map[string]interface{}{"templates.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalConfigTemplatesResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigTemplatesResolver]Id is empty, process all Templatess")
	vTemplateParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigTemplatesResolver]Failed to get parent node %s", err)
        return &model.GlobalTemplate{}, nil
    }
	vTemplate, err := vTemplateParent.GetTemplates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigTemplatesResolver]Error getting Templates node %s", err)
        return &model.GlobalTemplate{}, nil
    }
	dn := vTemplate.DisplayName()
parentLabels := map[string]interface{}{"templates.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalConfigTemplatesResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: ProgressiveUpgrade Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigProgressiveUpgradeResolver(obj *model.GlobalConfig, id *string) (*model.GlobalProgressiveUpgrade, error) {
	log.Debugf("[getGlobalConfigProgressiveUpgradeResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigProgressiveUpgradeResolver]Id %q", *id)
		vProgressiveUpgrade, err := nc.GlobalRoot().Config().GetProgressiveUpgrade(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigProgressiveUpgradeResolver]Error getting ProgressiveUpgrade node %q : %s", *id, err)
			return &model.GlobalProgressiveUpgrade{}, nil
		}
		dn := vProgressiveUpgrade.DisplayName()
parentLabels := map[string]interface{}{"progressiveupgrades.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalProgressiveUpgrade {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalConfigProgressiveUpgradeResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigProgressiveUpgradeResolver]Id is empty, process all ProgressiveUpgrades")
	vProgressiveUpgradeParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigProgressiveUpgradeResolver]Failed to get parent node %s", err)
        return &model.GlobalProgressiveUpgrade{}, nil
    }
	vProgressiveUpgrade, err := vProgressiveUpgradeParent.GetProgressiveUpgrade(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigProgressiveUpgradeResolver]Error getting ProgressiveUpgrade node %s", err)
        return &model.GlobalProgressiveUpgrade{}, nil
    }
	dn := vProgressiveUpgrade.DisplayName()
parentLabels := map[string]interface{}{"progressiveupgrades.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalProgressiveUpgrade {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalConfigProgressiveUpgradeResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: ExternalPlugins Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigExternalPluginsResolver(obj *model.GlobalConfig, id *string) (*model.GlobalExternalPluginConfigFolder, error) {
	log.Debugf("[getGlobalConfigExternalPluginsResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigExternalPluginsResolver]Id %q", *id)
		vExternalPluginConfigFolder, err := nc.GlobalRoot().Config().GetExternalPlugins(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigExternalPluginsResolver]Error getting ExternalPlugins node %q : %s", *id, err)
			return &model.GlobalExternalPluginConfigFolder{}, nil
		}
		dn := vExternalPluginConfigFolder.DisplayName()
parentLabels := map[string]interface{}{"externalpluginconfigfolders.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalExternalPluginConfigFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalConfigExternalPluginsResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigExternalPluginsResolver]Id is empty, process all ExternalPluginss")
	vExternalPluginConfigFolderParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalPluginsResolver]Failed to get parent node %s", err)
        return &model.GlobalExternalPluginConfigFolder{}, nil
    }
	vExternalPluginConfigFolder, err := vExternalPluginConfigFolderParent.GetExternalPlugins(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalPluginsResolver]Error getting ExternalPlugins node %s", err)
        return &model.GlobalExternalPluginConfigFolder{}, nil
    }
	dn := vExternalPluginConfigFolder.DisplayName()
parentLabels := map[string]interface{}{"externalpluginconfigfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalExternalPluginConfigFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalConfigExternalPluginsResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: ExternalAuditStorage Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigExternalAuditStorageResolver(obj *model.GlobalConfig, id *string) (*model.GlobalExternalAuditStorage, error) {
	log.Debugf("[getGlobalConfigExternalAuditStorageResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigExternalAuditStorageResolver]Id %q", *id)
		vExternalAuditStorage, err := nc.GlobalRoot().Config().GetExternalAuditStorage(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigExternalAuditStorageResolver]Error getting ExternalAuditStorage node %q : %s", *id, err)
			return &model.GlobalExternalAuditStorage{}, nil
		}
		dn := vExternalAuditStorage.DisplayName()
parentLabels := map[string]interface{}{"externalauditstorages.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalAuditStorage.Spec.Config)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalExternalAuditStorage {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}

		log.Debugf("[getGlobalConfigExternalAuditStorageResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigExternalAuditStorageResolver]Id is empty, process all ExternalAuditStorages")
	vExternalAuditStorageParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalAuditStorageResolver]Failed to get parent node %s", err)
        return &model.GlobalExternalAuditStorage{}, nil
    }
	vExternalAuditStorage, err := vExternalAuditStorageParent.GetExternalAuditStorage(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalAuditStorageResolver]Error getting ExternalAuditStorage node %s", err)
        return &model.GlobalExternalAuditStorage{}, nil
    }
	dn := vExternalAuditStorage.DisplayName()
parentLabels := map[string]interface{}{"externalauditstorages.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalAuditStorage.Spec.Config)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalExternalAuditStorage {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}

	log.Debugf("[getGlobalConfigExternalAuditStorageResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: AutoscalerFolder Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigAutoscalerFolderResolver(obj *model.GlobalConfig, id *string) (*model.GlobalAutoscalerFolder, error) {
	log.Debugf("[getGlobalConfigAutoscalerFolderResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigAutoscalerFolderResolver]Id %q", *id)
		vAutoscalerFolder, err := nc.GlobalRoot().Config().GetAutoscalerFolder(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigAutoscalerFolderResolver]Error getting AutoscalerFolder node %q : %s", *id, err)
			return &model.GlobalAutoscalerFolder{}, nil
		}
		dn := vAutoscalerFolder.DisplayName()
parentLabels := map[string]interface{}{"autoscalerfolders.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalAutoscalerFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalConfigAutoscalerFolderResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigAutoscalerFolderResolver]Id is empty, process all AutoscalerFolders")
	vAutoscalerFolderParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigAutoscalerFolderResolver]Failed to get parent node %s", err)
        return &model.GlobalAutoscalerFolder{}, nil
    }
	vAutoscalerFolder, err := vAutoscalerFolderParent.GetAutoscalerFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigAutoscalerFolderResolver]Error getting AutoscalerFolder node %s", err)
        return &model.GlobalAutoscalerFolder{}, nil
    }
	dn := vAutoscalerFolder.DisplayName()
parentLabels := map[string]interface{}{"autoscalerfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalAutoscalerFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalConfigAutoscalerFolderResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Clusters Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigClustersResolver(obj *model.GlobalConfig, id *string) (*model.GlobalClusterConfigFolder, error) {
	log.Debugf("[getGlobalConfigClustersResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigClustersResolver]Id %q", *id)
		vClusterConfigFolder, err := nc.GlobalRoot().Config().GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigClustersResolver]Error getting Clusters node %q : %s", *id, err)
			return &model.GlobalClusterConfigFolder{}, nil
		}
		dn := vClusterConfigFolder.DisplayName()
parentLabels := map[string]interface{}{"clusterconfigfolders.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalClusterConfigFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalConfigClustersResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigClustersResolver]Id is empty, process all Clusterss")
	vClusterConfigFolderParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigClustersResolver]Failed to get parent node %s", err)
        return &model.GlobalClusterConfigFolder{}, nil
    }
	vClusterConfigFolder, err := vClusterConfigFolderParent.GetClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigClustersResolver]Error getting Clusters node %s", err)
        return &model.GlobalClusterConfigFolder{}, nil
    }
	dn := vClusterConfigFolder.DisplayName()
parentLabels := map[string]interface{}{"clusterconfigfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalClusterConfigFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalConfigClustersResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: ServiceLevelObjective Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigServiceLevelObjectiveResolver(obj *model.GlobalConfig, id *string) (*model.GlobalServiceLevelObjectiveFolder, error) {
	log.Debugf("[getGlobalConfigServiceLevelObjectiveResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalConfigServiceLevelObjectiveResolver]Id %q", *id)
		vServiceLevelObjectiveFolder, err := nc.GlobalRoot().Config().GetServiceLevelObjective(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigServiceLevelObjectiveResolver]Error getting ServiceLevelObjective node %q : %s", *id, err)
			return &model.GlobalServiceLevelObjectiveFolder{}, nil
		}
		dn := vServiceLevelObjectiveFolder.DisplayName()
parentLabels := map[string]interface{}{"servicelevelobjectivefolders.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalServiceLevelObjectiveFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalConfigServiceLevelObjectiveResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalConfigServiceLevelObjectiveResolver]Id is empty, process all ServiceLevelObjectives")
	vServiceLevelObjectiveFolderParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigServiceLevelObjectiveResolver]Failed to get parent node %s", err)
        return &model.GlobalServiceLevelObjectiveFolder{}, nil
    }
	vServiceLevelObjectiveFolder, err := vServiceLevelObjectiveFolderParent.GetServiceLevelObjective(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigServiceLevelObjectiveResolver]Error getting ServiceLevelObjective node %s", err)
        return &model.GlobalServiceLevelObjectiveFolder{}, nil
    }
	dn := vServiceLevelObjectiveFolder.DisplayName()
parentLabels := map[string]interface{}{"servicelevelobjectivefolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalServiceLevelObjectiveFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalConfigServiceLevelObjectiveResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Certificates Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigCertificatesResolver(obj *model.GlobalConfig, id *string) ([]*model.GlobalCertificateConfigN, error) {
	log.Debugf("[getGlobalConfigCertificatesResolver]Parent Object %+v", obj)
	var vGlobalCertificateConfigNList []*model.GlobalCertificateConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalConfigCertificatesResolver]Id %q", *id)
		vCertificateConfigN, err := nc.GlobalRoot().Config().GetCertificates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigCertificatesResolver]Error getting Certificates node %q : %s", *id, err)
            return vGlobalCertificateConfigNList, nil
        }
		dn := vCertificateConfigN.DisplayName()
parentLabels := map[string]interface{}{"certificateconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vCertificateConfigN.Spec.ProjectId)
vBeginsOn := string(vCertificateConfigN.Spec.BeginsOn)
vExpiresOn := string(vCertificateConfigN.Spec.ExpiresOn)
vIssuedToCN := string(vCertificateConfigN.Spec.IssuedToCN)
vConfig := string(vCertificateConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	BeginsOn: &vBeginsOn,
	ExpiresOn: &vExpiresOn,
	IssuedToCN: &vIssuedToCN,
	Config: &vConfig,
	}
		vGlobalCertificateConfigNList = append(vGlobalCertificateConfigNList, ret)

		log.Debugf("[getGlobalConfigCertificatesResolver]Output Certificates objects %v", vGlobalCertificateConfigNList)

		return vGlobalCertificateConfigNList, nil
	}

	log.Debug("[getGlobalConfigCertificatesResolver]Id is empty, process all Certificatess")

	vCertificateConfigNParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigCertificatesResolver]Error getting parent node %s", err)
        return vGlobalCertificateConfigNList, nil
    }
	vCertificateConfigNAllObj, err := vCertificateConfigNParent.GetAllCertificates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigCertificatesResolver]Error getting Certificates objects %s", err)
        return vGlobalCertificateConfigNList, nil
    }
	for _, i := range vCertificateConfigNAllObj {
		vCertificateConfigN, err := nc.GlobalRoot().Config().GetCertificates(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalConfigCertificatesResolver]Error getting Certificates node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vCertificateConfigN.DisplayName()
parentLabels := map[string]interface{}{"certificateconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vCertificateConfigN.Spec.ProjectId)
vBeginsOn := string(vCertificateConfigN.Spec.BeginsOn)
vExpiresOn := string(vCertificateConfigN.Spec.ExpiresOn)
vIssuedToCN := string(vCertificateConfigN.Spec.IssuedToCN)
vConfig := string(vCertificateConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	BeginsOn: &vBeginsOn,
	ExpiresOn: &vExpiresOn,
	IssuedToCN: &vIssuedToCN,
	Config: &vConfig,
	}
		vGlobalCertificateConfigNList = append(vGlobalCertificateConfigNList, ret)
	}

	log.Debugf("[getGlobalConfigCertificatesResolver]Output Certificates objects %v", vGlobalCertificateConfigNList)

	return vGlobalCertificateConfigNList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ExternalAccounts Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigExternalAccountsResolver(obj *model.GlobalConfig, id *string) ([]*model.GlobalExternalAccountConfigN, error) {
	log.Debugf("[getGlobalConfigExternalAccountsResolver]Parent Object %+v", obj)
	var vGlobalExternalAccountConfigNList []*model.GlobalExternalAccountConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalConfigExternalAccountsResolver]Id %q", *id)
		vExternalAccountConfigN, err := nc.GlobalRoot().Config().GetExternalAccounts(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigExternalAccountsResolver]Error getting ExternalAccounts node %q : %s", *id, err)
            return vGlobalExternalAccountConfigNList, nil
        }
		dn := vExternalAccountConfigN.DisplayName()
parentLabels := map[string]interface{}{"externalaccountconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalAccountConfigN.Spec.Config)
vProxyConfig := string(vExternalAccountConfigN.Spec.ProxyConfig)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalAccountConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	ProxyConfig: &vProxyConfig,
	}
		vGlobalExternalAccountConfigNList = append(vGlobalExternalAccountConfigNList, ret)

		log.Debugf("[getGlobalConfigExternalAccountsResolver]Output ExternalAccounts objects %v", vGlobalExternalAccountConfigNList)

		return vGlobalExternalAccountConfigNList, nil
	}

	log.Debug("[getGlobalConfigExternalAccountsResolver]Id is empty, process all ExternalAccountss")

	vExternalAccountConfigNParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalAccountsResolver]Error getting parent node %s", err)
        return vGlobalExternalAccountConfigNList, nil
    }
	vExternalAccountConfigNAllObj, err := vExternalAccountConfigNParent.GetAllExternalAccounts(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalAccountsResolver]Error getting ExternalAccounts objects %s", err)
        return vGlobalExternalAccountConfigNList, nil
    }
	for _, i := range vExternalAccountConfigNAllObj {
		vExternalAccountConfigN, err := nc.GlobalRoot().Config().GetExternalAccounts(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalConfigExternalAccountsResolver]Error getting ExternalAccounts node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalAccountConfigN.DisplayName()
parentLabels := map[string]interface{}{"externalaccountconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalAccountConfigN.Spec.Config)
vProxyConfig := string(vExternalAccountConfigN.Spec.ProxyConfig)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalAccountConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	ProxyConfig: &vProxyConfig,
	}
		vGlobalExternalAccountConfigNList = append(vGlobalExternalAccountConfigNList, ret)
	}

	log.Debugf("[getGlobalConfigExternalAccountsResolver]Output ExternalAccounts objects %v", vGlobalExternalAccountConfigNList)

	return vGlobalExternalAccountConfigNList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ExternalDNS Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigExternalDNSResolver(obj *model.GlobalConfig, id *string) ([]*model.GlobalExternalDNSConfigN, error) {
	log.Debugf("[getGlobalConfigExternalDNSResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSConfigNList []*model.GlobalExternalDNSConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalConfigExternalDNSResolver]Id %q", *id)
		vExternalDNSConfigN, err := nc.GlobalRoot().Config().GetExternalDNS(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigExternalDNSResolver]Error getting ExternalDNS node %q : %s", *id, err)
            return vGlobalExternalDNSConfigNList, nil
        }
		dn := vExternalDNSConfigN.DisplayName()
parentLabels := map[string]interface{}{"externaldnsconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalDNSConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalExternalDNSConfigNList = append(vGlobalExternalDNSConfigNList, ret)

		log.Debugf("[getGlobalConfigExternalDNSResolver]Output ExternalDNS objects %v", vGlobalExternalDNSConfigNList)

		return vGlobalExternalDNSConfigNList, nil
	}

	log.Debug("[getGlobalConfigExternalDNSResolver]Id is empty, process all ExternalDNSs")

	vExternalDNSConfigNParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalDNSResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSConfigNList, nil
    }
	vExternalDNSConfigNAllObj, err := vExternalDNSConfigNParent.GetAllExternalDNS(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalDNSResolver]Error getting ExternalDNS objects %s", err)
        return vGlobalExternalDNSConfigNList, nil
    }
	for _, i := range vExternalDNSConfigNAllObj {
		vExternalDNSConfigN, err := nc.GlobalRoot().Config().GetExternalDNS(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalConfigExternalDNSResolver]Error getting ExternalDNS node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalDNSConfigN.DisplayName()
parentLabels := map[string]interface{}{"externaldnsconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalDNSConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalExternalDNSConfigNList = append(vGlobalExternalDNSConfigNList, ret)
	}

	log.Debugf("[getGlobalConfigExternalDNSResolver]Output ExternalDNS objects %v", vGlobalExternalDNSConfigNList)

	return vGlobalExternalDNSConfigNList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ExternalLB Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigExternalLBResolver(obj *model.GlobalConfig, id *string) ([]*model.GlobalExternalLBConfigN, error) {
	log.Debugf("[getGlobalConfigExternalLBResolver]Parent Object %+v", obj)
	var vGlobalExternalLBConfigNList []*model.GlobalExternalLBConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalConfigExternalLBResolver]Id %q", *id)
		vExternalLBConfigN, err := nc.GlobalRoot().Config().GetExternalLB(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigExternalLBResolver]Error getting ExternalLB node %q : %s", *id, err)
            return vGlobalExternalLBConfigNList, nil
        }
		dn := vExternalLBConfigN.DisplayName()
parentLabels := map[string]interface{}{"externallbconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalLBConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalLBConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalExternalLBConfigNList = append(vGlobalExternalLBConfigNList, ret)

		log.Debugf("[getGlobalConfigExternalLBResolver]Output ExternalLB objects %v", vGlobalExternalLBConfigNList)

		return vGlobalExternalLBConfigNList, nil
	}

	log.Debug("[getGlobalConfigExternalLBResolver]Id is empty, process all ExternalLBs")

	vExternalLBConfigNParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalLBResolver]Error getting parent node %s", err)
        return vGlobalExternalLBConfigNList, nil
    }
	vExternalLBConfigNAllObj, err := vExternalLBConfigNParent.GetAllExternalLB(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigExternalLBResolver]Error getting ExternalLB objects %s", err)
        return vGlobalExternalLBConfigNList, nil
    }
	for _, i := range vExternalLBConfigNAllObj {
		vExternalLBConfigN, err := nc.GlobalRoot().Config().GetExternalLB(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalConfigExternalLBResolver]Error getting ExternalLB node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalLBConfigN.DisplayName()
parentLabels := map[string]interface{}{"externallbconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalLBConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalLBConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalExternalLBConfigNList = append(vGlobalExternalLBConfigNList, ret)
	}

	log.Debugf("[getGlobalConfigExternalLBResolver]Output ExternalLB objects %v", vGlobalExternalLBConfigNList)

	return vGlobalExternalLBConfigNList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: FeatureFlags Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigFeatureFlagsResolver(obj *model.GlobalConfig, id *string) ([]*model.GlobalFeatureFlag, error) {
	log.Debugf("[getGlobalConfigFeatureFlagsResolver]Parent Object %+v", obj)
	var vGlobalFeatureFlagList []*model.GlobalFeatureFlag
	if id != nil && *id != "" {
		log.Debugf("[getGlobalConfigFeatureFlagsResolver]Id %q", *id)
		vFeatureFlag, err := nc.GlobalRoot().Config().GetFeatureFlags(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigFeatureFlagsResolver]Error getting FeatureFlags node %q : %s", *id, err)
            return vGlobalFeatureFlagList, nil
        }
		dn := vFeatureFlag.DisplayName()
parentLabels := map[string]interface{}{"featureflags.global.tsm.tanzu.vmware.com":dn}
vName := string(vFeatureFlag.Spec.Name)
vDescription := string(vFeatureFlag.Spec.Description)
vEnable := bool(vFeatureFlag.Spec.Enable)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalFeatureFlag {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Description: &vDescription,
	Enable: &vEnable,
	}
		vGlobalFeatureFlagList = append(vGlobalFeatureFlagList, ret)

		log.Debugf("[getGlobalConfigFeatureFlagsResolver]Output FeatureFlags objects %v", vGlobalFeatureFlagList)

		return vGlobalFeatureFlagList, nil
	}

	log.Debug("[getGlobalConfigFeatureFlagsResolver]Id is empty, process all FeatureFlagss")

	vFeatureFlagParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigFeatureFlagsResolver]Error getting parent node %s", err)
        return vGlobalFeatureFlagList, nil
    }
	vFeatureFlagAllObj, err := vFeatureFlagParent.GetAllFeatureFlags(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigFeatureFlagsResolver]Error getting FeatureFlags objects %s", err)
        return vGlobalFeatureFlagList, nil
    }
	for _, i := range vFeatureFlagAllObj {
		vFeatureFlag, err := nc.GlobalRoot().Config().GetFeatureFlags(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalConfigFeatureFlagsResolver]Error getting FeatureFlags node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vFeatureFlag.DisplayName()
parentLabels := map[string]interface{}{"featureflags.global.tsm.tanzu.vmware.com":dn}
vName := string(vFeatureFlag.Spec.Name)
vDescription := string(vFeatureFlag.Spec.Description)
vEnable := bool(vFeatureFlag.Spec.Enable)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalFeatureFlag {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Description: &vDescription,
	Enable: &vEnable,
	}
		vGlobalFeatureFlagList = append(vGlobalFeatureFlagList, ret)
	}

	log.Debugf("[getGlobalConfigFeatureFlagsResolver]Output FeatureFlags objects %v", vGlobalFeatureFlagList)

	return vGlobalFeatureFlagList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Projects Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigProjectsResolver(obj *model.GlobalConfig, id *string) ([]*model.GlobalProject, error) {
	log.Debugf("[getGlobalConfigProjectsResolver]Parent Object %+v", obj)
	var vGlobalProjectList []*model.GlobalProject
	if id != nil && *id != "" {
		log.Debugf("[getGlobalConfigProjectsResolver]Id %q", *id)
		vProject, err := nc.GlobalRoot().Config().GetProjects(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigProjectsResolver]Error getting Projects node %q : %s", *id, err)
            return vGlobalProjectList, nil
        }
		dn := vProject.DisplayName()
parentLabels := map[string]interface{}{"projects.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vProject.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalProject {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	}
		vGlobalProjectList = append(vGlobalProjectList, ret)

		log.Debugf("[getGlobalConfigProjectsResolver]Output Projects objects %v", vGlobalProjectList)

		return vGlobalProjectList, nil
	}

	log.Debug("[getGlobalConfigProjectsResolver]Id is empty, process all Projectss")

	vProjectParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigProjectsResolver]Error getting parent node %s", err)
        return vGlobalProjectList, nil
    }
	vProjectAllObj, err := vProjectParent.GetAllProjects(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigProjectsResolver]Error getting Projects objects %s", err)
        return vGlobalProjectList, nil
    }
	for _, i := range vProjectAllObj {
		vProject, err := nc.GlobalRoot().Config().GetProjects(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalConfigProjectsResolver]Error getting Projects node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vProject.DisplayName()
parentLabels := map[string]interface{}{"projects.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vProject.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalProject {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	}
		vGlobalProjectList = append(vGlobalProjectList, ret)
	}

	log.Debugf("[getGlobalConfigProjectsResolver]Output Projects objects %v", vGlobalProjectList)

	return vGlobalProjectList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceDirectory Node: Config PKG: Global
//////////////////////////////////////
func getGlobalConfigServiceDirectoryResolver(obj *model.GlobalConfig, id *string) ([]*model.GlobalServiceDirectoryN, error) {
	log.Debugf("[getGlobalConfigServiceDirectoryResolver]Parent Object %+v", obj)
	var vGlobalServiceDirectoryNList []*model.GlobalServiceDirectoryN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalConfigServiceDirectoryResolver]Id %q", *id)
		vServiceDirectoryN, err := nc.GlobalRoot().Config().GetServiceDirectory(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalConfigServiceDirectoryResolver]Error getting ServiceDirectory node %q : %s", *id, err)
            return vGlobalServiceDirectoryNList, nil
        }
		dn := vServiceDirectoryN.DisplayName()
parentLabels := map[string]interface{}{"servicedirectoryns.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vServiceDirectoryN.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDirectoryN {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	}
		vGlobalServiceDirectoryNList = append(vGlobalServiceDirectoryNList, ret)

		log.Debugf("[getGlobalConfigServiceDirectoryResolver]Output ServiceDirectory objects %v", vGlobalServiceDirectoryNList)

		return vGlobalServiceDirectoryNList, nil
	}

	log.Debug("[getGlobalConfigServiceDirectoryResolver]Id is empty, process all ServiceDirectorys")

	vServiceDirectoryNParent, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigServiceDirectoryResolver]Error getting parent node %s", err)
        return vGlobalServiceDirectoryNList, nil
    }
	vServiceDirectoryNAllObj, err := vServiceDirectoryNParent.GetAllServiceDirectory(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalConfigServiceDirectoryResolver]Error getting ServiceDirectory objects %s", err)
        return vGlobalServiceDirectoryNList, nil
    }
	for _, i := range vServiceDirectoryNAllObj {
		vServiceDirectoryN, err := nc.GlobalRoot().Config().GetServiceDirectory(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalConfigServiceDirectoryResolver]Error getting ServiceDirectory node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceDirectoryN.DisplayName()
parentLabels := map[string]interface{}{"servicedirectoryns.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vServiceDirectoryN.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDirectoryN {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	}
		vGlobalServiceDirectoryNList = append(vGlobalServiceDirectoryNList, ret)
	}

	log.Debugf("[getGlobalConfigServiceDirectoryResolver]Output ServiceDirectory objects %v", vGlobalServiceDirectoryNList)

	return vGlobalServiceDirectoryNList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Versions Node: DataFolderDomainService PKG: Global
//////////////////////////////////////
func getGlobalDataFolderDomainServiceVersionsResolver(obj *model.GlobalDataFolderDomainService, id *string) ([]*model.GlobalDataFolderDomainServiceVersion, error) {
	log.Debugf("[getGlobalDataFolderDomainServiceVersionsResolver]Parent Object %+v", obj)
	var vGlobalDataFolderDomainServiceVersionList []*model.GlobalDataFolderDomainServiceVersion
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDataFolderDomainServiceVersionsResolver]Id %q", *id)
		vDataFolderDomainServiceVersion, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Service(getParentName(obj.ParentLabels, "datafolderdomainservices.global.tsm.tanzu.vmware.com")).GetVersions(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDataFolderDomainServiceVersionsResolver]Error getting Versions node %q : %s", *id, err)
            return vGlobalDataFolderDomainServiceVersionList, nil
        }
		dn := vDataFolderDomainServiceVersion.DisplayName()
parentLabels := map[string]interface{}{"datafolderdomainserviceversions.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDataFolderDomainServiceVersion {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalDataFolderDomainServiceVersionList = append(vGlobalDataFolderDomainServiceVersionList, ret)

		log.Debugf("[getGlobalDataFolderDomainServiceVersionsResolver]Output Versions objects %v", vGlobalDataFolderDomainServiceVersionList)

		return vGlobalDataFolderDomainServiceVersionList, nil
	}

	log.Debug("[getGlobalDataFolderDomainServiceVersionsResolver]Id is empty, process all Versionss")

	vDataFolderDomainServiceVersionParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).GetService(context.TODO(), getParentName(obj.ParentLabels, "datafolderdomainservices.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDataFolderDomainServiceVersionsResolver]Error getting parent node %s", err)
        return vGlobalDataFolderDomainServiceVersionList, nil
    }
	vDataFolderDomainServiceVersionAllObj, err := vDataFolderDomainServiceVersionParent.GetAllVersions(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDataFolderDomainServiceVersionsResolver]Error getting Versions objects %s", err)
        return vGlobalDataFolderDomainServiceVersionList, nil
    }
	for _, i := range vDataFolderDomainServiceVersionAllObj {
		vDataFolderDomainServiceVersion, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Service(getParentName(obj.ParentLabels, "datafolderdomainservices.global.tsm.tanzu.vmware.com")).GetVersions(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDataFolderDomainServiceVersionsResolver]Error getting Versions node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDataFolderDomainServiceVersion.DisplayName()
parentLabels := map[string]interface{}{"datafolderdomainserviceversions.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDataFolderDomainServiceVersion {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalDataFolderDomainServiceVersionList = append(vGlobalDataFolderDomainServiceVersionList, ret)
	}

	log.Debugf("[getGlobalDataFolderDomainServiceVersionsResolver]Output Versions objects %v", vGlobalDataFolderDomainServiceVersionList)

	return vGlobalDataFolderDomainServiceVersionList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Cluster Node: DataFolderDomain PKG: Global
//////////////////////////////////////
func getGlobalDataFolderDomainClusterResolver(obj *model.GlobalDataFolderDomain, id *string) (*model.GlobalDataFolderDomainCluster, error) {
	log.Debugf("[getGlobalDataFolderDomainClusterResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalDataFolderDomainClusterResolver]Id %q", *id)
		vDataFolderDomainCluster, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).GetCluster(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDataFolderDomainClusterResolver]Error getting Cluster node %q : %s", *id, err)
			return &model.GlobalDataFolderDomainCluster{}, nil
		}
		dn := vDataFolderDomainCluster.DisplayName()
parentLabels := map[string]interface{}{"datafolderdomainclusters.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalDataFolderDomainCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalDataFolderDomainClusterResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalDataFolderDomainClusterResolver]Id is empty, process all Clusters")
	vDataFolderDomainClusterParent, err := nc.GlobalRoot().Runtime().DataFolder().GetDomain(context.TODO(), getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDataFolderDomainClusterResolver]Failed to get parent node %s", err)
        return &model.GlobalDataFolderDomainCluster{}, nil
    }
	vDataFolderDomainCluster, err := vDataFolderDomainClusterParent.GetCluster(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDataFolderDomainClusterResolver]Error getting Cluster node %s", err)
        return &model.GlobalDataFolderDomainCluster{}, nil
    }
	dn := vDataFolderDomainCluster.DisplayName()
parentLabels := map[string]interface{}{"datafolderdomainclusters.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalDataFolderDomainCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalDataFolderDomainClusterResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: Database Node: DataFolderDomain PKG: Global
//////////////////////////////////////
func getGlobalDataFolderDomainDatabaseResolver(obj *model.GlobalDataFolderDomain) (*model.GlobalDatabase, error) {
	log.Debugf("[getGlobalDataFolderDomainDatabaseResolver]Parent Object %+v", obj)
	vDatabase, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).GetDatabase(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDataFolderDomainDatabaseResolver]Error getting DataFolderDomain node %s", err)
        return &model.GlobalDatabase{}, nil
    }
	dn := vDatabase.DisplayName()
parentLabels := map[string]interface{}{"databases.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalDatabase {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalDataFolderDomainDatabaseResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Service Node: DataFolderDomain PKG: Global
//////////////////////////////////////
func getGlobalDataFolderDomainServiceResolver(obj *model.GlobalDataFolderDomain, id *string) ([]*model.GlobalDataFolderDomainService, error) {
	log.Debugf("[getGlobalDataFolderDomainServiceResolver]Parent Object %+v", obj)
	var vGlobalDataFolderDomainServiceList []*model.GlobalDataFolderDomainService
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDataFolderDomainServiceResolver]Id %q", *id)
		vDataFolderDomainService, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).GetService(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDataFolderDomainServiceResolver]Error getting Service node %q : %s", *id, err)
            return vGlobalDataFolderDomainServiceList, nil
        }
		dn := vDataFolderDomainService.DisplayName()
parentLabels := map[string]interface{}{"datafolderdomainservices.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDataFolderDomainService {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalDataFolderDomainServiceList = append(vGlobalDataFolderDomainServiceList, ret)

		log.Debugf("[getGlobalDataFolderDomainServiceResolver]Output Service objects %v", vGlobalDataFolderDomainServiceList)

		return vGlobalDataFolderDomainServiceList, nil
	}

	log.Debug("[getGlobalDataFolderDomainServiceResolver]Id is empty, process all Services")

	vDataFolderDomainServiceParent, err := nc.GlobalRoot().Runtime().DataFolder().GetDomain(context.TODO(), getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDataFolderDomainServiceResolver]Error getting parent node %s", err)
        return vGlobalDataFolderDomainServiceList, nil
    }
	vDataFolderDomainServiceAllObj, err := vDataFolderDomainServiceParent.GetAllService(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDataFolderDomainServiceResolver]Error getting Service objects %s", err)
        return vGlobalDataFolderDomainServiceList, nil
    }
	for _, i := range vDataFolderDomainServiceAllObj {
		vDataFolderDomainService, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).GetService(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDataFolderDomainServiceResolver]Error getting Service node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDataFolderDomainService.DisplayName()
parentLabels := map[string]interface{}{"datafolderdomainservices.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDataFolderDomainService {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalDataFolderDomainServiceList = append(vGlobalDataFolderDomainServiceList, ret)
	}

	log.Debugf("[getGlobalDataFolderDomainServiceResolver]Output Service objects %v", vGlobalDataFolderDomainServiceList)

	return vGlobalDataFolderDomainServiceList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Domain Node: DataFolder PKG: Global
//////////////////////////////////////
func getGlobalDataFolderDomainResolver(obj *model.GlobalDataFolder, id *string) (*model.GlobalDataFolderDomain, error) {
	log.Debugf("[getGlobalDataFolderDomainResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalDataFolderDomainResolver]Id %q", *id)
		vDataFolderDomain, err := nc.GlobalRoot().Runtime().DataFolder().GetDomain(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDataFolderDomainResolver]Error getting Domain node %q : %s", *id, err)
			return &model.GlobalDataFolderDomain{}, nil
		}
		dn := vDataFolderDomain.DisplayName()
parentLabels := map[string]interface{}{"datafolderdomains.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalDataFolderDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalDataFolderDomainResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalDataFolderDomainResolver]Id is empty, process all Domains")
	vDataFolderDomainParent, err := nc.GlobalRoot().Runtime().GetDataFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDataFolderDomainResolver]Failed to get parent node %s", err)
        return &model.GlobalDataFolderDomain{}, nil
    }
	vDataFolderDomain, err := vDataFolderDomainParent.GetDomain(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDataFolderDomainResolver]Error getting Domain node %s", err)
        return &model.GlobalDataFolderDomain{}, nil
    }
	dn := vDataFolderDomain.DisplayName()
parentLabels := map[string]interface{}{"datafolderdomains.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalDataFolderDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalDataFolderDomainResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Tables Node: Database PKG: Global
//////////////////////////////////////
func getGlobalDatabaseTablesResolver(obj *model.GlobalDatabase, id *string) ([]*model.GlobalTable, error) {
	log.Debugf("[getGlobalDatabaseTablesResolver]Parent Object %+v", obj)
	var vGlobalTableList []*model.GlobalTable
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDatabaseTablesResolver]Id %q", *id)
		vTable, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetTables(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDatabaseTablesResolver]Error getting Tables node %q : %s", *id, err)
            return vGlobalTableList, nil
        }
		dn := vTable.DisplayName()
parentLabels := map[string]interface{}{"tables.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTable {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalTableList = append(vGlobalTableList, ret)

		log.Debugf("[getGlobalDatabaseTablesResolver]Output Tables objects %v", vGlobalTableList)

		return vGlobalTableList, nil
	}

	log.Debug("[getGlobalDatabaseTablesResolver]Id is empty, process all Tabless")

	vTableParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).GetDatabase(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDatabaseTablesResolver]Error getting parent node %s", err)
        return vGlobalTableList, nil
    }
	vTableAllObj, err := vTableParent.GetAllTables(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDatabaseTablesResolver]Error getting Tables objects %s", err)
        return vGlobalTableList, nil
    }
	for _, i := range vTableAllObj {
		vTable, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetTables(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDatabaseTablesResolver]Error getting Tables node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vTable.DisplayName()
parentLabels := map[string]interface{}{"tables.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTable {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalTableList = append(vGlobalTableList, ret)
	}

	log.Debugf("[getGlobalDatabaseTablesResolver]Output Tables objects %v", vGlobalTableList)

	return vGlobalTableList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Directories Node: Database PKG: Global
//////////////////////////////////////
func getGlobalDatabaseDirectoriesResolver(obj *model.GlobalDatabase, id *string) ([]*model.GlobalDirectory, error) {
	log.Debugf("[getGlobalDatabaseDirectoriesResolver]Parent Object %+v", obj)
	var vGlobalDirectoryList []*model.GlobalDirectory
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDatabaseDirectoriesResolver]Id %q", *id)
		vDirectory, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetDirectories(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDatabaseDirectoriesResolver]Error getting Directories node %q : %s", *id, err)
            return vGlobalDirectoryList, nil
        }
		dn := vDirectory.DisplayName()
parentLabels := map[string]interface{}{"directories.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDirectory {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalDirectoryList = append(vGlobalDirectoryList, ret)

		log.Debugf("[getGlobalDatabaseDirectoriesResolver]Output Directories objects %v", vGlobalDirectoryList)

		return vGlobalDirectoryList, nil
	}

	log.Debug("[getGlobalDatabaseDirectoriesResolver]Id is empty, process all Directoriess")

	vDirectoryParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).GetDatabase(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDatabaseDirectoriesResolver]Error getting parent node %s", err)
        return vGlobalDirectoryList, nil
    }
	vDirectoryAllObj, err := vDirectoryParent.GetAllDirectories(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDatabaseDirectoriesResolver]Error getting Directories objects %s", err)
        return vGlobalDirectoryList, nil
    }
	for _, i := range vDirectoryAllObj {
		vDirectory, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetDirectories(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDatabaseDirectoriesResolver]Error getting Directories node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDirectory.DisplayName()
parentLabels := map[string]interface{}{"directories.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDirectory {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalDirectoryList = append(vGlobalDirectoryList, ret)
	}

	log.Debugf("[getGlobalDatabaseDirectoriesResolver]Output Directories objects %v", vGlobalDirectoryList)

	return vGlobalDirectoryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Buckets Node: Database PKG: Global
//////////////////////////////////////
func getGlobalDatabaseBucketsResolver(obj *model.GlobalDatabase, id *string) ([]*model.GlobalBucket, error) {
	log.Debugf("[getGlobalDatabaseBucketsResolver]Parent Object %+v", obj)
	var vGlobalBucketList []*model.GlobalBucket
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDatabaseBucketsResolver]Id %q", *id)
		vBucket, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetBuckets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDatabaseBucketsResolver]Error getting Buckets node %q : %s", *id, err)
            return vGlobalBucketList, nil
        }
		dn := vBucket.DisplayName()
parentLabels := map[string]interface{}{"buckets.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalBucket {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalBucketList = append(vGlobalBucketList, ret)

		log.Debugf("[getGlobalDatabaseBucketsResolver]Output Buckets objects %v", vGlobalBucketList)

		return vGlobalBucketList, nil
	}

	log.Debug("[getGlobalDatabaseBucketsResolver]Id is empty, process all Bucketss")

	vBucketParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).GetDatabase(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDatabaseBucketsResolver]Error getting parent node %s", err)
        return vGlobalBucketList, nil
    }
	vBucketAllObj, err := vBucketParent.GetAllBuckets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDatabaseBucketsResolver]Error getting Buckets objects %s", err)
        return vGlobalBucketList, nil
    }
	for _, i := range vBucketAllObj {
		vBucket, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetBuckets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDatabaseBucketsResolver]Error getting Buckets node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vBucket.DisplayName()
parentLabels := map[string]interface{}{"buckets.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalBucket {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalBucketList = append(vGlobalBucketList, ret)
	}

	log.Debugf("[getGlobalDatabaseBucketsResolver]Output Buckets objects %v", vGlobalBucketList)

	return vGlobalBucketList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Zones Node: DCRegion PKG: Global
//////////////////////////////////////
func getGlobalDCRegionZonesResolver(obj *model.GlobalDCRegion, id *string) ([]*model.GlobalDCZone, error) {
	log.Debugf("[getGlobalDCRegionZonesResolver]Parent Object %+v", obj)
	var vGlobalDCZoneList []*model.GlobalDCZone
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDCRegionZonesResolver]Id %q", *id)
		vDCZone, err := nc.GlobalRoot().Inventory().Regions(getParentName(obj.ParentLabels, "dcregions.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDCRegionZonesResolver]Error getting Zones node %q : %s", *id, err)
            return vGlobalDCZoneList, nil
        }
		dn := vDCZone.DisplayName()
parentLabels := map[string]interface{}{"dczones.global.tsm.tanzu.vmware.com":dn}
vName := string(vDCZone.Spec.Name)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDCZone {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalDCZoneList = append(vGlobalDCZoneList, ret)

		log.Debugf("[getGlobalDCRegionZonesResolver]Output Zones objects %v", vGlobalDCZoneList)

		return vGlobalDCZoneList, nil
	}

	log.Debug("[getGlobalDCRegionZonesResolver]Id is empty, process all Zoness")

	vDCZoneParent, err := nc.GlobalRoot().Inventory().GetRegions(context.TODO(), getParentName(obj.ParentLabels, "dcregions.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDCRegionZonesResolver]Error getting parent node %s", err)
        return vGlobalDCZoneList, nil
    }
	vDCZoneAllObj, err := vDCZoneParent.GetAllZones(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDCRegionZonesResolver]Error getting Zones objects %s", err)
        return vGlobalDCZoneList, nil
    }
	for _, i := range vDCZoneAllObj {
		vDCZone, err := nc.GlobalRoot().Inventory().Regions(getParentName(obj.ParentLabels, "dcregions.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDCRegionZonesResolver]Error getting Zones node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDCZone.DisplayName()
parentLabels := map[string]interface{}{"dczones.global.tsm.tanzu.vmware.com":dn}
vName := string(vDCZone.Spec.Name)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDCZone {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalDCZoneList = append(vGlobalDCZoneList, ret)
	}

	log.Debugf("[getGlobalDCRegionZonesResolver]Output Zones objects %v", vGlobalDCZoneList)

	return vGlobalDCZoneList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Clusters Node: DCZone PKG: Global
//////////////////////////////////////
func getGlobalDCZoneClustersResolver(obj *model.GlobalDCZone, id *string) ([]*model.GlobalCluster, error) {
	log.Debugf("[getGlobalDCZoneClustersResolver]Parent Object %+v", obj)
	var vGlobalClusterList []*model.GlobalCluster
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDCZoneClustersResolver]Id %q", *id)
		vClusterParent, err := nc.GlobalRoot().Inventory().Regions(getParentName(obj.ParentLabels, "dcregions.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), getParentName(obj.ParentLabels, "dczones.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDCZoneClustersResolver]Error getting Clusters %q : %s", *id, err)
			return vGlobalClusterList, nil
		}
		vCluster, err := vClusterParent.GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDCZoneClustersResolver]Error getting Clusters %q : %s", *id, err)
			return vGlobalClusterList, nil
		}
		dn := vCluster.DisplayName()
parentLabels := map[string]interface{}{"clusters.global.tsm.tanzu.vmware.com":dn}
vName := string(vCluster.Spec.Name)
vUuid := string(vCluster.Spec.Uuid)
vConnected := bool(vCluster.Spec.Connected)
vIstioState := string(vCluster.Spec.IstioState)
vStatus := string(vCluster.Spec.Status)
vStatusHistory := string(vCluster.Spec.StatusHistory)
vCastatus := string(vCluster.Spec.Castatus)
vCaStatusHistory := string(vCluster.Spec.CaStatusHistory)
vComponentStatuses := string(vCluster.Spec.ComponentStatuses)
vComponentStatusesHistory := string(vCluster.Spec.ComponentStatusesHistory)
vType := string(vCluster.Spec.Type)
vProjectId := string(vCluster.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Uuid: &vUuid,
	Connected: &vConnected,
	IstioState: &vIstioState,
	Status: &vStatus,
	StatusHistory: &vStatusHistory,
	Castatus: &vCastatus,
	CaStatusHistory: &vCaStatusHistory,
	ComponentStatuses: &vComponentStatuses,
	ComponentStatusesHistory: &vComponentStatusesHistory,
	Type: &vType,
	ProjectId: &vProjectId,
	}
		vGlobalClusterList = append(vGlobalClusterList, ret)

		log.Debugf("[getGlobalDCZoneClustersResolver]Output Clusters objects %v", vGlobalClusterList)

		return vGlobalClusterList, nil
	}

	log.Debug("[getGlobalDCZoneClustersResolver]Id is empty, process all Clusterss")

	vClusterParent, err := nc.GlobalRoot().Inventory().Regions(getParentName(obj.ParentLabels, "dcregions.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), getParentName(obj.ParentLabels, "dczones.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDCZoneClustersResolver]Error getting parent node %s", err)
        return vGlobalClusterList, nil
    }
	vClusterAllObj, err := vClusterParent.GetAllClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDCZoneClustersResolver]Error getting Clusters %s", err)
        return vGlobalClusterList, nil
    }
	for _, i := range vClusterAllObj {
		vClusterParent, err := nc.GlobalRoot().Inventory().Regions(getParentName(obj.ParentLabels, "dcregions.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), getParentName(obj.ParentLabels, "dczones.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDCZoneClustersResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vCluster, err := vClusterParent.GetClusters(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDCZoneClustersResolver]Error getting Clusters node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vCluster.DisplayName()
parentLabels := map[string]interface{}{"clusters.global.tsm.tanzu.vmware.com":dn}
vName := string(vCluster.Spec.Name)
vUuid := string(vCluster.Spec.Uuid)
vConnected := bool(vCluster.Spec.Connected)
vIstioState := string(vCluster.Spec.IstioState)
vStatus := string(vCluster.Spec.Status)
vStatusHistory := string(vCluster.Spec.StatusHistory)
vCastatus := string(vCluster.Spec.Castatus)
vCaStatusHistory := string(vCluster.Spec.CaStatusHistory)
vComponentStatuses := string(vCluster.Spec.ComponentStatuses)
vComponentStatusesHistory := string(vCluster.Spec.ComponentStatusesHistory)
vType := string(vCluster.Spec.Type)
vProjectId := string(vCluster.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Uuid: &vUuid,
	Connected: &vConnected,
	IstioState: &vIstioState,
	Status: &vStatus,
	StatusHistory: &vStatusHistory,
	Castatus: &vCastatus,
	CaStatusHistory: &vCaStatusHistory,
	ComponentStatuses: &vComponentStatuses,
	ComponentStatusesHistory: &vComponentStatusesHistory,
	Type: &vType,
	ProjectId: &vProjectId,
	}
		vGlobalClusterList = append(vGlobalClusterList, ret)
	}
	log.Debugf("[getGlobalDCZoneClustersResolver]List of Clusters object %v", vGlobalClusterList)
	return vGlobalClusterList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Service Node: DestinationRule PKG: Global
//////////////////////////////////////
func getGlobalDestinationRuleServiceResolver(obj *model.GlobalDestinationRule) (*model.GlobalService, error) {
    log.Debugf("[getGlobalDestinationRuleServiceResolver]Parent Object %+v", obj)
	vServiceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceResolver]Error getting parent node %s", err)
        return &model.GlobalService{}, nil
    }
	vService, err := vServiceParent.GetService(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalDestinationRuleServiceResolver]Error getting Service object %s", err)
        return &model.GlobalService{}, nil
    }
	dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
	log.Debugf("[getGlobalDestinationRuleServiceResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceDeployments Node: DestinationRule PKG: Global
//////////////////////////////////////
func getGlobalDestinationRuleServiceDeploymentsResolver(obj *model.GlobalDestinationRule, id *string) ([]*model.GlobalServiceDeployment, error) {
	log.Debugf("[getGlobalDestinationRuleServiceDeploymentsResolver]Parent Object %+v", obj)
	var vGlobalServiceDeploymentList []*model.GlobalServiceDeployment
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDestinationRuleServiceDeploymentsResolver]Id %q", *id)
		vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceDeploymentsResolver]Error getting ServiceDeployments %q : %s", *id, err)
			return vGlobalServiceDeploymentList, nil
		}
		vServiceDeployment, err := vServiceDeploymentParent.GetServiceDeployments(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceDeploymentsResolver]Error getting ServiceDeployments %q : %s", *id, err)
			return vGlobalServiceDeploymentList, nil
		}
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)

		log.Debugf("[getGlobalDestinationRuleServiceDeploymentsResolver]Output ServiceDeployments objects %v", vGlobalServiceDeploymentList)

		return vGlobalServiceDeploymentList, nil
	}

	log.Debug("[getGlobalDestinationRuleServiceDeploymentsResolver]Id is empty, process all ServiceDeploymentss")

	vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceDeploymentsResolver]Error getting parent node %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	vServiceDeploymentAllObj, err := vServiceDeploymentParent.GetAllServiceDeployments(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceDeploymentsResolver]Error getting ServiceDeployments %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	for _, i := range vServiceDeploymentAllObj {
		vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceDeploymentsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceDeployment, err := vServiceDeploymentParent.GetServiceDeployments(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDestinationRuleServiceDeploymentsResolver]Error getting ServiceDeployments node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)
	}
	log.Debugf("[getGlobalDestinationRuleServiceDeploymentsResolver]List of ServiceDeployments object %v", vGlobalServiceDeploymentList)
	return vGlobalServiceDeploymentList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceReplicaSets Node: DestinationRule PKG: Global
//////////////////////////////////////
func getGlobalDestinationRuleServiceReplicaSetsResolver(obj *model.GlobalDestinationRule, id *string) ([]*model.GlobalServiceReplicaSet, error) {
	log.Debugf("[getGlobalDestinationRuleServiceReplicaSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceReplicaSetList []*model.GlobalServiceReplicaSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDestinationRuleServiceReplicaSetsResolver]Id %q", *id)
		vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceReplicaSetsResolver]Error getting ServiceReplicaSets %q : %s", *id, err)
			return vGlobalServiceReplicaSetList, nil
		}
		vServiceReplicaSet, err := vServiceReplicaSetParent.GetServiceReplicaSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceReplicaSetsResolver]Error getting ServiceReplicaSets %q : %s", *id, err)
			return vGlobalServiceReplicaSetList, nil
		}
		dn := vServiceReplicaSet.DisplayName()
parentLabels := map[string]interface{}{"servicereplicasets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceReplicaSet.Spec.Name)
vMetadata := string(vServiceReplicaSet.Spec.Metadata)
vSpec := string(vServiceReplicaSet.Spec.Spec)
vStatus := string(vServiceReplicaSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceReplicaSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceReplicaSetList = append(vGlobalServiceReplicaSetList, ret)

		log.Debugf("[getGlobalDestinationRuleServiceReplicaSetsResolver]Output ServiceReplicaSets objects %v", vGlobalServiceReplicaSetList)

		return vGlobalServiceReplicaSetList, nil
	}

	log.Debug("[getGlobalDestinationRuleServiceReplicaSetsResolver]Id is empty, process all ServiceReplicaSetss")

	vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceReplicaSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceReplicaSetList, nil
    }
	vServiceReplicaSetAllObj, err := vServiceReplicaSetParent.GetAllServiceReplicaSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceReplicaSetsResolver]Error getting ServiceReplicaSets %s", err)
        return vGlobalServiceReplicaSetList, nil
    }
	for _, i := range vServiceReplicaSetAllObj {
		vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceReplicaSetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceReplicaSet, err := vServiceReplicaSetParent.GetServiceReplicaSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDestinationRuleServiceReplicaSetsResolver]Error getting ServiceReplicaSets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceReplicaSet.DisplayName()
parentLabels := map[string]interface{}{"servicereplicasets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceReplicaSet.Spec.Name)
vMetadata := string(vServiceReplicaSet.Spec.Metadata)
vSpec := string(vServiceReplicaSet.Spec.Spec)
vStatus := string(vServiceReplicaSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceReplicaSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceReplicaSetList = append(vGlobalServiceReplicaSetList, ret)
	}
	log.Debugf("[getGlobalDestinationRuleServiceReplicaSetsResolver]List of ServiceReplicaSets object %v", vGlobalServiceReplicaSetList)
	return vGlobalServiceReplicaSetList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceStatefulSets Node: DestinationRule PKG: Global
//////////////////////////////////////
func getGlobalDestinationRuleServiceStatefulSetsResolver(obj *model.GlobalDestinationRule, id *string) ([]*model.GlobalServiceStatefulSet, error) {
	log.Debugf("[getGlobalDestinationRuleServiceStatefulSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceStatefulSetList []*model.GlobalServiceStatefulSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDestinationRuleServiceStatefulSetsResolver]Id %q", *id)
		vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceStatefulSetsResolver]Error getting ServiceStatefulSets %q : %s", *id, err)
			return vGlobalServiceStatefulSetList, nil
		}
		vServiceStatefulSet, err := vServiceStatefulSetParent.GetServiceStatefulSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceStatefulSetsResolver]Error getting ServiceStatefulSets %q : %s", *id, err)
			return vGlobalServiceStatefulSetList, nil
		}
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)

		log.Debugf("[getGlobalDestinationRuleServiceStatefulSetsResolver]Output ServiceStatefulSets objects %v", vGlobalServiceStatefulSetList)

		return vGlobalServiceStatefulSetList, nil
	}

	log.Debug("[getGlobalDestinationRuleServiceStatefulSetsResolver]Id is empty, process all ServiceStatefulSetss")

	vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceStatefulSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	vServiceStatefulSetAllObj, err := vServiceStatefulSetParent.GetAllServiceStatefulSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceStatefulSetsResolver]Error getting ServiceStatefulSets %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	for _, i := range vServiceStatefulSetAllObj {
		vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceStatefulSetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceStatefulSet, err := vServiceStatefulSetParent.GetServiceStatefulSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDestinationRuleServiceStatefulSetsResolver]Error getting ServiceStatefulSets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)
	}
	log.Debugf("[getGlobalDestinationRuleServiceStatefulSetsResolver]List of ServiceStatefulSets object %v", vGlobalServiceStatefulSetList)
	return vGlobalServiceStatefulSetList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceDaemonSets Node: DestinationRule PKG: Global
//////////////////////////////////////
func getGlobalDestinationRuleServiceDaemonSetsResolver(obj *model.GlobalDestinationRule, id *string) ([]*model.GlobalServiceDaemonSet, error) {
	log.Debugf("[getGlobalDestinationRuleServiceDaemonSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceDaemonSetList []*model.GlobalServiceDaemonSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDestinationRuleServiceDaemonSetsResolver]Id %q", *id)
		vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceDaemonSetsResolver]Error getting ServiceDaemonSets %q : %s", *id, err)
			return vGlobalServiceDaemonSetList, nil
		}
		vServiceDaemonSet, err := vServiceDaemonSetParent.GetServiceDaemonSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceDaemonSetsResolver]Error getting ServiceDaemonSets %q : %s", *id, err)
			return vGlobalServiceDaemonSetList, nil
		}
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)

		log.Debugf("[getGlobalDestinationRuleServiceDaemonSetsResolver]Output ServiceDaemonSets objects %v", vGlobalServiceDaemonSetList)

		return vGlobalServiceDaemonSetList, nil
	}

	log.Debug("[getGlobalDestinationRuleServiceDaemonSetsResolver]Id is empty, process all ServiceDaemonSetss")

	vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceDaemonSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	vServiceDaemonSetAllObj, err := vServiceDaemonSetParent.GetAllServiceDaemonSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceDaemonSetsResolver]Error getting ServiceDaemonSets %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	for _, i := range vServiceDaemonSetAllObj {
		vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceDaemonSetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceDaemonSet, err := vServiceDaemonSetParent.GetServiceDaemonSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDestinationRuleServiceDaemonSetsResolver]Error getting ServiceDaemonSets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)
	}
	log.Debugf("[getGlobalDestinationRuleServiceDaemonSetsResolver]List of ServiceDaemonSets object %v", vGlobalServiceDaemonSetList)
	return vGlobalServiceDaemonSetList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceJobs Node: DestinationRule PKG: Global
//////////////////////////////////////
func getGlobalDestinationRuleServiceJobsResolver(obj *model.GlobalDestinationRule, id *string) ([]*model.GlobalServiceJob, error) {
	log.Debugf("[getGlobalDestinationRuleServiceJobsResolver]Parent Object %+v", obj)
	var vGlobalServiceJobList []*model.GlobalServiceJob
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDestinationRuleServiceJobsResolver]Id %q", *id)
		vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceJobsResolver]Error getting ServiceJobs %q : %s", *id, err)
			return vGlobalServiceJobList, nil
		}
		vServiceJob, err := vServiceJobParent.GetServiceJobs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceJobsResolver]Error getting ServiceJobs %q : %s", *id, err)
			return vGlobalServiceJobList, nil
		}
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)

		log.Debugf("[getGlobalDestinationRuleServiceJobsResolver]Output ServiceJobs objects %v", vGlobalServiceJobList)

		return vGlobalServiceJobList, nil
	}

	log.Debug("[getGlobalDestinationRuleServiceJobsResolver]Id is empty, process all ServiceJobss")

	vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceJobsResolver]Error getting parent node %s", err)
        return vGlobalServiceJobList, nil
    }
	vServiceJobAllObj, err := vServiceJobParent.GetAllServiceJobs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDestinationRuleServiceJobsResolver]Error getting ServiceJobs %s", err)
        return vGlobalServiceJobList, nil
    }
	for _, i := range vServiceJobAllObj {
		vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), getParentName(obj.ParentLabels, "destinationrules.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalDestinationRuleServiceJobsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceJob, err := vServiceJobParent.GetServiceJobs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDestinationRuleServiceJobsResolver]Error getting ServiceJobs node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)
	}
	log.Debugf("[getGlobalDestinationRuleServiceJobsResolver]List of ServiceJobs object %v", vGlobalServiceJobList)
	return vGlobalServiceJobList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Template Node: Directory PKG: Global
//////////////////////////////////////
func getGlobalDirectoryTemplateResolver(obj *model.GlobalDirectory) (*model.GlobalTemplate, error) {
    log.Debugf("[getGlobalDirectoryTemplateResolver]Parent Object %+v", obj)
	vTemplateParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetDirectories(context.TODO(), getParentName(obj.ParentLabels, "directories.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDirectoryTemplateResolver]Error getting parent node %s", err)
        return &model.GlobalTemplate{}, nil
    }
	vTemplate, err := vTemplateParent.GetTemplate(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalDirectoryTemplateResolver]Error getting Template object %s", err)
        return &model.GlobalTemplate{}, nil
    }
	dn := vTemplate.DisplayName()
parentLabels := map[string]interface{}{"templates.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
	log.Debugf("[getGlobalDirectoryTemplateResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Inventory Node: Directory PKG: Global
//////////////////////////////////////
func getGlobalDirectoryInventoryResolver(obj *model.GlobalDirectory) (*model.GlobalInventory, error) {
    log.Debugf("[getGlobalDirectoryInventoryResolver]Parent Object %+v", obj)
	vInventoryParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetDirectories(context.TODO(), getParentName(obj.ParentLabels, "directories.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDirectoryInventoryResolver]Error getting parent node %s", err)
        return &model.GlobalInventory{}, nil
    }
	vInventory, err := vInventoryParent.GetInventory(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalDirectoryInventoryResolver]Error getting Inventory object %s", err)
        return &model.GlobalInventory{}, nil
    }
	dn := vInventory.DisplayName()
parentLabels := map[string]interface{}{"inventories.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	}
	log.Debugf("[getGlobalDirectoryInventoryResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: DnsConfig Node: DNSConfigFolder PKG: Global
//////////////////////////////////////
func getGlobalDNSConfigFolderDnsConfigResolver(obj *model.GlobalDNSConfigFolder, id *string) ([]*model.GlobalDNSConfig, error) {
	log.Debugf("[getGlobalDNSConfigFolderDnsConfigResolver]Parent Object %+v", obj)
	var vGlobalDNSConfigList []*model.GlobalDNSConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDNSConfigFolderDnsConfigResolver]Id %q", *id)
		vDNSConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).DnsConfigFolder(getParentName(obj.ParentLabels, "dnsconfigfolders.global.tsm.tanzu.vmware.com")).GetDnsConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDNSConfigFolderDnsConfigResolver]Error getting DnsConfig node %q : %s", *id, err)
            return vGlobalDNSConfigList, nil
        }
		dn := vDNSConfig.DisplayName()
parentLabels := map[string]interface{}{"dnsconfigs.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vDNSConfig.Spec.OwnedBy)
vDnsSuffix := string(vDNSConfig.Spec.DnsSuffix)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDNSConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	DnsSuffix: &vDnsSuffix,
	}
		vGlobalDNSConfigList = append(vGlobalDNSConfigList, ret)

		log.Debugf("[getGlobalDNSConfigFolderDnsConfigResolver]Output DnsConfig objects %v", vGlobalDNSConfigList)

		return vGlobalDNSConfigList, nil
	}

	log.Debug("[getGlobalDNSConfigFolderDnsConfigResolver]Id is empty, process all DnsConfigs")

	vDNSConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDnsConfigFolder(context.TODO(), getParentName(obj.ParentLabels, "dnsconfigfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDNSConfigFolderDnsConfigResolver]Error getting parent node %s", err)
        return vGlobalDNSConfigList, nil
    }
	vDNSConfigAllObj, err := vDNSConfigParent.GetAllDnsConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDNSConfigFolderDnsConfigResolver]Error getting DnsConfig objects %s", err)
        return vGlobalDNSConfigList, nil
    }
	for _, i := range vDNSConfigAllObj {
		vDNSConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).DnsConfigFolder(getParentName(obj.ParentLabels, "dnsconfigfolders.global.tsm.tanzu.vmware.com")).GetDnsConfig(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDNSConfigFolderDnsConfigResolver]Error getting DnsConfig node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDNSConfig.DisplayName()
parentLabels := map[string]interface{}{"dnsconfigs.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vDNSConfig.Spec.OwnedBy)
vDnsSuffix := string(vDNSConfig.Spec.DnsSuffix)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDNSConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	DnsSuffix: &vDnsSuffix,
	}
		vGlobalDNSConfigList = append(vGlobalDNSConfigList, ret)
	}

	log.Debugf("[getGlobalDNSConfigFolderDnsConfigResolver]Output DnsConfig objects %v", vGlobalDNSConfigList)

	return vGlobalDNSConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: DnsProbeConfigs Node: DNSProbesConfigFolder PKG: Global
//////////////////////////////////////
func getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver(obj *model.GlobalDNSProbesConfigFolder, id *string) ([]*model.GlobalDNSProbeConfig, error) {
	log.Debugf("[getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver]Parent Object %+v", obj)
	var vGlobalDNSProbeConfigList []*model.GlobalDNSProbeConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver]Id %q", *id)
		vDNSProbeConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).DnsProbesConfigFolder().GetDnsProbeConfigs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver]Error getting DnsProbeConfigs node %q : %s", *id, err)
            return vGlobalDNSProbeConfigList, nil
        }
		dn := vDNSProbeConfig.DisplayName()
parentLabels := map[string]interface{}{"dnsprobeconfigs.global.tsm.tanzu.vmware.com":dn}
vDomain := string(vDNSProbeConfig.Spec.Domain)
vCreateTimestamp := string(vDNSProbeConfig.Spec.CreateTimestamp)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDNSProbeConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Domain: &vDomain,
	CreateTimestamp: &vCreateTimestamp,
	}
		vGlobalDNSProbeConfigList = append(vGlobalDNSProbeConfigList, ret)

		log.Debugf("[getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver]Output DnsProbeConfigs objects %v", vGlobalDNSProbeConfigList)

		return vGlobalDNSProbeConfigList, nil
	}

	log.Debug("[getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver]Id is empty, process all DnsProbeConfigss")

	vDNSProbeConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDnsProbesConfigFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver]Error getting parent node %s", err)
        return vGlobalDNSProbeConfigList, nil
    }
	vDNSProbeConfigAllObj, err := vDNSProbeConfigParent.GetAllDnsProbeConfigs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver]Error getting DnsProbeConfigs objects %s", err)
        return vGlobalDNSProbeConfigList, nil
    }
	for _, i := range vDNSProbeConfigAllObj {
		vDNSProbeConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).DnsProbesConfigFolder().GetDnsProbeConfigs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver]Error getting DnsProbeConfigs node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDNSProbeConfig.DisplayName()
parentLabels := map[string]interface{}{"dnsprobeconfigs.global.tsm.tanzu.vmware.com":dn}
vDomain := string(vDNSProbeConfig.Spec.Domain)
vCreateTimestamp := string(vDNSProbeConfig.Spec.CreateTimestamp)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDNSProbeConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Domain: &vDomain,
	CreateTimestamp: &vCreateTimestamp,
	}
		vGlobalDNSProbeConfigList = append(vGlobalDNSProbeConfigList, ret)
	}

	log.Debugf("[getGlobalDNSProbesConfigFolderDnsProbeConfigsResolver]Output DnsProbeConfigs objects %v", vGlobalDNSProbeConfigList)

	return vGlobalDNSProbeConfigList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: LabelConfig Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigLabelConfigResolver(obj *model.GlobalDomainConfig, id *string) (*model.GlobalLabelConfig, error) {
	log.Debugf("[getGlobalDomainConfigLabelConfigResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalDomainConfigLabelConfigResolver]Id %q", *id)
		vLabelConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetLabelConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigLabelConfigResolver]Error getting LabelConfig node %q : %s", *id, err)
			return &model.GlobalLabelConfig{}, nil
		}
		dn := vLabelConfig.DisplayName()
parentLabels := map[string]interface{}{"labelconfigs.global.tsm.tanzu.vmware.com":dn}
vLabels := string(vLabelConfig.Spec.Labels)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalLabelConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Labels: &vLabels,
	}

		log.Debugf("[getGlobalDomainConfigLabelConfigResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalDomainConfigLabelConfigResolver]Id is empty, process all LabelConfigs")
	vLabelConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigLabelConfigResolver]Failed to get parent node %s", err)
        return &model.GlobalLabelConfig{}, nil
    }
	vLabelConfig, err := vLabelConfigParent.GetLabelConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigLabelConfigResolver]Error getting LabelConfig node %s", err)
        return &model.GlobalLabelConfig{}, nil
    }
	dn := vLabelConfig.DisplayName()
parentLabels := map[string]interface{}{"labelconfigs.global.tsm.tanzu.vmware.com":dn}
vLabels := string(vLabelConfig.Spec.Labels)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalLabelConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Labels: &vLabels,
	}

	log.Debugf("[getGlobalDomainConfigLabelConfigResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Policy Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigPolicyResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalPolicyConfig, error) {
	log.Debugf("[getGlobalDomainConfigPolicyResolver]Parent Object %+v", obj)
	var vGlobalPolicyConfigList []*model.GlobalPolicyConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigPolicyResolver]Id %q", *id)
		vPolicyConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetPolicy(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigPolicyResolver]Error getting Policy node %q : %s", *id, err)
            return vGlobalPolicyConfigList, nil
        }
		dn := vPolicyConfig.DisplayName()
parentLabels := map[string]interface{}{"policyconfigs.global.tsm.tanzu.vmware.com":dn}
vSrc := string(vPolicyConfig.Spec.Src)
vDst := string(vPolicyConfig.Spec.Dst)
vAction := string(vPolicyConfig.Spec.Action)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPolicyConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Src: &vSrc,
	Dst: &vDst,
	Action: &vAction,
	}
		vGlobalPolicyConfigList = append(vGlobalPolicyConfigList, ret)

		log.Debugf("[getGlobalDomainConfigPolicyResolver]Output Policy objects %v", vGlobalPolicyConfigList)

		return vGlobalPolicyConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigPolicyResolver]Id is empty, process all Policys")

	vPolicyConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigPolicyResolver]Error getting parent node %s", err)
        return vGlobalPolicyConfigList, nil
    }
	vPolicyConfigAllObj, err := vPolicyConfigParent.GetAllPolicy(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigPolicyResolver]Error getting Policy objects %s", err)
        return vGlobalPolicyConfigList, nil
    }
	for _, i := range vPolicyConfigAllObj {
		vPolicyConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetPolicy(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigPolicyResolver]Error getting Policy node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vPolicyConfig.DisplayName()
parentLabels := map[string]interface{}{"policyconfigs.global.tsm.tanzu.vmware.com":dn}
vSrc := string(vPolicyConfig.Spec.Src)
vDst := string(vPolicyConfig.Spec.Dst)
vAction := string(vPolicyConfig.Spec.Action)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPolicyConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Src: &vSrc,
	Dst: &vDst,
	Action: &vAction,
	}
		vGlobalPolicyConfigList = append(vGlobalPolicyConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigPolicyResolver]Output Policy objects %v", vGlobalPolicyConfigList)

	return vGlobalPolicyConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: NetworkAttachmentDefinition Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigNetworkAttachmentDefinitionResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalNetworkAttachmentDefinitionConfig, error) {
	log.Debugf("[getGlobalDomainConfigNetworkAttachmentDefinitionResolver]Parent Object %+v", obj)
	var vGlobalNetworkAttachmentDefinitionConfigList []*model.GlobalNetworkAttachmentDefinitionConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigNetworkAttachmentDefinitionResolver]Id %q", *id)
		vNetworkAttachmentDefinitionConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetNetworkAttachmentDefinition(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigNetworkAttachmentDefinitionResolver]Error getting NetworkAttachmentDefinition node %q : %s", *id, err)
            return vGlobalNetworkAttachmentDefinitionConfigList, nil
        }
		dn := vNetworkAttachmentDefinitionConfig.DisplayName()
parentLabels := map[string]interface{}{"networkattachmentdefinitionconfigs.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vNetworkAttachmentDefinitionConfig.Spec.Metadata)
vName := string(vNetworkAttachmentDefinitionConfig.Spec.Name)
vNamespace := string(vNetworkAttachmentDefinitionConfig.Spec.Namespace)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNetworkAttachmentDefinitionConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Name: &vName,
	Namespace: &vNamespace,
	}
		vGlobalNetworkAttachmentDefinitionConfigList = append(vGlobalNetworkAttachmentDefinitionConfigList, ret)

		log.Debugf("[getGlobalDomainConfigNetworkAttachmentDefinitionResolver]Output NetworkAttachmentDefinition objects %v", vGlobalNetworkAttachmentDefinitionConfigList)

		return vGlobalNetworkAttachmentDefinitionConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigNetworkAttachmentDefinitionResolver]Id is empty, process all NetworkAttachmentDefinitions")

	vNetworkAttachmentDefinitionConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigNetworkAttachmentDefinitionResolver]Error getting parent node %s", err)
        return vGlobalNetworkAttachmentDefinitionConfigList, nil
    }
	vNetworkAttachmentDefinitionConfigAllObj, err := vNetworkAttachmentDefinitionConfigParent.GetAllNetworkAttachmentDefinition(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigNetworkAttachmentDefinitionResolver]Error getting NetworkAttachmentDefinition objects %s", err)
        return vGlobalNetworkAttachmentDefinitionConfigList, nil
    }
	for _, i := range vNetworkAttachmentDefinitionConfigAllObj {
		vNetworkAttachmentDefinitionConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetNetworkAttachmentDefinition(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigNetworkAttachmentDefinitionResolver]Error getting NetworkAttachmentDefinition node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vNetworkAttachmentDefinitionConfig.DisplayName()
parentLabels := map[string]interface{}{"networkattachmentdefinitionconfigs.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vNetworkAttachmentDefinitionConfig.Spec.Metadata)
vName := string(vNetworkAttachmentDefinitionConfig.Spec.Name)
vNamespace := string(vNetworkAttachmentDefinitionConfig.Spec.Namespace)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNetworkAttachmentDefinitionConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Name: &vName,
	Namespace: &vNamespace,
	}
		vGlobalNetworkAttachmentDefinitionConfigList = append(vGlobalNetworkAttachmentDefinitionConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigNetworkAttachmentDefinitionResolver]Output NetworkAttachmentDefinition objects %v", vGlobalNetworkAttachmentDefinitionConfigList)

	return vGlobalNetworkAttachmentDefinitionConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Services Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigServicesResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalServiceConfig, error) {
	log.Debugf("[getGlobalDomainConfigServicesResolver]Parent Object %+v", obj)
	var vGlobalServiceConfigList []*model.GlobalServiceConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigServicesResolver]Id %q", *id)
		vServiceConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigServicesResolver]Error getting Services node %q : %s", *id, err)
            return vGlobalServiceConfigList, nil
        }
		dn := vServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"serviceconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceConfig.Spec.Name)
vOwnedBy := string(vServiceConfig.Spec.OwnedBy)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	}
		vGlobalServiceConfigList = append(vGlobalServiceConfigList, ret)

		log.Debugf("[getGlobalDomainConfigServicesResolver]Output Services objects %v", vGlobalServiceConfigList)

		return vGlobalServiceConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigServicesResolver]Id is empty, process all Servicess")

	vServiceConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigServicesResolver]Error getting parent node %s", err)
        return vGlobalServiceConfigList, nil
    }
	vServiceConfigAllObj, err := vServiceConfigParent.GetAllServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigServicesResolver]Error getting Services objects %s", err)
        return vGlobalServiceConfigList, nil
    }
	for _, i := range vServiceConfigAllObj {
		vServiceConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigServicesResolver]Error getting Services node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"serviceconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceConfig.Spec.Name)
vOwnedBy := string(vServiceConfig.Spec.OwnedBy)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	}
		vGlobalServiceConfigList = append(vGlobalServiceConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigServicesResolver]Output Services objects %v", vGlobalServiceConfigList)

	return vGlobalServiceConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceEntries Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigServiceEntriesResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalServiceEntryConfig, error) {
	log.Debugf("[getGlobalDomainConfigServiceEntriesResolver]Parent Object %+v", obj)
	var vGlobalServiceEntryConfigList []*model.GlobalServiceEntryConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigServiceEntriesResolver]Id %q", *id)
		vServiceEntryConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetServiceEntries(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigServiceEntriesResolver]Error getting ServiceEntries node %q : %s", *id, err)
            return vGlobalServiceEntryConfigList, nil
        }
		dn := vServiceEntryConfig.DisplayName()
parentLabels := map[string]interface{}{"serviceentryconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceEntryConfig.Spec.Name)
vOwnedBy := string(vServiceEntryConfig.Spec.OwnedBy)
vService := string(vServiceEntryConfig.Spec.Service)
vServiceFQDN := string(vServiceEntryConfig.Spec.ServiceFQDN)
vDescription := string(vServiceEntryConfig.Spec.Description)
vServicePortList := string(vServiceEntryConfig.Spec.ServicePortList)
Tags, _ := json.Marshal(vServiceEntryConfig.Spec.Tags)
TagsData := string(Tags)
vLabels := string(vServiceEntryConfig.Spec.Labels)
Endpoints, _ := json.Marshal(vServiceEntryConfig.Spec.Endpoints)
EndpointsData := string(Endpoints)
vEndpointList := string(vServiceEntryConfig.Spec.EndpointList)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceEntryConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	Service: &vService,
	ServiceFQDN: &vServiceFQDN,
	Description: &vDescription,
	ServicePortList: &vServicePortList,
	Tags: &TagsData,
	Labels: &vLabels,
	Endpoints: &EndpointsData,
	EndpointList: &vEndpointList,
	}
		vGlobalServiceEntryConfigList = append(vGlobalServiceEntryConfigList, ret)

		log.Debugf("[getGlobalDomainConfigServiceEntriesResolver]Output ServiceEntries objects %v", vGlobalServiceEntryConfigList)

		return vGlobalServiceEntryConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigServiceEntriesResolver]Id is empty, process all ServiceEntriess")

	vServiceEntryConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigServiceEntriesResolver]Error getting parent node %s", err)
        return vGlobalServiceEntryConfigList, nil
    }
	vServiceEntryConfigAllObj, err := vServiceEntryConfigParent.GetAllServiceEntries(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigServiceEntriesResolver]Error getting ServiceEntries objects %s", err)
        return vGlobalServiceEntryConfigList, nil
    }
	for _, i := range vServiceEntryConfigAllObj {
		vServiceEntryConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetServiceEntries(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigServiceEntriesResolver]Error getting ServiceEntries node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceEntryConfig.DisplayName()
parentLabels := map[string]interface{}{"serviceentryconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceEntryConfig.Spec.Name)
vOwnedBy := string(vServiceEntryConfig.Spec.OwnedBy)
vService := string(vServiceEntryConfig.Spec.Service)
vServiceFQDN := string(vServiceEntryConfig.Spec.ServiceFQDN)
vDescription := string(vServiceEntryConfig.Spec.Description)
vServicePortList := string(vServiceEntryConfig.Spec.ServicePortList)
Tags, _ := json.Marshal(vServiceEntryConfig.Spec.Tags)
TagsData := string(Tags)
vLabels := string(vServiceEntryConfig.Spec.Labels)
Endpoints, _ := json.Marshal(vServiceEntryConfig.Spec.Endpoints)
EndpointsData := string(Endpoints)
vEndpointList := string(vServiceEntryConfig.Spec.EndpointList)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceEntryConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	Service: &vService,
	ServiceFQDN: &vServiceFQDN,
	Description: &vDescription,
	ServicePortList: &vServicePortList,
	Tags: &TagsData,
	Labels: &vLabels,
	Endpoints: &EndpointsData,
	EndpointList: &vEndpointList,
	}
		vGlobalServiceEntryConfigList = append(vGlobalServiceEntryConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigServiceEntriesResolver]Output ServiceEntries objects %v", vGlobalServiceEntryConfigList)

	return vGlobalServiceEntryConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GatewayConfig Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigGatewayConfigResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalGatewayConfig, error) {
	log.Debugf("[getGlobalDomainConfigGatewayConfigResolver]Parent Object %+v", obj)
	var vGlobalGatewayConfigList []*model.GlobalGatewayConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigGatewayConfigResolver]Id %q", *id)
		vGatewayConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGatewayConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigGatewayConfigResolver]Error getting GatewayConfig node %q : %s", *id, err)
            return vGlobalGatewayConfigList, nil
        }
		dn := vGatewayConfig.DisplayName()
parentLabels := map[string]interface{}{"gatewayconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vGatewayConfig.Spec.Name)
vOwnedBy := string(vGatewayConfig.Spec.OwnedBy)
vLabels := string(vGatewayConfig.Spec.Labels)
vListeners := string(vGatewayConfig.Spec.Listeners)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGatewayConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	Labels: &vLabels,
	Listeners: &vListeners,
	}
		vGlobalGatewayConfigList = append(vGlobalGatewayConfigList, ret)

		log.Debugf("[getGlobalDomainConfigGatewayConfigResolver]Output GatewayConfig objects %v", vGlobalGatewayConfigList)

		return vGlobalGatewayConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigGatewayConfigResolver]Id is empty, process all GatewayConfigs")

	vGatewayConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGatewayConfigResolver]Error getting parent node %s", err)
        return vGlobalGatewayConfigList, nil
    }
	vGatewayConfigAllObj, err := vGatewayConfigParent.GetAllGatewayConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGatewayConfigResolver]Error getting GatewayConfig objects %s", err)
        return vGlobalGatewayConfigList, nil
    }
	for _, i := range vGatewayConfigAllObj {
		vGatewayConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGatewayConfig(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigGatewayConfigResolver]Error getting GatewayConfig node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGatewayConfig.DisplayName()
parentLabels := map[string]interface{}{"gatewayconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vGatewayConfig.Spec.Name)
vOwnedBy := string(vGatewayConfig.Spec.OwnedBy)
vLabels := string(vGatewayConfig.Spec.Labels)
vListeners := string(vGatewayConfig.Spec.Listeners)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGatewayConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	Labels: &vLabels,
	Listeners: &vListeners,
	}
		vGlobalGatewayConfigList = append(vGlobalGatewayConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigGatewayConfigResolver]Output GatewayConfig objects %v", vGlobalGatewayConfigList)

	return vGlobalGatewayConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Autoscalers Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigAutoscalersResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalAutoscalerConfig, error) {
	log.Debugf("[getGlobalDomainConfigAutoscalersResolver]Parent Object %+v", obj)
	var vGlobalAutoscalerConfigList []*model.GlobalAutoscalerConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigAutoscalersResolver]Id %q", *id)
		vAutoscalerConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetAutoscalers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigAutoscalersResolver]Error getting Autoscalers node %q : %s", *id, err)
            return vGlobalAutoscalerConfigList, nil
        }
		dn := vAutoscalerConfig.DisplayName()
parentLabels := map[string]interface{}{"autoscalerconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscalerConfig.Spec.Name)
vConfigSource := string(vAutoscalerConfig.Spec.ConfigSource)
vDesiredState := string(vAutoscalerConfig.Spec.DesiredState)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscalerConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ConfigSource: &vConfigSource,
	DesiredState: &vDesiredState,
	}
		vGlobalAutoscalerConfigList = append(vGlobalAutoscalerConfigList, ret)

		log.Debugf("[getGlobalDomainConfigAutoscalersResolver]Output Autoscalers objects %v", vGlobalAutoscalerConfigList)

		return vGlobalAutoscalerConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigAutoscalersResolver]Id is empty, process all Autoscalerss")

	vAutoscalerConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigAutoscalersResolver]Error getting parent node %s", err)
        return vGlobalAutoscalerConfigList, nil
    }
	vAutoscalerConfigAllObj, err := vAutoscalerConfigParent.GetAllAutoscalers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigAutoscalersResolver]Error getting Autoscalers objects %s", err)
        return vGlobalAutoscalerConfigList, nil
    }
	for _, i := range vAutoscalerConfigAllObj {
		vAutoscalerConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetAutoscalers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigAutoscalersResolver]Error getting Autoscalers node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAutoscalerConfig.DisplayName()
parentLabels := map[string]interface{}{"autoscalerconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscalerConfig.Spec.Name)
vConfigSource := string(vAutoscalerConfig.Spec.ConfigSource)
vDesiredState := string(vAutoscalerConfig.Spec.DesiredState)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscalerConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ConfigSource: &vConfigSource,
	DesiredState: &vDesiredState,
	}
		vGlobalAutoscalerConfigList = append(vGlobalAutoscalerConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigAutoscalersResolver]Output Autoscalers objects %v", vGlobalAutoscalerConfigList)

	return vGlobalAutoscalerConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: HostConfigV2 Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigHostConfigV2Resolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalHostConfigV2, error) {
	log.Debugf("[getGlobalDomainConfigHostConfigV2Resolver]Parent Object %+v", obj)
	var vGlobalHostConfigV2List []*model.GlobalHostConfigV2
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigHostConfigV2Resolver]Id %q", *id)
		vHostConfigV2, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetHostConfigV2(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigHostConfigV2Resolver]Error getting HostConfigV2 node %q : %s", *id, err)
            return vGlobalHostConfigV2List, nil
        }
		dn := vHostConfigV2.DisplayName()
parentLabels := map[string]interface{}{"hostconfigv2s.global.tsm.tanzu.vmware.com":dn}
vName := string(vHostConfigV2.Spec.Name)
vHost := string(vHostConfigV2.Spec.Host)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalHostConfigV2 {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Host: &vHost,
	}
		vGlobalHostConfigV2List = append(vGlobalHostConfigV2List, ret)

		log.Debugf("[getGlobalDomainConfigHostConfigV2Resolver]Output HostConfigV2 objects %v", vGlobalHostConfigV2List)

		return vGlobalHostConfigV2List, nil
	}

	log.Debug("[getGlobalDomainConfigHostConfigV2Resolver]Id is empty, process all HostConfigV2s")

	vHostConfigV2Parent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigHostConfigV2Resolver]Error getting parent node %s", err)
        return vGlobalHostConfigV2List, nil
    }
	vHostConfigV2AllObj, err := vHostConfigV2Parent.GetAllHostConfigV2(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigHostConfigV2Resolver]Error getting HostConfigV2 objects %s", err)
        return vGlobalHostConfigV2List, nil
    }
	for _, i := range vHostConfigV2AllObj {
		vHostConfigV2, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetHostConfigV2(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigHostConfigV2Resolver]Error getting HostConfigV2 node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vHostConfigV2.DisplayName()
parentLabels := map[string]interface{}{"hostconfigv2s.global.tsm.tanzu.vmware.com":dn}
vName := string(vHostConfigV2.Spec.Name)
vHost := string(vHostConfigV2.Spec.Host)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalHostConfigV2 {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Host: &vHost,
	}
		vGlobalHostConfigV2List = append(vGlobalHostConfigV2List, ret)
	}

	log.Debugf("[getGlobalDomainConfigHostConfigV2Resolver]Output HostConfigV2 objects %v", vGlobalHostConfigV2List)

	return vGlobalHostConfigV2List, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: InboundAuthenticationConfig Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigInboundAuthenticationConfigResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalInboundAuthenticationConfig, error) {
	log.Debugf("[getGlobalDomainConfigInboundAuthenticationConfigResolver]Parent Object %+v", obj)
	var vGlobalInboundAuthenticationConfigList []*model.GlobalInboundAuthenticationConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigInboundAuthenticationConfigResolver]Id %q", *id)
		vInboundAuthenticationConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetInboundAuthenticationConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigInboundAuthenticationConfigResolver]Error getting InboundAuthenticationConfig node %q : %s", *id, err)
            return vGlobalInboundAuthenticationConfigList, nil
        }
		dn := vInboundAuthenticationConfig.DisplayName()
parentLabels := map[string]interface{}{"inboundauthenticationconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vInboundAuthenticationConfig.Spec.Name)
vOwnedBy := string(vInboundAuthenticationConfig.Spec.OwnedBy)
vMode := string(vInboundAuthenticationConfig.Spec.Mode)
vPorts := string(vInboundAuthenticationConfig.Spec.Ports)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalInboundAuthenticationConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	Mode: &vMode,
	Ports: &vPorts,
	}
		vGlobalInboundAuthenticationConfigList = append(vGlobalInboundAuthenticationConfigList, ret)

		log.Debugf("[getGlobalDomainConfigInboundAuthenticationConfigResolver]Output InboundAuthenticationConfig objects %v", vGlobalInboundAuthenticationConfigList)

		return vGlobalInboundAuthenticationConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigInboundAuthenticationConfigResolver]Id is empty, process all InboundAuthenticationConfigs")

	vInboundAuthenticationConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigInboundAuthenticationConfigResolver]Error getting parent node %s", err)
        return vGlobalInboundAuthenticationConfigList, nil
    }
	vInboundAuthenticationConfigAllObj, err := vInboundAuthenticationConfigParent.GetAllInboundAuthenticationConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigInboundAuthenticationConfigResolver]Error getting InboundAuthenticationConfig objects %s", err)
        return vGlobalInboundAuthenticationConfigList, nil
    }
	for _, i := range vInboundAuthenticationConfigAllObj {
		vInboundAuthenticationConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetInboundAuthenticationConfig(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigInboundAuthenticationConfigResolver]Error getting InboundAuthenticationConfig node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vInboundAuthenticationConfig.DisplayName()
parentLabels := map[string]interface{}{"inboundauthenticationconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vInboundAuthenticationConfig.Spec.Name)
vOwnedBy := string(vInboundAuthenticationConfig.Spec.OwnedBy)
vMode := string(vInboundAuthenticationConfig.Spec.Mode)
vPorts := string(vInboundAuthenticationConfig.Spec.Ports)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalInboundAuthenticationConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	Mode: &vMode,
	Ports: &vPorts,
	}
		vGlobalInboundAuthenticationConfigList = append(vGlobalInboundAuthenticationConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigInboundAuthenticationConfigResolver]Output InboundAuthenticationConfig objects %v", vGlobalInboundAuthenticationConfigList)

	return vGlobalInboundAuthenticationConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Slos Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigSlosResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalSloConfig, error) {
	log.Debugf("[getGlobalDomainConfigSlosResolver]Parent Object %+v", obj)
	var vGlobalSloConfigList []*model.GlobalSloConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigSlosResolver]Id %q", *id)
		vSloConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetSlos(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigSlosResolver]Error getting Slos node %q : %s", *id, err)
            return vGlobalSloConfigList, nil
        }
		dn := vSloConfig.DisplayName()
parentLabels := map[string]interface{}{"sloconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vSloConfig.Spec.Name)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSloConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalSloConfigList = append(vGlobalSloConfigList, ret)

		log.Debugf("[getGlobalDomainConfigSlosResolver]Output Slos objects %v", vGlobalSloConfigList)

		return vGlobalSloConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigSlosResolver]Id is empty, process all Sloss")

	vSloConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigSlosResolver]Error getting parent node %s", err)
        return vGlobalSloConfigList, nil
    }
	vSloConfigAllObj, err := vSloConfigParent.GetAllSlos(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigSlosResolver]Error getting Slos objects %s", err)
        return vGlobalSloConfigList, nil
    }
	for _, i := range vSloConfigAllObj {
		vSloConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetSlos(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigSlosResolver]Error getting Slos node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSloConfig.DisplayName()
parentLabels := map[string]interface{}{"sloconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vSloConfig.Spec.Name)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSloConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalSloConfigList = append(vGlobalSloConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigSlosResolver]Output Slos objects %v", vGlobalSloConfigList)

	return vGlobalSloConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Secrets Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigSecretsResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalSecretRTConfig, error) {
	log.Debugf("[getGlobalDomainConfigSecretsResolver]Parent Object %+v", obj)
	var vGlobalSecretRTConfigList []*model.GlobalSecretRTConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigSecretsResolver]Id %q", *id)
		vSecretRTConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetSecrets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigSecretsResolver]Error getting Secrets node %q : %s", *id, err)
            return vGlobalSecretRTConfigList, nil
        }
		dn := vSecretRTConfig.DisplayName()
parentLabels := map[string]interface{}{"secretrtconfigs.global.tsm.tanzu.vmware.com":dn}
vType := string(vSecretRTConfig.Spec.Type)
vData := string(vSecretRTConfig.Spec.Data)
vIsBase64Encoded := bool(vSecretRTConfig.Spec.IsBase64Encoded)
vOwnedBy := string(vSecretRTConfig.Spec.OwnedBy)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSecretRTConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Data: &vData,
	IsBase64Encoded: &vIsBase64Encoded,
	OwnedBy: &vOwnedBy,
	}
		vGlobalSecretRTConfigList = append(vGlobalSecretRTConfigList, ret)

		log.Debugf("[getGlobalDomainConfigSecretsResolver]Output Secrets objects %v", vGlobalSecretRTConfigList)

		return vGlobalSecretRTConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigSecretsResolver]Id is empty, process all Secretss")

	vSecretRTConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigSecretsResolver]Error getting parent node %s", err)
        return vGlobalSecretRTConfigList, nil
    }
	vSecretRTConfigAllObj, err := vSecretRTConfigParent.GetAllSecrets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigSecretsResolver]Error getting Secrets objects %s", err)
        return vGlobalSecretRTConfigList, nil
    }
	for _, i := range vSecretRTConfigAllObj {
		vSecretRTConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetSecrets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigSecretsResolver]Error getting Secrets node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSecretRTConfig.DisplayName()
parentLabels := map[string]interface{}{"secretrtconfigs.global.tsm.tanzu.vmware.com":dn}
vType := string(vSecretRTConfig.Spec.Type)
vData := string(vSecretRTConfig.Spec.Data)
vIsBase64Encoded := bool(vSecretRTConfig.Spec.IsBase64Encoded)
vOwnedBy := string(vSecretRTConfig.Spec.OwnedBy)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSecretRTConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Data: &vData,
	IsBase64Encoded: &vIsBase64Encoded,
	OwnedBy: &vOwnedBy,
	}
		vGlobalSecretRTConfigList = append(vGlobalSecretRTConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigSecretsResolver]Output Secrets objects %v", vGlobalSecretRTConfigList)

	return vGlobalSecretRTConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ExternalServices Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigExternalServicesResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalExternalServicesRT, error) {
	log.Debugf("[getGlobalDomainConfigExternalServicesResolver]Parent Object %+v", obj)
	var vGlobalExternalServicesRTList []*model.GlobalExternalServicesRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigExternalServicesResolver]Id %q", *id)
		vExternalServicesRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetExternalServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigExternalServicesResolver]Error getting ExternalServices node %q : %s", *id, err)
            return vGlobalExternalServicesRTList, nil
        }
		dn := vExternalServicesRT.DisplayName()
parentLabels := map[string]interface{}{"externalservicesrts.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vExternalServicesRT.Spec.OwnedBy)
vCreatedByGNS := string(vExternalServicesRT.Spec.CreatedByGNS)
vCreatedByESName := string(vExternalServicesRT.Spec.CreatedByESName)
vCreatedBySDFolder := string(vExternalServicesRT.Spec.CreatedBySDFolder)
vCreatedBySDEntry := string(vExternalServicesRT.Spec.CreatedBySDEntry)
vServicePort := int(vExternalServicesRT.Spec.ServicePort)
vProtocol := string(vExternalServicesRT.Spec.Protocol)
vHostname := string(vExternalServicesRT.Spec.Hostname)
vPort := int(vExternalServicesRT.Spec.Port)
vServerCertificate := string(vExternalServicesRT.Spec.ServerCertificate)
vHostnameAlias := string(vExternalServicesRT.Spec.HostnameAlias)
EndpointList, _ := json.Marshal(vExternalServicesRT.Spec.EndpointList)
EndpointListData := string(EndpointList)
EgressGateways, _ := json.Marshal(vExternalServicesRT.Spec.EgressGateways)
EgressGatewaysData := string(EgressGateways)
vClientCertificate := string(vExternalServicesRT.Spec.ClientCertificate)
vClientKey := string(vExternalServicesRT.Spec.ClientKey)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalServicesRT {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	CreatedByGNS: &vCreatedByGNS,
	CreatedByESName: &vCreatedByESName,
	CreatedBySDFolder: &vCreatedBySDFolder,
	CreatedBySDEntry: &vCreatedBySDEntry,
	ServicePort: &vServicePort,
	Protocol: &vProtocol,
	Hostname: &vHostname,
	Port: &vPort,
	ServerCertificate: &vServerCertificate,
	HostnameAlias: &vHostnameAlias,
	EndpointList: &EndpointListData,
	EgressGateways: &EgressGatewaysData,
	ClientCertificate: &vClientCertificate,
	ClientKey: &vClientKey,
	}
		vGlobalExternalServicesRTList = append(vGlobalExternalServicesRTList, ret)

		log.Debugf("[getGlobalDomainConfigExternalServicesResolver]Output ExternalServices objects %v", vGlobalExternalServicesRTList)

		return vGlobalExternalServicesRTList, nil
	}

	log.Debug("[getGlobalDomainConfigExternalServicesResolver]Id is empty, process all ExternalServicess")

	vExternalServicesRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigExternalServicesResolver]Error getting parent node %s", err)
        return vGlobalExternalServicesRTList, nil
    }
	vExternalServicesRTAllObj, err := vExternalServicesRTParent.GetAllExternalServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigExternalServicesResolver]Error getting ExternalServices objects %s", err)
        return vGlobalExternalServicesRTList, nil
    }
	for _, i := range vExternalServicesRTAllObj {
		vExternalServicesRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetExternalServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigExternalServicesResolver]Error getting ExternalServices node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalServicesRT.DisplayName()
parentLabels := map[string]interface{}{"externalservicesrts.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vExternalServicesRT.Spec.OwnedBy)
vCreatedByGNS := string(vExternalServicesRT.Spec.CreatedByGNS)
vCreatedByESName := string(vExternalServicesRT.Spec.CreatedByESName)
vCreatedBySDFolder := string(vExternalServicesRT.Spec.CreatedBySDFolder)
vCreatedBySDEntry := string(vExternalServicesRT.Spec.CreatedBySDEntry)
vServicePort := int(vExternalServicesRT.Spec.ServicePort)
vProtocol := string(vExternalServicesRT.Spec.Protocol)
vHostname := string(vExternalServicesRT.Spec.Hostname)
vPort := int(vExternalServicesRT.Spec.Port)
vServerCertificate := string(vExternalServicesRT.Spec.ServerCertificate)
vHostnameAlias := string(vExternalServicesRT.Spec.HostnameAlias)
EndpointList, _ := json.Marshal(vExternalServicesRT.Spec.EndpointList)
EndpointListData := string(EndpointList)
EgressGateways, _ := json.Marshal(vExternalServicesRT.Spec.EgressGateways)
EgressGatewaysData := string(EgressGateways)
vClientCertificate := string(vExternalServicesRT.Spec.ClientCertificate)
vClientKey := string(vExternalServicesRT.Spec.ClientKey)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalServicesRT {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	CreatedByGNS: &vCreatedByGNS,
	CreatedByESName: &vCreatedByESName,
	CreatedBySDFolder: &vCreatedBySDFolder,
	CreatedBySDEntry: &vCreatedBySDEntry,
	ServicePort: &vServicePort,
	Protocol: &vProtocol,
	Hostname: &vHostname,
	Port: &vPort,
	ServerCertificate: &vServerCertificate,
	HostnameAlias: &vHostnameAlias,
	EndpointList: &EndpointListData,
	EgressGateways: &EgressGatewaysData,
	ClientCertificate: &vClientCertificate,
	ClientKey: &vClientKey,
	}
		vGlobalExternalServicesRTList = append(vGlobalExternalServicesRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigExternalServicesResolver]Output ExternalServices objects %v", vGlobalExternalServicesRTList)

	return vGlobalExternalServicesRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ApiDiscovery Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigApiDiscoveryResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalApiDiscoveryRT, error) {
	log.Debugf("[getGlobalDomainConfigApiDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalApiDiscoveryRTList []*model.GlobalApiDiscoveryRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigApiDiscoveryResolver]Id %q", *id)
		vApiDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetApiDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigApiDiscoveryResolver]Error getting ApiDiscovery node %q : %s", *id, err)
            return vGlobalApiDiscoveryRTList, nil
        }
		dn := vApiDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"apidiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vApiDiscoveryRT.Spec.Gnsid)
Selectors, _ := json.Marshal(vApiDiscoveryRT.Spec.Selectors)
SelectorsData := string(Selectors)
Spec, _ := json.Marshal(vApiDiscoveryRT.Spec.Spec)
SpecData := string(Spec)
vCompressionEnabled := bool(vApiDiscoveryRT.Spec.CompressionEnabled)
IsEndpointApiPrechecks, _ := json.Marshal(vApiDiscoveryRT.Spec.IsEndpointApiPrechecks)
IsEndpointApiPrechecksData := string(IsEndpointApiPrechecks)
ProcessingToggles, _ := json.Marshal(vApiDiscoveryRT.Spec.ProcessingToggles)
ProcessingTogglesData := string(ProcessingToggles)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalApiDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &SelectorsData,
	Spec: &SpecData,
	CompressionEnabled: &vCompressionEnabled,
	IsEndpointApiPrechecks: &IsEndpointApiPrechecksData,
	ProcessingToggles: &ProcessingTogglesData,
	}
		vGlobalApiDiscoveryRTList = append(vGlobalApiDiscoveryRTList, ret)

		log.Debugf("[getGlobalDomainConfigApiDiscoveryResolver]Output ApiDiscovery objects %v", vGlobalApiDiscoveryRTList)

		return vGlobalApiDiscoveryRTList, nil
	}

	log.Debug("[getGlobalDomainConfigApiDiscoveryResolver]Id is empty, process all ApiDiscoverys")

	vApiDiscoveryRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigApiDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalApiDiscoveryRTList, nil
    }
	vApiDiscoveryRTAllObj, err := vApiDiscoveryRTParent.GetAllApiDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigApiDiscoveryResolver]Error getting ApiDiscovery objects %s", err)
        return vGlobalApiDiscoveryRTList, nil
    }
	for _, i := range vApiDiscoveryRTAllObj {
		vApiDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetApiDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigApiDiscoveryResolver]Error getting ApiDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vApiDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"apidiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vApiDiscoveryRT.Spec.Gnsid)
Selectors, _ := json.Marshal(vApiDiscoveryRT.Spec.Selectors)
SelectorsData := string(Selectors)
Spec, _ := json.Marshal(vApiDiscoveryRT.Spec.Spec)
SpecData := string(Spec)
vCompressionEnabled := bool(vApiDiscoveryRT.Spec.CompressionEnabled)
IsEndpointApiPrechecks, _ := json.Marshal(vApiDiscoveryRT.Spec.IsEndpointApiPrechecks)
IsEndpointApiPrechecksData := string(IsEndpointApiPrechecks)
ProcessingToggles, _ := json.Marshal(vApiDiscoveryRT.Spec.ProcessingToggles)
ProcessingTogglesData := string(ProcessingToggles)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalApiDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &SelectorsData,
	Spec: &SpecData,
	CompressionEnabled: &vCompressionEnabled,
	IsEndpointApiPrechecks: &IsEndpointApiPrechecksData,
	ProcessingToggles: &ProcessingTogglesData,
	}
		vGlobalApiDiscoveryRTList = append(vGlobalApiDiscoveryRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigApiDiscoveryResolver]Output ApiDiscovery objects %v", vGlobalApiDiscoveryRTList)

	return vGlobalApiDiscoveryRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GeoDiscovery Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigGeoDiscoveryResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalGeoDiscoveryRT, error) {
	log.Debugf("[getGlobalDomainConfigGeoDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalGeoDiscoveryRTList []*model.GlobalGeoDiscoveryRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigGeoDiscoveryResolver]Id %q", *id)
		vGeoDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGeoDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigGeoDiscoveryResolver]Error getting GeoDiscovery node %q : %s", *id, err)
            return vGlobalGeoDiscoveryRTList, nil
        }
		dn := vGeoDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"geodiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vGeoDiscoveryRT.Spec.Gnsid)
vSelectors := string(vGeoDiscoveryRT.Spec.Selectors)
vSpec := string(vGeoDiscoveryRT.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGeoDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalGeoDiscoveryRTList = append(vGlobalGeoDiscoveryRTList, ret)

		log.Debugf("[getGlobalDomainConfigGeoDiscoveryResolver]Output GeoDiscovery objects %v", vGlobalGeoDiscoveryRTList)

		return vGlobalGeoDiscoveryRTList, nil
	}

	log.Debug("[getGlobalDomainConfigGeoDiscoveryResolver]Id is empty, process all GeoDiscoverys")

	vGeoDiscoveryRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGeoDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalGeoDiscoveryRTList, nil
    }
	vGeoDiscoveryRTAllObj, err := vGeoDiscoveryRTParent.GetAllGeoDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGeoDiscoveryResolver]Error getting GeoDiscovery objects %s", err)
        return vGlobalGeoDiscoveryRTList, nil
    }
	for _, i := range vGeoDiscoveryRTAllObj {
		vGeoDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGeoDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigGeoDiscoveryResolver]Error getting GeoDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGeoDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"geodiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vGeoDiscoveryRT.Spec.Gnsid)
vSelectors := string(vGeoDiscoveryRT.Spec.Selectors)
vSpec := string(vGeoDiscoveryRT.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGeoDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalGeoDiscoveryRTList = append(vGlobalGeoDiscoveryRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigGeoDiscoveryResolver]Output GeoDiscovery objects %v", vGlobalGeoDiscoveryRTList)

	return vGlobalGeoDiscoveryRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PiiDiscovery Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigPiiDiscoveryResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalPiiDiscoveryRT, error) {
	log.Debugf("[getGlobalDomainConfigPiiDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalPiiDiscoveryRTList []*model.GlobalPiiDiscoveryRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigPiiDiscoveryResolver]Id %q", *id)
		vPiiDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetPiiDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigPiiDiscoveryResolver]Error getting PiiDiscovery node %q : %s", *id, err)
            return vGlobalPiiDiscoveryRTList, nil
        }
		dn := vPiiDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"piidiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vPiiDiscoveryRT.Spec.Gnsid)
vSelectors := string(vPiiDiscoveryRT.Spec.Selectors)
vSpec := string(vPiiDiscoveryRT.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPiiDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalPiiDiscoveryRTList = append(vGlobalPiiDiscoveryRTList, ret)

		log.Debugf("[getGlobalDomainConfigPiiDiscoveryResolver]Output PiiDiscovery objects %v", vGlobalPiiDiscoveryRTList)

		return vGlobalPiiDiscoveryRTList, nil
	}

	log.Debug("[getGlobalDomainConfigPiiDiscoveryResolver]Id is empty, process all PiiDiscoverys")

	vPiiDiscoveryRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigPiiDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalPiiDiscoveryRTList, nil
    }
	vPiiDiscoveryRTAllObj, err := vPiiDiscoveryRTParent.GetAllPiiDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigPiiDiscoveryResolver]Error getting PiiDiscovery objects %s", err)
        return vGlobalPiiDiscoveryRTList, nil
    }
	for _, i := range vPiiDiscoveryRTAllObj {
		vPiiDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetPiiDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigPiiDiscoveryResolver]Error getting PiiDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vPiiDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"piidiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vPiiDiscoveryRT.Spec.Gnsid)
vSelectors := string(vPiiDiscoveryRT.Spec.Selectors)
vSpec := string(vPiiDiscoveryRT.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPiiDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalPiiDiscoveryRTList = append(vGlobalPiiDiscoveryRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigPiiDiscoveryResolver]Output PiiDiscovery objects %v", vGlobalPiiDiscoveryRTList)

	return vGlobalPiiDiscoveryRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AttackDiscovery Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigAttackDiscoveryResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalAttackDiscoveryRT, error) {
	log.Debugf("[getGlobalDomainConfigAttackDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalAttackDiscoveryRTList []*model.GlobalAttackDiscoveryRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigAttackDiscoveryResolver]Id %q", *id)
		vAttackDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetAttackDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigAttackDiscoveryResolver]Error getting AttackDiscovery node %q : %s", *id, err)
            return vGlobalAttackDiscoveryRTList, nil
        }
		dn := vAttackDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"attackdiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vAttackDiscoveryRT.Spec.Gnsid)
vSelectors := string(vAttackDiscoveryRT.Spec.Selectors)
vSpec := string(vAttackDiscoveryRT.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAttackDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalAttackDiscoveryRTList = append(vGlobalAttackDiscoveryRTList, ret)

		log.Debugf("[getGlobalDomainConfigAttackDiscoveryResolver]Output AttackDiscovery objects %v", vGlobalAttackDiscoveryRTList)

		return vGlobalAttackDiscoveryRTList, nil
	}

	log.Debug("[getGlobalDomainConfigAttackDiscoveryResolver]Id is empty, process all AttackDiscoverys")

	vAttackDiscoveryRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigAttackDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalAttackDiscoveryRTList, nil
    }
	vAttackDiscoveryRTAllObj, err := vAttackDiscoveryRTParent.GetAllAttackDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigAttackDiscoveryResolver]Error getting AttackDiscovery objects %s", err)
        return vGlobalAttackDiscoveryRTList, nil
    }
	for _, i := range vAttackDiscoveryRTAllObj {
		vAttackDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetAttackDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigAttackDiscoveryResolver]Error getting AttackDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAttackDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"attackdiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vAttackDiscoveryRT.Spec.Gnsid)
vSelectors := string(vAttackDiscoveryRT.Spec.Selectors)
vSpec := string(vAttackDiscoveryRT.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAttackDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalAttackDiscoveryRTList = append(vGlobalAttackDiscoveryRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigAttackDiscoveryResolver]Output AttackDiscovery objects %v", vGlobalAttackDiscoveryRTList)

	return vGlobalAttackDiscoveryRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: UserDiscovery Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigUserDiscoveryResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalUserDiscoveryRT, error) {
	log.Debugf("[getGlobalDomainConfigUserDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalUserDiscoveryRTList []*model.GlobalUserDiscoveryRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigUserDiscoveryResolver]Id %q", *id)
		vUserDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetUserDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigUserDiscoveryResolver]Error getting UserDiscovery node %q : %s", *id, err)
            return vGlobalUserDiscoveryRTList, nil
        }
		dn := vUserDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"userdiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vUserDiscoveryRT.Spec.Gnsid)
vSelectors := string(vUserDiscoveryRT.Spec.Selectors)
vSpec := string(vUserDiscoveryRT.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUserDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalUserDiscoveryRTList = append(vGlobalUserDiscoveryRTList, ret)

		log.Debugf("[getGlobalDomainConfigUserDiscoveryResolver]Output UserDiscovery objects %v", vGlobalUserDiscoveryRTList)

		return vGlobalUserDiscoveryRTList, nil
	}

	log.Debug("[getGlobalDomainConfigUserDiscoveryResolver]Id is empty, process all UserDiscoverys")

	vUserDiscoveryRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigUserDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalUserDiscoveryRTList, nil
    }
	vUserDiscoveryRTAllObj, err := vUserDiscoveryRTParent.GetAllUserDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigUserDiscoveryResolver]Error getting UserDiscovery objects %s", err)
        return vGlobalUserDiscoveryRTList, nil
    }
	for _, i := range vUserDiscoveryRTAllObj {
		vUserDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetUserDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigUserDiscoveryResolver]Error getting UserDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vUserDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"userdiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vUserDiscoveryRT.Spec.Gnsid)
vSelectors := string(vUserDiscoveryRT.Spec.Selectors)
vSpec := string(vUserDiscoveryRT.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUserDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalUserDiscoveryRTList = append(vGlobalUserDiscoveryRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigUserDiscoveryResolver]Output UserDiscovery objects %v", vGlobalUserDiscoveryRTList)

	return vGlobalUserDiscoveryRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PublicService Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigPublicServiceResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalPublicServiceRT, error) {
	log.Debugf("[getGlobalDomainConfigPublicServiceResolver]Parent Object %+v", obj)
	var vGlobalPublicServiceRTList []*model.GlobalPublicServiceRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigPublicServiceResolver]Id %q", *id)
		vPublicServiceRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetPublicService(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigPublicServiceResolver]Error getting PublicService node %q : %s", *id, err)
            return vGlobalPublicServiceRTList, nil
        }
		dn := vPublicServiceRT.DisplayName()
parentLabels := map[string]interface{}{"publicservicerts.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vPublicServiceRT.Spec.OwnedBy)
FqdnList, _ := json.Marshal(vPublicServiceRT.Spec.FqdnList)
FqdnListData := string(FqdnList)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPublicServiceRT {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	FqdnList: &FqdnListData,
	}
		vGlobalPublicServiceRTList = append(vGlobalPublicServiceRTList, ret)

		log.Debugf("[getGlobalDomainConfigPublicServiceResolver]Output PublicService objects %v", vGlobalPublicServiceRTList)

		return vGlobalPublicServiceRTList, nil
	}

	log.Debug("[getGlobalDomainConfigPublicServiceResolver]Id is empty, process all PublicServices")

	vPublicServiceRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigPublicServiceResolver]Error getting parent node %s", err)
        return vGlobalPublicServiceRTList, nil
    }
	vPublicServiceRTAllObj, err := vPublicServiceRTParent.GetAllPublicService(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigPublicServiceResolver]Error getting PublicService objects %s", err)
        return vGlobalPublicServiceRTList, nil
    }
	for _, i := range vPublicServiceRTAllObj {
		vPublicServiceRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetPublicService(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigPublicServiceResolver]Error getting PublicService node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vPublicServiceRT.DisplayName()
parentLabels := map[string]interface{}{"publicservicerts.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vPublicServiceRT.Spec.OwnedBy)
FqdnList, _ := json.Marshal(vPublicServiceRT.Spec.FqdnList)
FqdnListData := string(FqdnList)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPublicServiceRT {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	FqdnList: &FqdnListData,
	}
		vGlobalPublicServiceRTList = append(vGlobalPublicServiceRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigPublicServiceResolver]Output PublicService objects %v", vGlobalPublicServiceRTList)

	return vGlobalPublicServiceRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsAccessControlPolicy Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigGnsAccessControlPolicyResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalGnsAccessControlPolicyRT, error) {
	log.Debugf("[getGlobalDomainConfigGnsAccessControlPolicyResolver]Parent Object %+v", obj)
	var vGlobalGnsAccessControlPolicyRTList []*model.GlobalGnsAccessControlPolicyRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigGnsAccessControlPolicyResolver]Id %q", *id)
		vGnsAccessControlPolicyRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGnsAccessControlPolicy(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigGnsAccessControlPolicyResolver]Error getting GnsAccessControlPolicy node %q : %s", *id, err)
            return vGlobalGnsAccessControlPolicyRTList, nil
        }
		dn := vGnsAccessControlPolicyRT.DisplayName()
parentLabels := map[string]interface{}{"gnsaccesscontrolpolicyrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vGnsAccessControlPolicyRT.Spec.Gnsid)
vSpec := string(vGnsAccessControlPolicyRT.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsAccessControlPolicyRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Spec: &vSpec,
	}
		vGlobalGnsAccessControlPolicyRTList = append(vGlobalGnsAccessControlPolicyRTList, ret)

		log.Debugf("[getGlobalDomainConfigGnsAccessControlPolicyResolver]Output GnsAccessControlPolicy objects %v", vGlobalGnsAccessControlPolicyRTList)

		return vGlobalGnsAccessControlPolicyRTList, nil
	}

	log.Debug("[getGlobalDomainConfigGnsAccessControlPolicyResolver]Id is empty, process all GnsAccessControlPolicys")

	vGnsAccessControlPolicyRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGnsAccessControlPolicyResolver]Error getting parent node %s", err)
        return vGlobalGnsAccessControlPolicyRTList, nil
    }
	vGnsAccessControlPolicyRTAllObj, err := vGnsAccessControlPolicyRTParent.GetAllGnsAccessControlPolicy(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGnsAccessControlPolicyResolver]Error getting GnsAccessControlPolicy objects %s", err)
        return vGlobalGnsAccessControlPolicyRTList, nil
    }
	for _, i := range vGnsAccessControlPolicyRTAllObj {
		vGnsAccessControlPolicyRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGnsAccessControlPolicy(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigGnsAccessControlPolicyResolver]Error getting GnsAccessControlPolicy node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsAccessControlPolicyRT.DisplayName()
parentLabels := map[string]interface{}{"gnsaccesscontrolpolicyrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vGnsAccessControlPolicyRT.Spec.Gnsid)
vSpec := string(vGnsAccessControlPolicyRT.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsAccessControlPolicyRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Spec: &vSpec,
	}
		vGlobalGnsAccessControlPolicyRTList = append(vGlobalGnsAccessControlPolicyRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigGnsAccessControlPolicyResolver]Output GnsAccessControlPolicy objects %v", vGlobalGnsAccessControlPolicyRTList)

	return vGlobalGnsAccessControlPolicyRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsSchemaViolationDiscovery Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalSchemaViolationDiscoveryRT, error) {
	log.Debugf("[getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalSchemaViolationDiscoveryRTList []*model.GlobalSchemaViolationDiscoveryRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver]Id %q", *id)
		vSchemaViolationDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGnsSchemaViolationDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver]Error getting GnsSchemaViolationDiscovery node %q : %s", *id, err)
            return vGlobalSchemaViolationDiscoveryRTList, nil
        }
		dn := vSchemaViolationDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"schemaviolationdiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vSchemaViolationDiscoveryRT.Spec.Gnsid)
vSelectors := string(vSchemaViolationDiscoveryRT.Spec.Selectors)
vSpec := string(vSchemaViolationDiscoveryRT.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSchemaViolationDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalSchemaViolationDiscoveryRTList = append(vGlobalSchemaViolationDiscoveryRTList, ret)

		log.Debugf("[getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver]Output GnsSchemaViolationDiscovery objects %v", vGlobalSchemaViolationDiscoveryRTList)

		return vGlobalSchemaViolationDiscoveryRTList, nil
	}

	log.Debug("[getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver]Id is empty, process all GnsSchemaViolationDiscoverys")

	vSchemaViolationDiscoveryRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalSchemaViolationDiscoveryRTList, nil
    }
	vSchemaViolationDiscoveryRTAllObj, err := vSchemaViolationDiscoveryRTParent.GetAllGnsSchemaViolationDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver]Error getting GnsSchemaViolationDiscovery objects %s", err)
        return vGlobalSchemaViolationDiscoveryRTList, nil
    }
	for _, i := range vSchemaViolationDiscoveryRTAllObj {
		vSchemaViolationDiscoveryRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGnsSchemaViolationDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver]Error getting GnsSchemaViolationDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSchemaViolationDiscoveryRT.DisplayName()
parentLabels := map[string]interface{}{"schemaviolationdiscoveryrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vSchemaViolationDiscoveryRT.Spec.Gnsid)
vSelectors := string(vSchemaViolationDiscoveryRT.Spec.Selectors)
vSpec := string(vSchemaViolationDiscoveryRT.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSchemaViolationDiscoveryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Selectors: &vSelectors,
	Spec: &vSpec,
	}
		vGlobalSchemaViolationDiscoveryRTList = append(vGlobalSchemaViolationDiscoveryRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigGnsSchemaViolationDiscoveryResolver]Output GnsSchemaViolationDiscovery objects %v", vGlobalSchemaViolationDiscoveryRTList)

	return vGlobalSchemaViolationDiscoveryRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsSegmentationPolicy Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigGnsSegmentationPolicyResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalGnsSegmentationPolicyRT, error) {
	log.Debugf("[getGlobalDomainConfigGnsSegmentationPolicyResolver]Parent Object %+v", obj)
	var vGlobalGnsSegmentationPolicyRTList []*model.GlobalGnsSegmentationPolicyRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigGnsSegmentationPolicyResolver]Id %q", *id)
		vGnsSegmentationPolicyRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGnsSegmentationPolicy(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigGnsSegmentationPolicyResolver]Error getting GnsSegmentationPolicy node %q : %s", *id, err)
            return vGlobalGnsSegmentationPolicyRTList, nil
        }
		dn := vGnsSegmentationPolicyRT.DisplayName()
parentLabels := map[string]interface{}{"gnssegmentationpolicyrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vGnsSegmentationPolicyRT.Spec.Gnsid)
vSpec := string(vGnsSegmentationPolicyRT.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsSegmentationPolicyRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Spec: &vSpec,
	}
		vGlobalGnsSegmentationPolicyRTList = append(vGlobalGnsSegmentationPolicyRTList, ret)

		log.Debugf("[getGlobalDomainConfigGnsSegmentationPolicyResolver]Output GnsSegmentationPolicy objects %v", vGlobalGnsSegmentationPolicyRTList)

		return vGlobalGnsSegmentationPolicyRTList, nil
	}

	log.Debug("[getGlobalDomainConfigGnsSegmentationPolicyResolver]Id is empty, process all GnsSegmentationPolicys")

	vGnsSegmentationPolicyRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGnsSegmentationPolicyResolver]Error getting parent node %s", err)
        return vGlobalGnsSegmentationPolicyRTList, nil
    }
	vGnsSegmentationPolicyRTAllObj, err := vGnsSegmentationPolicyRTParent.GetAllGnsSegmentationPolicy(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGnsSegmentationPolicyResolver]Error getting GnsSegmentationPolicy objects %s", err)
        return vGlobalGnsSegmentationPolicyRTList, nil
    }
	for _, i := range vGnsSegmentationPolicyRTAllObj {
		vGnsSegmentationPolicyRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGnsSegmentationPolicy(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigGnsSegmentationPolicyResolver]Error getting GnsSegmentationPolicy node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsSegmentationPolicyRT.DisplayName()
parentLabels := map[string]interface{}{"gnssegmentationpolicyrts.global.tsm.tanzu.vmware.com":dn}
vGnsid := string(vGnsSegmentationPolicyRT.Spec.Gnsid)
vSpec := string(vGnsSegmentationPolicyRT.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsSegmentationPolicyRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Gnsid: &vGnsid,
	Spec: &vSpec,
	}
		vGlobalGnsSegmentationPolicyRTList = append(vGlobalGnsSegmentationPolicyRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigGnsSegmentationPolicyResolver]Output GnsSegmentationPolicy objects %v", vGlobalGnsSegmentationPolicyRTList)

	return vGlobalGnsSegmentationPolicyRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: CertificateAuthority Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigCertificateAuthorityResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalCertificateAuthorityRT, error) {
	log.Debugf("[getGlobalDomainConfigCertificateAuthorityResolver]Parent Object %+v", obj)
	var vGlobalCertificateAuthorityRTList []*model.GlobalCertificateAuthorityRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigCertificateAuthorityResolver]Id %q", *id)
		vCertificateAuthorityRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetCertificateAuthority(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigCertificateAuthorityResolver]Error getting CertificateAuthority node %q : %s", *id, err)
            return vGlobalCertificateAuthorityRTList, nil
        }
		dn := vCertificateAuthorityRT.DisplayName()
parentLabels := map[string]interface{}{"certificateauthorityrts.global.tsm.tanzu.vmware.com":dn}
vUrl := string(vCertificateAuthorityRT.Spec.Url)
vType := string(vCertificateAuthorityRT.Spec.Type)
vTemplatePath := string(vCertificateAuthorityRT.Spec.TemplatePath)
vSecretRef := string(vCertificateAuthorityRT.Spec.SecretRef)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateAuthorityRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Url: &vUrl,
	Type: &vType,
	TemplatePath: &vTemplatePath,
	SecretRef: &vSecretRef,
	}
		vGlobalCertificateAuthorityRTList = append(vGlobalCertificateAuthorityRTList, ret)

		log.Debugf("[getGlobalDomainConfigCertificateAuthorityResolver]Output CertificateAuthority objects %v", vGlobalCertificateAuthorityRTList)

		return vGlobalCertificateAuthorityRTList, nil
	}

	log.Debug("[getGlobalDomainConfigCertificateAuthorityResolver]Id is empty, process all CertificateAuthoritys")

	vCertificateAuthorityRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigCertificateAuthorityResolver]Error getting parent node %s", err)
        return vGlobalCertificateAuthorityRTList, nil
    }
	vCertificateAuthorityRTAllObj, err := vCertificateAuthorityRTParent.GetAllCertificateAuthority(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigCertificateAuthorityResolver]Error getting CertificateAuthority objects %s", err)
        return vGlobalCertificateAuthorityRTList, nil
    }
	for _, i := range vCertificateAuthorityRTAllObj {
		vCertificateAuthorityRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetCertificateAuthority(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigCertificateAuthorityResolver]Error getting CertificateAuthority node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vCertificateAuthorityRT.DisplayName()
parentLabels := map[string]interface{}{"certificateauthorityrts.global.tsm.tanzu.vmware.com":dn}
vUrl := string(vCertificateAuthorityRT.Spec.Url)
vType := string(vCertificateAuthorityRT.Spec.Type)
vTemplatePath := string(vCertificateAuthorityRT.Spec.TemplatePath)
vSecretRef := string(vCertificateAuthorityRT.Spec.SecretRef)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateAuthorityRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Url: &vUrl,
	Type: &vType,
	TemplatePath: &vTemplatePath,
	SecretRef: &vSecretRef,
	}
		vGlobalCertificateAuthorityRTList = append(vGlobalCertificateAuthorityRTList, ret)
	}

	log.Debugf("[getGlobalDomainConfigCertificateAuthorityResolver]Output CertificateAuthority objects %v", vGlobalCertificateAuthorityRTList)

	return vGlobalCertificateAuthorityRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsEndpointsConfig Node: DomainConfig PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigGnsEndpointsConfigResolver(obj *model.GlobalDomainConfig, id *string) ([]*model.GlobalGnsEndpointsConfig, error) {
	log.Debugf("[getGlobalDomainConfigGnsEndpointsConfigResolver]Parent Object %+v", obj)
	var vGlobalGnsEndpointsConfigList []*model.GlobalGnsEndpointsConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigGnsEndpointsConfigResolver]Id %q", *id)
		vGnsEndpointsConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGnsEndpointsConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigGnsEndpointsConfigResolver]Error getting GnsEndpointsConfig node %q : %s", *id, err)
            return vGlobalGnsEndpointsConfigList, nil
        }
		dn := vGnsEndpointsConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsendpointsconfigs.global.tsm.tanzu.vmware.com":dn}
vEndpoints := string(vGnsEndpointsConfig.Spec.Endpoints)
vGnsId := string(vGnsEndpointsConfig.Spec.GnsId)
EndpointServices, _ := json.Marshal(vGnsEndpointsConfig.Spec.EndpointServices)
EndpointServicesData := string(EndpointServices)
vServicePortList := string(vGnsEndpointsConfig.Spec.ServicePortList)
vSelector := string(vGnsEndpointsConfig.Spec.Selector)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsEndpointsConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Endpoints: &vEndpoints,
	GnsId: &vGnsId,
	EndpointServices: &EndpointServicesData,
	ServicePortList: &vServicePortList,
	Selector: &vSelector,
	}
		vGlobalGnsEndpointsConfigList = append(vGlobalGnsEndpointsConfigList, ret)

		log.Debugf("[getGlobalDomainConfigGnsEndpointsConfigResolver]Output GnsEndpointsConfig objects %v", vGlobalGnsEndpointsConfigList)

		return vGlobalGnsEndpointsConfigList, nil
	}

	log.Debug("[getGlobalDomainConfigGnsEndpointsConfigResolver]Id is empty, process all GnsEndpointsConfigs")

	vGnsEndpointsConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGnsEndpointsConfigResolver]Error getting parent node %s", err)
        return vGlobalGnsEndpointsConfigList, nil
    }
	vGnsEndpointsConfigAllObj, err := vGnsEndpointsConfigParent.GetAllGnsEndpointsConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigGnsEndpointsConfigResolver]Error getting GnsEndpointsConfig objects %s", err)
        return vGlobalGnsEndpointsConfigList, nil
    }
	for _, i := range vGnsEndpointsConfigAllObj {
		vGnsEndpointsConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGnsEndpointsConfig(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigGnsEndpointsConfigResolver]Error getting GnsEndpointsConfig node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsEndpointsConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsendpointsconfigs.global.tsm.tanzu.vmware.com":dn}
vEndpoints := string(vGnsEndpointsConfig.Spec.Endpoints)
vGnsId := string(vGnsEndpointsConfig.Spec.GnsId)
EndpointServices, _ := json.Marshal(vGnsEndpointsConfig.Spec.EndpointServices)
EndpointServicesData := string(EndpointServices)
vServicePortList := string(vGnsEndpointsConfig.Spec.ServicePortList)
vSelector := string(vGnsEndpointsConfig.Spec.Selector)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsEndpointsConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Endpoints: &vEndpoints,
	GnsId: &vGnsId,
	EndpointServices: &EndpointServicesData,
	ServicePortList: &vServicePortList,
	Selector: &vSelector,
	}
		vGlobalGnsEndpointsConfigList = append(vGlobalGnsEndpointsConfigList, ret)
	}

	log.Debugf("[getGlobalDomainConfigGnsEndpointsConfigResolver]Output GnsEndpointsConfig objects %v", vGlobalGnsEndpointsConfigList)

	return vGlobalGnsEndpointsConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: SecretHashes Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainSecretHashesResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalSecretHash, error) {
	log.Debugf("[getGlobalDomainSecretHashesResolver]Parent Object %+v", obj)
	var vGlobalSecretHashList []*model.GlobalSecretHash
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainSecretHashesResolver]Id %q", *id)
		vSecretHash, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetSecretHashes(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainSecretHashesResolver]Error getting SecretHashes node %q : %s", *id, err)
            return vGlobalSecretHashList, nil
        }
		dn := vSecretHash.DisplayName()
parentLabels := map[string]interface{}{"secrethashes.global.tsm.tanzu.vmware.com":dn}
vName := string(vSecretHash.Spec.Name)
vType := string(vSecretHash.Spec.Type)
vMetadata := string(vSecretHash.Spec.Metadata)
vDataHash := string(vSecretHash.Spec.DataHash)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSecretHash {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Type: &vType,
	Metadata: &vMetadata,
	DataHash: &vDataHash,
	}
		vGlobalSecretHashList = append(vGlobalSecretHashList, ret)

		log.Debugf("[getGlobalDomainSecretHashesResolver]Output SecretHashes objects %v", vGlobalSecretHashList)

		return vGlobalSecretHashList, nil
	}

	log.Debug("[getGlobalDomainSecretHashesResolver]Id is empty, process all SecretHashess")

	vSecretHashParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainSecretHashesResolver]Error getting parent node %s", err)
        return vGlobalSecretHashList, nil
    }
	vSecretHashAllObj, err := vSecretHashParent.GetAllSecretHashes(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainSecretHashesResolver]Error getting SecretHashes objects %s", err)
        return vGlobalSecretHashList, nil
    }
	for _, i := range vSecretHashAllObj {
		vSecretHash, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetSecretHashes(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainSecretHashesResolver]Error getting SecretHashes node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSecretHash.DisplayName()
parentLabels := map[string]interface{}{"secrethashes.global.tsm.tanzu.vmware.com":dn}
vName := string(vSecretHash.Spec.Name)
vType := string(vSecretHash.Spec.Type)
vMetadata := string(vSecretHash.Spec.Metadata)
vDataHash := string(vSecretHash.Spec.DataHash)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSecretHash {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Type: &vType,
	Metadata: &vMetadata,
	DataHash: &vDataHash,
	}
		vGlobalSecretHashList = append(vGlobalSecretHashList, ret)
	}

	log.Debugf("[getGlobalDomainSecretHashesResolver]Output SecretHashes objects %v", vGlobalSecretHashList)

	return vGlobalSecretHashList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceInstances Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainServiceInstancesResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalServiceInstance, error) {
	log.Debugf("[getGlobalDomainServiceInstancesResolver]Parent Object %+v", obj)
	var vGlobalServiceInstanceList []*model.GlobalServiceInstance
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainServiceInstancesResolver]Id %q", *id)
		vServiceInstance, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceInstances(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainServiceInstancesResolver]Error getting ServiceInstances node %q : %s", *id, err)
            return vGlobalServiceInstanceList, nil
        }
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)

		log.Debugf("[getGlobalDomainServiceInstancesResolver]Output ServiceInstances objects %v", vGlobalServiceInstanceList)

		return vGlobalServiceInstanceList, nil
	}

	log.Debug("[getGlobalDomainServiceInstancesResolver]Id is empty, process all ServiceInstancess")

	vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceInstancesResolver]Error getting parent node %s", err)
        return vGlobalServiceInstanceList, nil
    }
	vServiceInstanceAllObj, err := vServiceInstanceParent.GetAllServiceInstances(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceInstancesResolver]Error getting ServiceInstances objects %s", err)
        return vGlobalServiceInstanceList, nil
    }
	for _, i := range vServiceInstanceAllObj {
		vServiceInstance, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceInstances(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainServiceInstancesResolver]Error getting ServiceInstances node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)
	}

	log.Debugf("[getGlobalDomainServiceInstancesResolver]Output ServiceInstances objects %v", vGlobalServiceInstanceList)

	return vGlobalServiceInstanceList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceDeployments Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainServiceDeploymentsResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalServiceDeployment, error) {
	log.Debugf("[getGlobalDomainServiceDeploymentsResolver]Parent Object %+v", obj)
	var vGlobalServiceDeploymentList []*model.GlobalServiceDeployment
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainServiceDeploymentsResolver]Id %q", *id)
		vServiceDeployment, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDeployments(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainServiceDeploymentsResolver]Error getting ServiceDeployments node %q : %s", *id, err)
            return vGlobalServiceDeploymentList, nil
        }
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)

		log.Debugf("[getGlobalDomainServiceDeploymentsResolver]Output ServiceDeployments objects %v", vGlobalServiceDeploymentList)

		return vGlobalServiceDeploymentList, nil
	}

	log.Debug("[getGlobalDomainServiceDeploymentsResolver]Id is empty, process all ServiceDeploymentss")

	vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceDeploymentsResolver]Error getting parent node %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	vServiceDeploymentAllObj, err := vServiceDeploymentParent.GetAllServiceDeployments(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceDeploymentsResolver]Error getting ServiceDeployments objects %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	for _, i := range vServiceDeploymentAllObj {
		vServiceDeployment, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDeployments(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainServiceDeploymentsResolver]Error getting ServiceDeployments node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)
	}

	log.Debugf("[getGlobalDomainServiceDeploymentsResolver]Output ServiceDeployments objects %v", vGlobalServiceDeploymentList)

	return vGlobalServiceDeploymentList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceStatefulSets Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainServiceStatefulSetsResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalServiceStatefulSet, error) {
	log.Debugf("[getGlobalDomainServiceStatefulSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceStatefulSetList []*model.GlobalServiceStatefulSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainServiceStatefulSetsResolver]Id %q", *id)
		vServiceStatefulSet, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceStatefulSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainServiceStatefulSetsResolver]Error getting ServiceStatefulSets node %q : %s", *id, err)
            return vGlobalServiceStatefulSetList, nil
        }
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)

		log.Debugf("[getGlobalDomainServiceStatefulSetsResolver]Output ServiceStatefulSets objects %v", vGlobalServiceStatefulSetList)

		return vGlobalServiceStatefulSetList, nil
	}

	log.Debug("[getGlobalDomainServiceStatefulSetsResolver]Id is empty, process all ServiceStatefulSetss")

	vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceStatefulSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	vServiceStatefulSetAllObj, err := vServiceStatefulSetParent.GetAllServiceStatefulSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceStatefulSetsResolver]Error getting ServiceStatefulSets objects %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	for _, i := range vServiceStatefulSetAllObj {
		vServiceStatefulSet, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceStatefulSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainServiceStatefulSetsResolver]Error getting ServiceStatefulSets node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)
	}

	log.Debugf("[getGlobalDomainServiceStatefulSetsResolver]Output ServiceStatefulSets objects %v", vGlobalServiceStatefulSetList)

	return vGlobalServiceStatefulSetList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceDaemonSets Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainServiceDaemonSetsResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalServiceDaemonSet, error) {
	log.Debugf("[getGlobalDomainServiceDaemonSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceDaemonSetList []*model.GlobalServiceDaemonSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainServiceDaemonSetsResolver]Id %q", *id)
		vServiceDaemonSet, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDaemonSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainServiceDaemonSetsResolver]Error getting ServiceDaemonSets node %q : %s", *id, err)
            return vGlobalServiceDaemonSetList, nil
        }
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)

		log.Debugf("[getGlobalDomainServiceDaemonSetsResolver]Output ServiceDaemonSets objects %v", vGlobalServiceDaemonSetList)

		return vGlobalServiceDaemonSetList, nil
	}

	log.Debug("[getGlobalDomainServiceDaemonSetsResolver]Id is empty, process all ServiceDaemonSetss")

	vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceDaemonSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	vServiceDaemonSetAllObj, err := vServiceDaemonSetParent.GetAllServiceDaemonSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceDaemonSetsResolver]Error getting ServiceDaemonSets objects %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	for _, i := range vServiceDaemonSetAllObj {
		vServiceDaemonSet, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDaemonSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainServiceDaemonSetsResolver]Error getting ServiceDaemonSets node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)
	}

	log.Debugf("[getGlobalDomainServiceDaemonSetsResolver]Output ServiceDaemonSets objects %v", vGlobalServiceDaemonSetList)

	return vGlobalServiceDaemonSetList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceReplicaSets Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainServiceReplicaSetsResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalServiceReplicaSet, error) {
	log.Debugf("[getGlobalDomainServiceReplicaSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceReplicaSetList []*model.GlobalServiceReplicaSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainServiceReplicaSetsResolver]Id %q", *id)
		vServiceReplicaSet, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceReplicaSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainServiceReplicaSetsResolver]Error getting ServiceReplicaSets node %q : %s", *id, err)
            return vGlobalServiceReplicaSetList, nil
        }
		dn := vServiceReplicaSet.DisplayName()
parentLabels := map[string]interface{}{"servicereplicasets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceReplicaSet.Spec.Name)
vMetadata := string(vServiceReplicaSet.Spec.Metadata)
vSpec := string(vServiceReplicaSet.Spec.Spec)
vStatus := string(vServiceReplicaSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceReplicaSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceReplicaSetList = append(vGlobalServiceReplicaSetList, ret)

		log.Debugf("[getGlobalDomainServiceReplicaSetsResolver]Output ServiceReplicaSets objects %v", vGlobalServiceReplicaSetList)

		return vGlobalServiceReplicaSetList, nil
	}

	log.Debug("[getGlobalDomainServiceReplicaSetsResolver]Id is empty, process all ServiceReplicaSetss")

	vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceReplicaSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceReplicaSetList, nil
    }
	vServiceReplicaSetAllObj, err := vServiceReplicaSetParent.GetAllServiceReplicaSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceReplicaSetsResolver]Error getting ServiceReplicaSets objects %s", err)
        return vGlobalServiceReplicaSetList, nil
    }
	for _, i := range vServiceReplicaSetAllObj {
		vServiceReplicaSet, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceReplicaSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainServiceReplicaSetsResolver]Error getting ServiceReplicaSets node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceReplicaSet.DisplayName()
parentLabels := map[string]interface{}{"servicereplicasets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceReplicaSet.Spec.Name)
vMetadata := string(vServiceReplicaSet.Spec.Metadata)
vSpec := string(vServiceReplicaSet.Spec.Spec)
vStatus := string(vServiceReplicaSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceReplicaSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceReplicaSetList = append(vGlobalServiceReplicaSetList, ret)
	}

	log.Debugf("[getGlobalDomainServiceReplicaSetsResolver]Output ServiceReplicaSets objects %v", vGlobalServiceReplicaSetList)

	return vGlobalServiceReplicaSetList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceCronJobs Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainServiceCronJobsResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalServiceCronJob, error) {
	log.Debugf("[getGlobalDomainServiceCronJobsResolver]Parent Object %+v", obj)
	var vGlobalServiceCronJobList []*model.GlobalServiceCronJob
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainServiceCronJobsResolver]Id %q", *id)
		vServiceCronJob, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceCronJobs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainServiceCronJobsResolver]Error getting ServiceCronJobs node %q : %s", *id, err)
            return vGlobalServiceCronJobList, nil
        }
		dn := vServiceCronJob.DisplayName()
parentLabels := map[string]interface{}{"servicecronjobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceCronJob.Spec.Name)
vMetadata := string(vServiceCronJob.Spec.Metadata)
vSpec := string(vServiceCronJob.Spec.Spec)
vStatus := string(vServiceCronJob.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceCronJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceCronJobList = append(vGlobalServiceCronJobList, ret)

		log.Debugf("[getGlobalDomainServiceCronJobsResolver]Output ServiceCronJobs objects %v", vGlobalServiceCronJobList)

		return vGlobalServiceCronJobList, nil
	}

	log.Debug("[getGlobalDomainServiceCronJobsResolver]Id is empty, process all ServiceCronJobss")

	vServiceCronJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceCronJobsResolver]Error getting parent node %s", err)
        return vGlobalServiceCronJobList, nil
    }
	vServiceCronJobAllObj, err := vServiceCronJobParent.GetAllServiceCronJobs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceCronJobsResolver]Error getting ServiceCronJobs objects %s", err)
        return vGlobalServiceCronJobList, nil
    }
	for _, i := range vServiceCronJobAllObj {
		vServiceCronJob, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceCronJobs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainServiceCronJobsResolver]Error getting ServiceCronJobs node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceCronJob.DisplayName()
parentLabels := map[string]interface{}{"servicecronjobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceCronJob.Spec.Name)
vMetadata := string(vServiceCronJob.Spec.Metadata)
vSpec := string(vServiceCronJob.Spec.Spec)
vStatus := string(vServiceCronJob.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceCronJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceCronJobList = append(vGlobalServiceCronJobList, ret)
	}

	log.Debugf("[getGlobalDomainServiceCronJobsResolver]Output ServiceCronJobs objects %v", vGlobalServiceCronJobList)

	return vGlobalServiceCronJobList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceJobs Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainServiceJobsResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalServiceJob, error) {
	log.Debugf("[getGlobalDomainServiceJobsResolver]Parent Object %+v", obj)
	var vGlobalServiceJobList []*model.GlobalServiceJob
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainServiceJobsResolver]Id %q", *id)
		vServiceJob, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceJobs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainServiceJobsResolver]Error getting ServiceJobs node %q : %s", *id, err)
            return vGlobalServiceJobList, nil
        }
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)

		log.Debugf("[getGlobalDomainServiceJobsResolver]Output ServiceJobs objects %v", vGlobalServiceJobList)

		return vGlobalServiceJobList, nil
	}

	log.Debug("[getGlobalDomainServiceJobsResolver]Id is empty, process all ServiceJobss")

	vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceJobsResolver]Error getting parent node %s", err)
        return vGlobalServiceJobList, nil
    }
	vServiceJobAllObj, err := vServiceJobParent.GetAllServiceJobs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceJobsResolver]Error getting ServiceJobs objects %s", err)
        return vGlobalServiceJobList, nil
    }
	for _, i := range vServiceJobAllObj {
		vServiceJob, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceJobs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainServiceJobsResolver]Error getting ServiceJobs node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)
	}

	log.Debugf("[getGlobalDomainServiceJobsResolver]Output ServiceJobs objects %v", vGlobalServiceJobList)

	return vGlobalServiceJobList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: VirtualServices Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainVirtualServicesResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalVirtualService, error) {
	log.Debugf("[getGlobalDomainVirtualServicesResolver]Parent Object %+v", obj)
	var vGlobalVirtualServiceList []*model.GlobalVirtualService
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainVirtualServicesResolver]Id %q", *id)
		vVirtualService, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainVirtualServicesResolver]Error getting VirtualServices node %q : %s", *id, err)
            return vGlobalVirtualServiceList, nil
        }
		dn := vVirtualService.DisplayName()
parentLabels := map[string]interface{}{"virtualservices.global.tsm.tanzu.vmware.com":dn}
vName := string(vVirtualService.Spec.Name)
vCreationTimestamp := string(vVirtualService.Spec.CreationTimestamp)
vApiLink := string(vVirtualService.Spec.ApiLink)
vUid := string(vVirtualService.Spec.Uid)
vAnnotations := string(vVirtualService.Spec.Annotations)
vLabels := string(vVirtualService.Spec.Labels)
vHosts := string(vVirtualService.Spec.Hosts)
vHttp := string(vVirtualService.Spec.Http)
vTls := string(vVirtualService.Spec.Tls)
vTcp := string(vVirtualService.Spec.Tcp)
vGatewayNames := string(vVirtualService.Spec.GatewayNames)
ExportTo, _ := json.Marshal(vVirtualService.Spec.ExportTo)
ExportToData := string(ExportTo)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalVirtualService {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Hosts: &vHosts,
	Http: &vHttp,
	Tls: &vTls,
	Tcp: &vTcp,
	GatewayNames: &vGatewayNames,
	ExportTo: &ExportToData,
	}
		vGlobalVirtualServiceList = append(vGlobalVirtualServiceList, ret)

		log.Debugf("[getGlobalDomainVirtualServicesResolver]Output VirtualServices objects %v", vGlobalVirtualServiceList)

		return vGlobalVirtualServiceList, nil
	}

	log.Debug("[getGlobalDomainVirtualServicesResolver]Id is empty, process all VirtualServicess")

	vVirtualServiceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainVirtualServicesResolver]Error getting parent node %s", err)
        return vGlobalVirtualServiceList, nil
    }
	vVirtualServiceAllObj, err := vVirtualServiceParent.GetAllVirtualServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainVirtualServicesResolver]Error getting VirtualServices objects %s", err)
        return vGlobalVirtualServiceList, nil
    }
	for _, i := range vVirtualServiceAllObj {
		vVirtualService, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainVirtualServicesResolver]Error getting VirtualServices node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vVirtualService.DisplayName()
parentLabels := map[string]interface{}{"virtualservices.global.tsm.tanzu.vmware.com":dn}
vName := string(vVirtualService.Spec.Name)
vCreationTimestamp := string(vVirtualService.Spec.CreationTimestamp)
vApiLink := string(vVirtualService.Spec.ApiLink)
vUid := string(vVirtualService.Spec.Uid)
vAnnotations := string(vVirtualService.Spec.Annotations)
vLabels := string(vVirtualService.Spec.Labels)
vHosts := string(vVirtualService.Spec.Hosts)
vHttp := string(vVirtualService.Spec.Http)
vTls := string(vVirtualService.Spec.Tls)
vTcp := string(vVirtualService.Spec.Tcp)
vGatewayNames := string(vVirtualService.Spec.GatewayNames)
ExportTo, _ := json.Marshal(vVirtualService.Spec.ExportTo)
ExportToData := string(ExportTo)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalVirtualService {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Hosts: &vHosts,
	Http: &vHttp,
	Tls: &vTls,
	Tcp: &vTcp,
	GatewayNames: &vGatewayNames,
	ExportTo: &ExportToData,
	}
		vGlobalVirtualServiceList = append(vGlobalVirtualServiceList, ret)
	}

	log.Debugf("[getGlobalDomainVirtualServicesResolver]Output VirtualServices objects %v", vGlobalVirtualServiceList)

	return vGlobalVirtualServiceList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceEntry Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainServiceEntryResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalServiceEntry, error) {
	log.Debugf("[getGlobalDomainServiceEntryResolver]Parent Object %+v", obj)
	var vGlobalServiceEntryList []*model.GlobalServiceEntry
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainServiceEntryResolver]Id %q", *id)
		vServiceEntry, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceEntry(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainServiceEntryResolver]Error getting ServiceEntry node %q : %s", *id, err)
            return vGlobalServiceEntryList, nil
        }
		dn := vServiceEntry.DisplayName()
parentLabels := map[string]interface{}{"serviceentries.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceEntry.Spec.Name)
vAnnotations := string(vServiceEntry.Spec.Annotations)
vLabels := string(vServiceEntry.Spec.Labels)
vCreationTimestamp := string(vServiceEntry.Spec.CreationTimestamp)
vApiLink := string(vServiceEntry.Spec.ApiLink)
vUid := string(vServiceEntry.Spec.Uid)
vHosts := string(vServiceEntry.Spec.Hosts)
vAddresses := string(vServiceEntry.Spec.Addresses)
vPorts := string(vServiceEntry.Spec.Ports)
vLocation := string(vServiceEntry.Spec.Location)
vResolution := string(vServiceEntry.Spec.Resolution)
vEndpoints := string(vServiceEntry.Spec.Endpoints)
ExportTo, _ := json.Marshal(vServiceEntry.Spec.ExportTo)
ExportToData := string(ExportTo)
vWorkloadSelectorLabels := string(vServiceEntry.Spec.WorkloadSelectorLabels)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceEntry {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Hosts: &vHosts,
	Addresses: &vAddresses,
	Ports: &vPorts,
	Location: &vLocation,
	Resolution: &vResolution,
	Endpoints: &vEndpoints,
	ExportTo: &ExportToData,
	WorkloadSelectorLabels: &vWorkloadSelectorLabels,
	}
		vGlobalServiceEntryList = append(vGlobalServiceEntryList, ret)

		log.Debugf("[getGlobalDomainServiceEntryResolver]Output ServiceEntry objects %v", vGlobalServiceEntryList)

		return vGlobalServiceEntryList, nil
	}

	log.Debug("[getGlobalDomainServiceEntryResolver]Id is empty, process all ServiceEntrys")

	vServiceEntryParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceEntryResolver]Error getting parent node %s", err)
        return vGlobalServiceEntryList, nil
    }
	vServiceEntryAllObj, err := vServiceEntryParent.GetAllServiceEntry(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainServiceEntryResolver]Error getting ServiceEntry objects %s", err)
        return vGlobalServiceEntryList, nil
    }
	for _, i := range vServiceEntryAllObj {
		vServiceEntry, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceEntry(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainServiceEntryResolver]Error getting ServiceEntry node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceEntry.DisplayName()
parentLabels := map[string]interface{}{"serviceentries.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceEntry.Spec.Name)
vAnnotations := string(vServiceEntry.Spec.Annotations)
vLabels := string(vServiceEntry.Spec.Labels)
vCreationTimestamp := string(vServiceEntry.Spec.CreationTimestamp)
vApiLink := string(vServiceEntry.Spec.ApiLink)
vUid := string(vServiceEntry.Spec.Uid)
vHosts := string(vServiceEntry.Spec.Hosts)
vAddresses := string(vServiceEntry.Spec.Addresses)
vPorts := string(vServiceEntry.Spec.Ports)
vLocation := string(vServiceEntry.Spec.Location)
vResolution := string(vServiceEntry.Spec.Resolution)
vEndpoints := string(vServiceEntry.Spec.Endpoints)
ExportTo, _ := json.Marshal(vServiceEntry.Spec.ExportTo)
ExportToData := string(ExportTo)
vWorkloadSelectorLabels := string(vServiceEntry.Spec.WorkloadSelectorLabels)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceEntry {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Hosts: &vHosts,
	Addresses: &vAddresses,
	Ports: &vPorts,
	Location: &vLocation,
	Resolution: &vResolution,
	Endpoints: &vEndpoints,
	ExportTo: &ExportToData,
	WorkloadSelectorLabels: &vWorkloadSelectorLabels,
	}
		vGlobalServiceEntryList = append(vGlobalServiceEntryList, ret)
	}

	log.Debugf("[getGlobalDomainServiceEntryResolver]Output ServiceEntry objects %v", vGlobalServiceEntryList)

	return vGlobalServiceEntryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: WorkloadEntry Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainWorkloadEntryResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalWorkloadEntry, error) {
	log.Debugf("[getGlobalDomainWorkloadEntryResolver]Parent Object %+v", obj)
	var vGlobalWorkloadEntryList []*model.GlobalWorkloadEntry
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainWorkloadEntryResolver]Id %q", *id)
		vWorkloadEntry, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetWorkloadEntry(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainWorkloadEntryResolver]Error getting WorkloadEntry node %q : %s", *id, err)
            return vGlobalWorkloadEntryList, nil
        }
		dn := vWorkloadEntry.DisplayName()
parentLabels := map[string]interface{}{"workloadentries.global.tsm.tanzu.vmware.com":dn}
vName := string(vWorkloadEntry.Spec.Name)
vAnnotations := string(vWorkloadEntry.Spec.Annotations)
vLabels := string(vWorkloadEntry.Spec.Labels)
vCreationTimestamp := string(vWorkloadEntry.Spec.CreationTimestamp)
vApiLink := string(vWorkloadEntry.Spec.ApiLink)
vUid := string(vWorkloadEntry.Spec.Uid)
vAddress := string(vWorkloadEntry.Spec.Address)
vWorkloadLabels := string(vWorkloadEntry.Spec.WorkloadLabels)
vPorts := string(vWorkloadEntry.Spec.Ports)
vLocality := string(vWorkloadEntry.Spec.Locality)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalWorkloadEntry {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Address: &vAddress,
	WorkloadLabels: &vWorkloadLabels,
	Ports: &vPorts,
	Locality: &vLocality,
	}
		vGlobalWorkloadEntryList = append(vGlobalWorkloadEntryList, ret)

		log.Debugf("[getGlobalDomainWorkloadEntryResolver]Output WorkloadEntry objects %v", vGlobalWorkloadEntryList)

		return vGlobalWorkloadEntryList, nil
	}

	log.Debug("[getGlobalDomainWorkloadEntryResolver]Id is empty, process all WorkloadEntrys")

	vWorkloadEntryParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainWorkloadEntryResolver]Error getting parent node %s", err)
        return vGlobalWorkloadEntryList, nil
    }
	vWorkloadEntryAllObj, err := vWorkloadEntryParent.GetAllWorkloadEntry(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainWorkloadEntryResolver]Error getting WorkloadEntry objects %s", err)
        return vGlobalWorkloadEntryList, nil
    }
	for _, i := range vWorkloadEntryAllObj {
		vWorkloadEntry, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetWorkloadEntry(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainWorkloadEntryResolver]Error getting WorkloadEntry node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vWorkloadEntry.DisplayName()
parentLabels := map[string]interface{}{"workloadentries.global.tsm.tanzu.vmware.com":dn}
vName := string(vWorkloadEntry.Spec.Name)
vAnnotations := string(vWorkloadEntry.Spec.Annotations)
vLabels := string(vWorkloadEntry.Spec.Labels)
vCreationTimestamp := string(vWorkloadEntry.Spec.CreationTimestamp)
vApiLink := string(vWorkloadEntry.Spec.ApiLink)
vUid := string(vWorkloadEntry.Spec.Uid)
vAddress := string(vWorkloadEntry.Spec.Address)
vWorkloadLabels := string(vWorkloadEntry.Spec.WorkloadLabels)
vPorts := string(vWorkloadEntry.Spec.Ports)
vLocality := string(vWorkloadEntry.Spec.Locality)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalWorkloadEntry {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Address: &vAddress,
	WorkloadLabels: &vWorkloadLabels,
	Ports: &vPorts,
	Locality: &vLocality,
	}
		vGlobalWorkloadEntryList = append(vGlobalWorkloadEntryList, ret)
	}

	log.Debugf("[getGlobalDomainWorkloadEntryResolver]Output WorkloadEntry objects %v", vGlobalWorkloadEntryList)

	return vGlobalWorkloadEntryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: DestinationRules Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainDestinationRulesResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalDestinationRule, error) {
	log.Debugf("[getGlobalDomainDestinationRulesResolver]Parent Object %+v", obj)
	var vGlobalDestinationRuleList []*model.GlobalDestinationRule
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainDestinationRulesResolver]Id %q", *id)
		vDestinationRule, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainDestinationRulesResolver]Error getting DestinationRules node %q : %s", *id, err)
            return vGlobalDestinationRuleList, nil
        }
		dn := vDestinationRule.DisplayName()
parentLabels := map[string]interface{}{"destinationrules.global.tsm.tanzu.vmware.com":dn}
vName := string(vDestinationRule.Spec.Name)
vAnnotations := string(vDestinationRule.Spec.Annotations)
vLabels := string(vDestinationRule.Spec.Labels)
vCreationTimestamp := string(vDestinationRule.Spec.CreationTimestamp)
vApiLink := string(vDestinationRule.Spec.ApiLink)
vUid := string(vDestinationRule.Spec.Uid)
vHost := string(vDestinationRule.Spec.Host)
vTrafficPolicy := string(vDestinationRule.Spec.TrafficPolicy)
vSubsets := string(vDestinationRule.Spec.Subsets)
ExportTo, _ := json.Marshal(vDestinationRule.Spec.ExportTo)
ExportToData := string(ExportTo)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDestinationRule {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Host: &vHost,
	TrafficPolicy: &vTrafficPolicy,
	Subsets: &vSubsets,
	ExportTo: &ExportToData,
	}
		vGlobalDestinationRuleList = append(vGlobalDestinationRuleList, ret)

		log.Debugf("[getGlobalDomainDestinationRulesResolver]Output DestinationRules objects %v", vGlobalDestinationRuleList)

		return vGlobalDestinationRuleList, nil
	}

	log.Debug("[getGlobalDomainDestinationRulesResolver]Id is empty, process all DestinationRuless")

	vDestinationRuleParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainDestinationRulesResolver]Error getting parent node %s", err)
        return vGlobalDestinationRuleList, nil
    }
	vDestinationRuleAllObj, err := vDestinationRuleParent.GetAllDestinationRules(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainDestinationRulesResolver]Error getting DestinationRules objects %s", err)
        return vGlobalDestinationRuleList, nil
    }
	for _, i := range vDestinationRuleAllObj {
		vDestinationRule, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetDestinationRules(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainDestinationRulesResolver]Error getting DestinationRules node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDestinationRule.DisplayName()
parentLabels := map[string]interface{}{"destinationrules.global.tsm.tanzu.vmware.com":dn}
vName := string(vDestinationRule.Spec.Name)
vAnnotations := string(vDestinationRule.Spec.Annotations)
vLabels := string(vDestinationRule.Spec.Labels)
vCreationTimestamp := string(vDestinationRule.Spec.CreationTimestamp)
vApiLink := string(vDestinationRule.Spec.ApiLink)
vUid := string(vDestinationRule.Spec.Uid)
vHost := string(vDestinationRule.Spec.Host)
vTrafficPolicy := string(vDestinationRule.Spec.TrafficPolicy)
vSubsets := string(vDestinationRule.Spec.Subsets)
ExportTo, _ := json.Marshal(vDestinationRule.Spec.ExportTo)
ExportToData := string(ExportTo)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDestinationRule {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Host: &vHost,
	TrafficPolicy: &vTrafficPolicy,
	Subsets: &vSubsets,
	ExportTo: &ExportToData,
	}
		vGlobalDestinationRuleList = append(vGlobalDestinationRuleList, ret)
	}

	log.Debugf("[getGlobalDomainDestinationRulesResolver]Output DestinationRules objects %v", vGlobalDestinationRuleList)

	return vGlobalDestinationRuleList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Services Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainServicesResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalService, error) {
	log.Debugf("[getGlobalDomainServicesResolver]Parent Object %+v", obj)
	var vGlobalServiceList []*model.GlobalService
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainServicesResolver]Id %q", *id)
		vService, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainServicesResolver]Error getting Services node %q : %s", *id, err)
            return vGlobalServiceList, nil
        }
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)

		log.Debugf("[getGlobalDomainServicesResolver]Output Services objects %v", vGlobalServiceList)

		return vGlobalServiceList, nil
	}

	log.Debug("[getGlobalDomainServicesResolver]Id is empty, process all Servicess")

	vServiceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainServicesResolver]Error getting parent node %s", err)
        return vGlobalServiceList, nil
    }
	vServiceAllObj, err := vServiceParent.GetAllServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainServicesResolver]Error getting Services objects %s", err)
        return vGlobalServiceList, nil
    }
	for _, i := range vServiceAllObj {
		vService, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainServicesResolver]Error getting Services node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)
	}

	log.Debugf("[getGlobalDomainServicesResolver]Output Services objects %v", vGlobalServiceList)

	return vGlobalServiceList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Endpoints Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainEndpointsResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalEndpoints, error) {
	log.Debugf("[getGlobalDomainEndpointsResolver]Parent Object %+v", obj)
	var vGlobalEndpointsList []*model.GlobalEndpoints
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainEndpointsResolver]Id %q", *id)
		vEndpoints, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetEndpoints(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainEndpointsResolver]Error getting Endpoints node %q : %s", *id, err)
            return vGlobalEndpointsList, nil
        }
		dn := vEndpoints.DisplayName()
parentLabels := map[string]interface{}{"endpoints.global.tsm.tanzu.vmware.com":dn}
vName := string(vEndpoints.Spec.Name)
vMetadata := string(vEndpoints.Spec.Metadata)
vSubsets := string(vEndpoints.Spec.Subsets)
vGnsId := string(vEndpoints.Spec.GnsId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalEndpoints {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Subsets: &vSubsets,
	GnsId: &vGnsId,
	}
		vGlobalEndpointsList = append(vGlobalEndpointsList, ret)

		log.Debugf("[getGlobalDomainEndpointsResolver]Output Endpoints objects %v", vGlobalEndpointsList)

		return vGlobalEndpointsList, nil
	}

	log.Debug("[getGlobalDomainEndpointsResolver]Id is empty, process all Endpointss")

	vEndpointsParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainEndpointsResolver]Error getting parent node %s", err)
        return vGlobalEndpointsList, nil
    }
	vEndpointsAllObj, err := vEndpointsParent.GetAllEndpoints(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainEndpointsResolver]Error getting Endpoints objects %s", err)
        return vGlobalEndpointsList, nil
    }
	for _, i := range vEndpointsAllObj {
		vEndpoints, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetEndpoints(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainEndpointsResolver]Error getting Endpoints node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vEndpoints.DisplayName()
parentLabels := map[string]interface{}{"endpoints.global.tsm.tanzu.vmware.com":dn}
vName := string(vEndpoints.Spec.Name)
vMetadata := string(vEndpoints.Spec.Metadata)
vSubsets := string(vEndpoints.Spec.Subsets)
vGnsId := string(vEndpoints.Spec.GnsId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalEndpoints {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Subsets: &vSubsets,
	GnsId: &vGnsId,
	}
		vGlobalEndpointsList = append(vGlobalEndpointsList, ret)
	}

	log.Debugf("[getGlobalDomainEndpointsResolver]Output Endpoints objects %v", vGlobalEndpointsList)

	return vGlobalEndpointsList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Gateways Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainGatewaysResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalGateway, error) {
	log.Debugf("[getGlobalDomainGatewaysResolver]Parent Object %+v", obj)
	var vGlobalGatewayList []*model.GlobalGateway
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainGatewaysResolver]Id %q", *id)
		vGateway, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetGateways(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainGatewaysResolver]Error getting Gateways node %q : %s", *id, err)
            return vGlobalGatewayList, nil
        }
		dn := vGateway.DisplayName()
parentLabels := map[string]interface{}{"gateways.global.tsm.tanzu.vmware.com":dn}
vName := string(vGateway.Spec.Name)
vLabels := string(vGateway.Spec.Labels)
vAnnotations := string(vGateway.Spec.Annotations)
vSpec := string(vGateway.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGateway {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalGatewayList = append(vGlobalGatewayList, ret)

		log.Debugf("[getGlobalDomainGatewaysResolver]Output Gateways objects %v", vGlobalGatewayList)

		return vGlobalGatewayList, nil
	}

	log.Debug("[getGlobalDomainGatewaysResolver]Id is empty, process all Gatewayss")

	vGatewayParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainGatewaysResolver]Error getting parent node %s", err)
        return vGlobalGatewayList, nil
    }
	vGatewayAllObj, err := vGatewayParent.GetAllGateways(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainGatewaysResolver]Error getting Gateways objects %s", err)
        return vGlobalGatewayList, nil
    }
	for _, i := range vGatewayAllObj {
		vGateway, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetGateways(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainGatewaysResolver]Error getting Gateways node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGateway.DisplayName()
parentLabels := map[string]interface{}{"gateways.global.tsm.tanzu.vmware.com":dn}
vName := string(vGateway.Spec.Name)
vLabels := string(vGateway.Spec.Labels)
vAnnotations := string(vGateway.Spec.Annotations)
vSpec := string(vGateway.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGateway {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalGatewayList = append(vGlobalGatewayList, ret)
	}

	log.Debugf("[getGlobalDomainGatewaysResolver]Output Gateways objects %v", vGlobalGatewayList)

	return vGlobalGatewayList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AuthenticationPolicies Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainAuthenticationPoliciesResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalAuthenticationPolicy, error) {
	log.Debugf("[getGlobalDomainAuthenticationPoliciesResolver]Parent Object %+v", obj)
	var vGlobalAuthenticationPolicyList []*model.GlobalAuthenticationPolicy
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainAuthenticationPoliciesResolver]Id %q", *id)
		vAuthenticationPolicy, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetAuthenticationPolicies(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainAuthenticationPoliciesResolver]Error getting AuthenticationPolicies node %q : %s", *id, err)
            return vGlobalAuthenticationPolicyList, nil
        }
		dn := vAuthenticationPolicy.DisplayName()
parentLabels := map[string]interface{}{"authenticationpolicies.global.tsm.tanzu.vmware.com":dn}
vName := string(vAuthenticationPolicy.Spec.Name)
vLabels := string(vAuthenticationPolicy.Spec.Labels)
vAnnotations := string(vAuthenticationPolicy.Spec.Annotations)
vSpec := string(vAuthenticationPolicy.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAuthenticationPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalAuthenticationPolicyList = append(vGlobalAuthenticationPolicyList, ret)

		log.Debugf("[getGlobalDomainAuthenticationPoliciesResolver]Output AuthenticationPolicies objects %v", vGlobalAuthenticationPolicyList)

		return vGlobalAuthenticationPolicyList, nil
	}

	log.Debug("[getGlobalDomainAuthenticationPoliciesResolver]Id is empty, process all AuthenticationPoliciess")

	vAuthenticationPolicyParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainAuthenticationPoliciesResolver]Error getting parent node %s", err)
        return vGlobalAuthenticationPolicyList, nil
    }
	vAuthenticationPolicyAllObj, err := vAuthenticationPolicyParent.GetAllAuthenticationPolicies(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainAuthenticationPoliciesResolver]Error getting AuthenticationPolicies objects %s", err)
        return vGlobalAuthenticationPolicyList, nil
    }
	for _, i := range vAuthenticationPolicyAllObj {
		vAuthenticationPolicy, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetAuthenticationPolicies(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainAuthenticationPoliciesResolver]Error getting AuthenticationPolicies node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAuthenticationPolicy.DisplayName()
parentLabels := map[string]interface{}{"authenticationpolicies.global.tsm.tanzu.vmware.com":dn}
vName := string(vAuthenticationPolicy.Spec.Name)
vLabels := string(vAuthenticationPolicy.Spec.Labels)
vAnnotations := string(vAuthenticationPolicy.Spec.Annotations)
vSpec := string(vAuthenticationPolicy.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAuthenticationPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalAuthenticationPolicyList = append(vGlobalAuthenticationPolicyList, ret)
	}

	log.Debugf("[getGlobalDomainAuthenticationPoliciesResolver]Output AuthenticationPolicies objects %v", vGlobalAuthenticationPolicyList)

	return vGlobalAuthenticationPolicyList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Configmap Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainConfigmapResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalConfigMap, error) {
	log.Debugf("[getGlobalDomainConfigmapResolver]Parent Object %+v", obj)
	var vGlobalConfigMapList []*model.GlobalConfigMap
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainConfigmapResolver]Id %q", *id)
		vConfigMap, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetConfigmap(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainConfigmapResolver]Error getting Configmap node %q : %s", *id, err)
            return vGlobalConfigMapList, nil
        }
		dn := vConfigMap.DisplayName()
parentLabels := map[string]interface{}{"configmaps.global.tsm.tanzu.vmware.com":dn}
vName := string(vConfigMap.Spec.Name)
vAnnotations := string(vConfigMap.Spec.Annotations)
vLabels := string(vConfigMap.Spec.Labels)
vMetadata := string(vConfigMap.Spec.Metadata)
vData := string(vConfigMap.Spec.Data)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalConfigMap {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Metadata: &vMetadata,
	Data: &vData,
	}
		vGlobalConfigMapList = append(vGlobalConfigMapList, ret)

		log.Debugf("[getGlobalDomainConfigmapResolver]Output Configmap objects %v", vGlobalConfigMapList)

		return vGlobalConfigMapList, nil
	}

	log.Debug("[getGlobalDomainConfigmapResolver]Id is empty, process all Configmaps")

	vConfigMapParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigmapResolver]Error getting parent node %s", err)
        return vGlobalConfigMapList, nil
    }
	vConfigMapAllObj, err := vConfigMapParent.GetAllConfigmap(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainConfigmapResolver]Error getting Configmap objects %s", err)
        return vGlobalConfigMapList, nil
    }
	for _, i := range vConfigMapAllObj {
		vConfigMap, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetConfigmap(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainConfigmapResolver]Error getting Configmap node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vConfigMap.DisplayName()
parentLabels := map[string]interface{}{"configmaps.global.tsm.tanzu.vmware.com":dn}
vName := string(vConfigMap.Spec.Name)
vAnnotations := string(vConfigMap.Spec.Annotations)
vLabels := string(vConfigMap.Spec.Labels)
vMetadata := string(vConfigMap.Spec.Metadata)
vData := string(vConfigMap.Spec.Data)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalConfigMap {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Metadata: &vMetadata,
	Data: &vData,
	}
		vGlobalConfigMapList = append(vGlobalConfigMapList, ret)
	}

	log.Debugf("[getGlobalDomainConfigmapResolver]Output Configmap objects %v", vGlobalConfigMapList)

	return vGlobalConfigMapList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Envoyfilter Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainEnvoyfilterResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalEnvoyFilter, error) {
	log.Debugf("[getGlobalDomainEnvoyfilterResolver]Parent Object %+v", obj)
	var vGlobalEnvoyFilterList []*model.GlobalEnvoyFilter
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainEnvoyfilterResolver]Id %q", *id)
		vEnvoyFilter, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetEnvoyfilter(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainEnvoyfilterResolver]Error getting Envoyfilter node %q : %s", *id, err)
            return vGlobalEnvoyFilterList, nil
        }
		dn := vEnvoyFilter.DisplayName()
parentLabels := map[string]interface{}{"envoyfilters.global.tsm.tanzu.vmware.com":dn}
vName := string(vEnvoyFilter.Spec.Name)
vLabels := string(vEnvoyFilter.Spec.Labels)
vAnnotations := string(vEnvoyFilter.Spec.Annotations)
vSpec := string(vEnvoyFilter.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalEnvoyFilter {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalEnvoyFilterList = append(vGlobalEnvoyFilterList, ret)

		log.Debugf("[getGlobalDomainEnvoyfilterResolver]Output Envoyfilter objects %v", vGlobalEnvoyFilterList)

		return vGlobalEnvoyFilterList, nil
	}

	log.Debug("[getGlobalDomainEnvoyfilterResolver]Id is empty, process all Envoyfilters")

	vEnvoyFilterParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainEnvoyfilterResolver]Error getting parent node %s", err)
        return vGlobalEnvoyFilterList, nil
    }
	vEnvoyFilterAllObj, err := vEnvoyFilterParent.GetAllEnvoyfilter(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainEnvoyfilterResolver]Error getting Envoyfilter objects %s", err)
        return vGlobalEnvoyFilterList, nil
    }
	for _, i := range vEnvoyFilterAllObj {
		vEnvoyFilter, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetEnvoyfilter(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainEnvoyfilterResolver]Error getting Envoyfilter node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vEnvoyFilter.DisplayName()
parentLabels := map[string]interface{}{"envoyfilters.global.tsm.tanzu.vmware.com":dn}
vName := string(vEnvoyFilter.Spec.Name)
vLabels := string(vEnvoyFilter.Spec.Labels)
vAnnotations := string(vEnvoyFilter.Spec.Annotations)
vSpec := string(vEnvoyFilter.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalEnvoyFilter {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalEnvoyFilterList = append(vGlobalEnvoyFilterList, ret)
	}

	log.Debugf("[getGlobalDomainEnvoyfilterResolver]Output Envoyfilter objects %v", vGlobalEnvoyFilterList)

	return vGlobalEnvoyFilterList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Autoscalers Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainAutoscalersResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalAutoscalerCR, error) {
	log.Debugf("[getGlobalDomainAutoscalersResolver]Parent Object %+v", obj)
	var vGlobalAutoscalerCRList []*model.GlobalAutoscalerCR
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainAutoscalersResolver]Id %q", *id)
		vAutoscalerCR, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetAutoscalers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainAutoscalersResolver]Error getting Autoscalers node %q : %s", *id, err)
            return vGlobalAutoscalerCRList, nil
        }
		dn := vAutoscalerCR.DisplayName()
parentLabels := map[string]interface{}{"autoscalercrs.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscalerCR.Spec.Name)
vAutoscalingDefinition := string(vAutoscalerCR.Spec.AutoscalingDefinition)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscalerCR {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	AutoscalingDefinition: &vAutoscalingDefinition,
	}
		vGlobalAutoscalerCRList = append(vGlobalAutoscalerCRList, ret)

		log.Debugf("[getGlobalDomainAutoscalersResolver]Output Autoscalers objects %v", vGlobalAutoscalerCRList)

		return vGlobalAutoscalerCRList, nil
	}

	log.Debug("[getGlobalDomainAutoscalersResolver]Id is empty, process all Autoscalerss")

	vAutoscalerCRParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainAutoscalersResolver]Error getting parent node %s", err)
        return vGlobalAutoscalerCRList, nil
    }
	vAutoscalerCRAllObj, err := vAutoscalerCRParent.GetAllAutoscalers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainAutoscalersResolver]Error getting Autoscalers objects %s", err)
        return vGlobalAutoscalerCRList, nil
    }
	for _, i := range vAutoscalerCRAllObj {
		vAutoscalerCR, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetAutoscalers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainAutoscalersResolver]Error getting Autoscalers node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAutoscalerCR.DisplayName()
parentLabels := map[string]interface{}{"autoscalercrs.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscalerCR.Spec.Name)
vAutoscalingDefinition := string(vAutoscalerCR.Spec.AutoscalingDefinition)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscalerCR {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	AutoscalingDefinition: &vAutoscalingDefinition,
	}
		vGlobalAutoscalerCRList = append(vGlobalAutoscalerCRList, ret)
	}

	log.Debugf("[getGlobalDomainAutoscalersResolver]Output Autoscalers objects %v", vGlobalAutoscalerCRList)

	return vGlobalAutoscalerCRList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PeerAuthentication Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainPeerAuthenticationResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalPeerAuthentication, error) {
	log.Debugf("[getGlobalDomainPeerAuthenticationResolver]Parent Object %+v", obj)
	var vGlobalPeerAuthenticationList []*model.GlobalPeerAuthentication
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainPeerAuthenticationResolver]Id %q", *id)
		vPeerAuthentication, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetPeerAuthentication(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainPeerAuthenticationResolver]Error getting PeerAuthentication node %q : %s", *id, err)
            return vGlobalPeerAuthenticationList, nil
        }
		dn := vPeerAuthentication.DisplayName()
parentLabels := map[string]interface{}{"peerauthentications.global.tsm.tanzu.vmware.com":dn}
vName := string(vPeerAuthentication.Spec.Name)
vLabels := string(vPeerAuthentication.Spec.Labels)
vAnnotations := string(vPeerAuthentication.Spec.Annotations)
vSpec := string(vPeerAuthentication.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPeerAuthentication {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalPeerAuthenticationList = append(vGlobalPeerAuthenticationList, ret)

		log.Debugf("[getGlobalDomainPeerAuthenticationResolver]Output PeerAuthentication objects %v", vGlobalPeerAuthenticationList)

		return vGlobalPeerAuthenticationList, nil
	}

	log.Debug("[getGlobalDomainPeerAuthenticationResolver]Id is empty, process all PeerAuthentications")

	vPeerAuthenticationParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainPeerAuthenticationResolver]Error getting parent node %s", err)
        return vGlobalPeerAuthenticationList, nil
    }
	vPeerAuthenticationAllObj, err := vPeerAuthenticationParent.GetAllPeerAuthentication(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainPeerAuthenticationResolver]Error getting PeerAuthentication objects %s", err)
        return vGlobalPeerAuthenticationList, nil
    }
	for _, i := range vPeerAuthenticationAllObj {
		vPeerAuthentication, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetPeerAuthentication(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainPeerAuthenticationResolver]Error getting PeerAuthentication node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vPeerAuthentication.DisplayName()
parentLabels := map[string]interface{}{"peerauthentications.global.tsm.tanzu.vmware.com":dn}
vName := string(vPeerAuthentication.Spec.Name)
vLabels := string(vPeerAuthentication.Spec.Labels)
vAnnotations := string(vPeerAuthentication.Spec.Annotations)
vSpec := string(vPeerAuthentication.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPeerAuthentication {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalPeerAuthenticationList = append(vGlobalPeerAuthenticationList, ret)
	}

	log.Debugf("[getGlobalDomainPeerAuthenticationResolver]Output PeerAuthentication objects %v", vGlobalPeerAuthenticationList)

	return vGlobalPeerAuthenticationList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: KnativeIngresses Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainKnativeIngressesResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalKnativeIngress, error) {
	log.Debugf("[getGlobalDomainKnativeIngressesResolver]Parent Object %+v", obj)
	var vGlobalKnativeIngressList []*model.GlobalKnativeIngress
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainKnativeIngressesResolver]Id %q", *id)
		vKnativeIngress, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetKnativeIngresses(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainKnativeIngressesResolver]Error getting KnativeIngresses node %q : %s", *id, err)
            return vGlobalKnativeIngressList, nil
        }
		dn := vKnativeIngress.DisplayName()
parentLabels := map[string]interface{}{"knativeingresses.global.tsm.tanzu.vmware.com":dn}
vName := string(vKnativeIngress.Spec.Name)
vCreationTimestamp := string(vKnativeIngress.Spec.CreationTimestamp)
vApiLink := string(vKnativeIngress.Spec.ApiLink)
vLabels := string(vKnativeIngress.Spec.Labels)
vAnnotations := string(vKnativeIngress.Spec.Annotations)
vSpec := string(vKnativeIngress.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalKnativeIngress {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalKnativeIngressList = append(vGlobalKnativeIngressList, ret)

		log.Debugf("[getGlobalDomainKnativeIngressesResolver]Output KnativeIngresses objects %v", vGlobalKnativeIngressList)

		return vGlobalKnativeIngressList, nil
	}

	log.Debug("[getGlobalDomainKnativeIngressesResolver]Id is empty, process all KnativeIngressess")

	vKnativeIngressParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainKnativeIngressesResolver]Error getting parent node %s", err)
        return vGlobalKnativeIngressList, nil
    }
	vKnativeIngressAllObj, err := vKnativeIngressParent.GetAllKnativeIngresses(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainKnativeIngressesResolver]Error getting KnativeIngresses objects %s", err)
        return vGlobalKnativeIngressList, nil
    }
	for _, i := range vKnativeIngressAllObj {
		vKnativeIngress, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetKnativeIngresses(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainKnativeIngressesResolver]Error getting KnativeIngresses node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vKnativeIngress.DisplayName()
parentLabels := map[string]interface{}{"knativeingresses.global.tsm.tanzu.vmware.com":dn}
vName := string(vKnativeIngress.Spec.Name)
vCreationTimestamp := string(vKnativeIngress.Spec.CreationTimestamp)
vApiLink := string(vKnativeIngress.Spec.ApiLink)
vLabels := string(vKnativeIngress.Spec.Labels)
vAnnotations := string(vKnativeIngress.Spec.Annotations)
vSpec := string(vKnativeIngress.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalKnativeIngress {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalKnativeIngressList = append(vGlobalKnativeIngressList, ret)
	}

	log.Debugf("[getGlobalDomainKnativeIngressesResolver]Output KnativeIngresses objects %v", vGlobalKnativeIngressList)

	return vGlobalKnativeIngressList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: NetworkAttachmentDefinition Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainNetworkAttachmentDefinitionResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalNetworkAttachmentDefinition, error) {
	log.Debugf("[getGlobalDomainNetworkAttachmentDefinitionResolver]Parent Object %+v", obj)
	var vGlobalNetworkAttachmentDefinitionList []*model.GlobalNetworkAttachmentDefinition
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainNetworkAttachmentDefinitionResolver]Id %q", *id)
		vNetworkAttachmentDefinition, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetNetworkAttachmentDefinition(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainNetworkAttachmentDefinitionResolver]Error getting NetworkAttachmentDefinition node %q : %s", *id, err)
            return vGlobalNetworkAttachmentDefinitionList, nil
        }
		dn := vNetworkAttachmentDefinition.DisplayName()
parentLabels := map[string]interface{}{"networkattachmentdefinitions.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vNetworkAttachmentDefinition.Spec.Metadata)
vName := string(vNetworkAttachmentDefinition.Spec.Name)
vNamespace := string(vNetworkAttachmentDefinition.Spec.Namespace)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNetworkAttachmentDefinition {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Name: &vName,
	Namespace: &vNamespace,
	}
		vGlobalNetworkAttachmentDefinitionList = append(vGlobalNetworkAttachmentDefinitionList, ret)

		log.Debugf("[getGlobalDomainNetworkAttachmentDefinitionResolver]Output NetworkAttachmentDefinition objects %v", vGlobalNetworkAttachmentDefinitionList)

		return vGlobalNetworkAttachmentDefinitionList, nil
	}

	log.Debug("[getGlobalDomainNetworkAttachmentDefinitionResolver]Id is empty, process all NetworkAttachmentDefinitions")

	vNetworkAttachmentDefinitionParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainNetworkAttachmentDefinitionResolver]Error getting parent node %s", err)
        return vGlobalNetworkAttachmentDefinitionList, nil
    }
	vNetworkAttachmentDefinitionAllObj, err := vNetworkAttachmentDefinitionParent.GetAllNetworkAttachmentDefinition(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainNetworkAttachmentDefinitionResolver]Error getting NetworkAttachmentDefinition objects %s", err)
        return vGlobalNetworkAttachmentDefinitionList, nil
    }
	for _, i := range vNetworkAttachmentDefinitionAllObj {
		vNetworkAttachmentDefinition, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetNetworkAttachmentDefinition(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainNetworkAttachmentDefinitionResolver]Error getting NetworkAttachmentDefinition node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vNetworkAttachmentDefinition.DisplayName()
parentLabels := map[string]interface{}{"networkattachmentdefinitions.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vNetworkAttachmentDefinition.Spec.Metadata)
vName := string(vNetworkAttachmentDefinition.Spec.Name)
vNamespace := string(vNetworkAttachmentDefinition.Spec.Namespace)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNetworkAttachmentDefinition {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Name: &vName,
	Namespace: &vNamespace,
	}
		vGlobalNetworkAttachmentDefinitionList = append(vGlobalNetworkAttachmentDefinitionList, ret)
	}

	log.Debugf("[getGlobalDomainNetworkAttachmentDefinitionResolver]Output NetworkAttachmentDefinition objects %v", vGlobalNetworkAttachmentDefinitionList)

	return vGlobalNetworkAttachmentDefinitionList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Issuers Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainIssuersResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalIssuer, error) {
	log.Debugf("[getGlobalDomainIssuersResolver]Parent Object %+v", obj)
	var vGlobalIssuerList []*model.GlobalIssuer
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainIssuersResolver]Id %q", *id)
		vIssuer, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetIssuers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainIssuersResolver]Error getting Issuers node %q : %s", *id, err)
            return vGlobalIssuerList, nil
        }
		dn := vIssuer.DisplayName()
parentLabels := map[string]interface{}{"issuers.global.tsm.tanzu.vmware.com":dn}
vName := string(vIssuer.Spec.Name)
vMetadata := string(vIssuer.Spec.Metadata)
vVenafi := string(vIssuer.Spec.Venafi)
vStatus := string(vIssuer.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalIssuer {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Venafi: &vVenafi,
	Status: &vStatus,
	}
		vGlobalIssuerList = append(vGlobalIssuerList, ret)

		log.Debugf("[getGlobalDomainIssuersResolver]Output Issuers objects %v", vGlobalIssuerList)

		return vGlobalIssuerList, nil
	}

	log.Debug("[getGlobalDomainIssuersResolver]Id is empty, process all Issuerss")

	vIssuerParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainIssuersResolver]Error getting parent node %s", err)
        return vGlobalIssuerList, nil
    }
	vIssuerAllObj, err := vIssuerParent.GetAllIssuers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainIssuersResolver]Error getting Issuers objects %s", err)
        return vGlobalIssuerList, nil
    }
	for _, i := range vIssuerAllObj {
		vIssuer, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetIssuers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainIssuersResolver]Error getting Issuers node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vIssuer.DisplayName()
parentLabels := map[string]interface{}{"issuers.global.tsm.tanzu.vmware.com":dn}
vName := string(vIssuer.Spec.Name)
vMetadata := string(vIssuer.Spec.Metadata)
vVenafi := string(vIssuer.Spec.Venafi)
vStatus := string(vIssuer.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalIssuer {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Venafi: &vVenafi,
	Status: &vStatus,
	}
		vGlobalIssuerList = append(vGlobalIssuerList, ret)
	}

	log.Debugf("[getGlobalDomainIssuersResolver]Output Issuers objects %v", vGlobalIssuerList)

	return vGlobalIssuerList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Certificates Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainCertificatesResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalCertificate, error) {
	log.Debugf("[getGlobalDomainCertificatesResolver]Parent Object %+v", obj)
	var vGlobalCertificateList []*model.GlobalCertificate
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainCertificatesResolver]Id %q", *id)
		vCertificate, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetCertificates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainCertificatesResolver]Error getting Certificates node %q : %s", *id, err)
            return vGlobalCertificateList, nil
        }
		dn := vCertificate.DisplayName()
parentLabels := map[string]interface{}{"certificates.global.tsm.tanzu.vmware.com":dn}
vName := string(vCertificate.Spec.Name)
vMetadata := string(vCertificate.Spec.Metadata)
vIssuerRef := string(vCertificate.Spec.IssuerRef)
vPrivateKey := string(vCertificate.Spec.PrivateKey)
vSubject := string(vCertificate.Spec.Subject)
vCommonName := string(vCertificate.Spec.CommonName)
vDuration := string(vCertificate.Spec.Duration)
DnsNames, _ := json.Marshal(vCertificate.Spec.DnsNames)
DnsNamesData := string(DnsNames)
IpAddresses, _ := json.Marshal(vCertificate.Spec.IpAddresses)
IpAddressesData := string(IpAddresses)
vSecretName := string(vCertificate.Spec.SecretName)
vRenewBefore := string(vCertificate.Spec.RenewBefore)
EmailAddresses, _ := json.Marshal(vCertificate.Spec.EmailAddresses)
EmailAddressesData := string(EmailAddresses)
Uris, _ := json.Marshal(vCertificate.Spec.Uris)
UrisData := string(Uris)
vSecretTemplate := string(vCertificate.Spec.SecretTemplate)
vKeyStores := string(vCertificate.Spec.KeyStores)
vIsCA := bool(vCertificate.Spec.IsCA)
vEncodeUsagesInRequest := string(vCertificate.Spec.EncodeUsagesInRequest)
vUsages := string(vCertificate.Spec.Usages)
vRevisionHistoryLimit := int(vCertificate.Spec.RevisionHistoryLimit)
vAdditionalOutputFormats := string(vCertificate.Spec.AdditionalOutputFormats)
vStatus := string(vCertificate.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificate {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	IssuerRef: &vIssuerRef,
	PrivateKey: &vPrivateKey,
	Subject: &vSubject,
	CommonName: &vCommonName,
	Duration: &vDuration,
	DnsNames: &DnsNamesData,
	IpAddresses: &IpAddressesData,
	SecretName: &vSecretName,
	RenewBefore: &vRenewBefore,
	EmailAddresses: &EmailAddressesData,
	Uris: &UrisData,
	SecretTemplate: &vSecretTemplate,
	KeyStores: &vKeyStores,
	IsCA: &vIsCA,
	EncodeUsagesInRequest: &vEncodeUsagesInRequest,
	Usages: &vUsages,
	RevisionHistoryLimit: &vRevisionHistoryLimit,
	AdditionalOutputFormats: &vAdditionalOutputFormats,
	Status: &vStatus,
	}
		vGlobalCertificateList = append(vGlobalCertificateList, ret)

		log.Debugf("[getGlobalDomainCertificatesResolver]Output Certificates objects %v", vGlobalCertificateList)

		return vGlobalCertificateList, nil
	}

	log.Debug("[getGlobalDomainCertificatesResolver]Id is empty, process all Certificatess")

	vCertificateParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainCertificatesResolver]Error getting parent node %s", err)
        return vGlobalCertificateList, nil
    }
	vCertificateAllObj, err := vCertificateParent.GetAllCertificates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainCertificatesResolver]Error getting Certificates objects %s", err)
        return vGlobalCertificateList, nil
    }
	for _, i := range vCertificateAllObj {
		vCertificate, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetCertificates(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainCertificatesResolver]Error getting Certificates node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vCertificate.DisplayName()
parentLabels := map[string]interface{}{"certificates.global.tsm.tanzu.vmware.com":dn}
vName := string(vCertificate.Spec.Name)
vMetadata := string(vCertificate.Spec.Metadata)
vIssuerRef := string(vCertificate.Spec.IssuerRef)
vPrivateKey := string(vCertificate.Spec.PrivateKey)
vSubject := string(vCertificate.Spec.Subject)
vCommonName := string(vCertificate.Spec.CommonName)
vDuration := string(vCertificate.Spec.Duration)
DnsNames, _ := json.Marshal(vCertificate.Spec.DnsNames)
DnsNamesData := string(DnsNames)
IpAddresses, _ := json.Marshal(vCertificate.Spec.IpAddresses)
IpAddressesData := string(IpAddresses)
vSecretName := string(vCertificate.Spec.SecretName)
vRenewBefore := string(vCertificate.Spec.RenewBefore)
EmailAddresses, _ := json.Marshal(vCertificate.Spec.EmailAddresses)
EmailAddressesData := string(EmailAddresses)
Uris, _ := json.Marshal(vCertificate.Spec.Uris)
UrisData := string(Uris)
vSecretTemplate := string(vCertificate.Spec.SecretTemplate)
vKeyStores := string(vCertificate.Spec.KeyStores)
vIsCA := bool(vCertificate.Spec.IsCA)
vEncodeUsagesInRequest := string(vCertificate.Spec.EncodeUsagesInRequest)
vUsages := string(vCertificate.Spec.Usages)
vRevisionHistoryLimit := int(vCertificate.Spec.RevisionHistoryLimit)
vAdditionalOutputFormats := string(vCertificate.Spec.AdditionalOutputFormats)
vStatus := string(vCertificate.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificate {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	IssuerRef: &vIssuerRef,
	PrivateKey: &vPrivateKey,
	Subject: &vSubject,
	CommonName: &vCommonName,
	Duration: &vDuration,
	DnsNames: &DnsNamesData,
	IpAddresses: &IpAddressesData,
	SecretName: &vSecretName,
	RenewBefore: &vRenewBefore,
	EmailAddresses: &EmailAddressesData,
	Uris: &UrisData,
	SecretTemplate: &vSecretTemplate,
	KeyStores: &vKeyStores,
	IsCA: &vIsCA,
	EncodeUsagesInRequest: &vEncodeUsagesInRequest,
	Usages: &vUsages,
	RevisionHistoryLimit: &vRevisionHistoryLimit,
	AdditionalOutputFormats: &vAdditionalOutputFormats,
	Status: &vStatus,
	}
		vGlobalCertificateList = append(vGlobalCertificateList, ret)
	}

	log.Debugf("[getGlobalDomainCertificatesResolver]Output Certificates objects %v", vGlobalCertificateList)

	return vGlobalCertificateList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: CertificateRequests Node: Domain PKG: Global
//////////////////////////////////////
func getGlobalDomainCertificateRequestsResolver(obj *model.GlobalDomain, id *string) ([]*model.GlobalCertificateRequest, error) {
	log.Debugf("[getGlobalDomainCertificateRequestsResolver]Parent Object %+v", obj)
	var vGlobalCertificateRequestList []*model.GlobalCertificateRequest
	if id != nil && *id != "" {
		log.Debugf("[getGlobalDomainCertificateRequestsResolver]Id %q", *id)
		vCertificateRequest, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetCertificateRequests(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalDomainCertificateRequestsResolver]Error getting CertificateRequests node %q : %s", *id, err)
            return vGlobalCertificateRequestList, nil
        }
		dn := vCertificateRequest.DisplayName()
parentLabels := map[string]interface{}{"certificaterequests.global.tsm.tanzu.vmware.com":dn}
vName := string(vCertificateRequest.Spec.Name)
vMetadata := string(vCertificateRequest.Spec.Metadata)
vIssuerRef := string(vCertificateRequest.Spec.IssuerRef)
vRequest := string(vCertificateRequest.Spec.Request)
vDuration := string(vCertificateRequest.Spec.Duration)
vUid := string(vCertificateRequest.Spec.Uid)
vIsCA := bool(vCertificateRequest.Spec.IsCA)
vUsername := string(vCertificateRequest.Spec.Username)
vUsages := string(vCertificateRequest.Spec.Usages)
vGroups := string(vCertificateRequest.Spec.Groups)
vExtra := string(vCertificateRequest.Spec.Extra)
vStatus := string(vCertificateRequest.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateRequest {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	IssuerRef: &vIssuerRef,
	Request: &vRequest,
	Duration: &vDuration,
	Uid: &vUid,
	IsCA: &vIsCA,
	Username: &vUsername,
	Usages: &vUsages,
	Groups: &vGroups,
	Extra: &vExtra,
	Status: &vStatus,
	}
		vGlobalCertificateRequestList = append(vGlobalCertificateRequestList, ret)

		log.Debugf("[getGlobalDomainCertificateRequestsResolver]Output CertificateRequests objects %v", vGlobalCertificateRequestList)

		return vGlobalCertificateRequestList, nil
	}

	log.Debug("[getGlobalDomainCertificateRequestsResolver]Id is empty, process all CertificateRequestss")

	vCertificateRequestParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetDomains(context.TODO(), getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalDomainCertificateRequestsResolver]Error getting parent node %s", err)
        return vGlobalCertificateRequestList, nil
    }
	vCertificateRequestAllObj, err := vCertificateRequestParent.GetAllCertificateRequests(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalDomainCertificateRequestsResolver]Error getting CertificateRequests objects %s", err)
        return vGlobalCertificateRequestList, nil
    }
	for _, i := range vCertificateRequestAllObj {
		vCertificateRequest, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetCertificateRequests(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalDomainCertificateRequestsResolver]Error getting CertificateRequests node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vCertificateRequest.DisplayName()
parentLabels := map[string]interface{}{"certificaterequests.global.tsm.tanzu.vmware.com":dn}
vName := string(vCertificateRequest.Spec.Name)
vMetadata := string(vCertificateRequest.Spec.Metadata)
vIssuerRef := string(vCertificateRequest.Spec.IssuerRef)
vRequest := string(vCertificateRequest.Spec.Request)
vDuration := string(vCertificateRequest.Spec.Duration)
vUid := string(vCertificateRequest.Spec.Uid)
vIsCA := bool(vCertificateRequest.Spec.IsCA)
vUsername := string(vCertificateRequest.Spec.Username)
vUsages := string(vCertificateRequest.Spec.Usages)
vGroups := string(vCertificateRequest.Spec.Groups)
vExtra := string(vCertificateRequest.Spec.Extra)
vStatus := string(vCertificateRequest.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateRequest {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	IssuerRef: &vIssuerRef,
	Request: &vRequest,
	Duration: &vDuration,
	Uid: &vUid,
	IsCA: &vIsCA,
	Username: &vUsername,
	Usages: &vUsages,
	Groups: &vGroups,
	Extra: &vExtra,
	Status: &vStatus,
	}
		vGlobalCertificateRequestList = append(vGlobalCertificateRequestList, ret)
	}

	log.Debugf("[getGlobalDomainCertificateRequestsResolver]Output CertificateRequests objects %v", vGlobalCertificateRequestList)

	return vGlobalCertificateRequestList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Account Node: ExternalDNSConfigN PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSConfigNAccountResolver(obj *model.GlobalExternalDNSConfigN) (*model.GlobalExternalAccountConfigN, error) {
    log.Debugf("[getGlobalExternalDNSConfigNAccountResolver]Parent Object %+v", obj)
	vExternalAccountConfigNParent, err := nc.GlobalRoot().Config().GetExternalDNS(context.TODO(), getParentName(obj.ParentLabels, "externaldnsconfigns.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSConfigNAccountResolver]Error getting parent node %s", err)
        return &model.GlobalExternalAccountConfigN{}, nil
    }
	vExternalAccountConfigN, err := vExternalAccountConfigNParent.GetAccount(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalExternalDNSConfigNAccountResolver]Error getting Account object %s", err)
        return &model.GlobalExternalAccountConfigN{}, nil
    }
	dn := vExternalAccountConfigN.DisplayName()
parentLabels := map[string]interface{}{"externalaccountconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalAccountConfigN.Spec.Config)
vProxyConfig := string(vExternalAccountConfigN.Spec.ProxyConfig)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalExternalAccountConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	ProxyConfig: &vProxyConfig,
	}
	log.Debugf("[getGlobalExternalDNSConfigNAccountResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: DnsRecords Node: ExternalDNSInventoryPrimaryDomain PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver(obj *model.GlobalExternalDNSInventoryPrimaryDomain, id *string) ([]*model.GlobalExternalDNSInventoryRecord, error) {
	log.Debugf("[getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSInventoryRecordList []*model.GlobalExternalDNSInventoryRecord
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver]Id %q", *id)
		vExternalDNSInventoryRecord, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).PrimaryDomains(getParentName(obj.ParentLabels, "externaldnsinventoryprimarydomains.global.tsm.tanzu.vmware.com")).GetDnsRecords(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver]Error getting DnsRecords node %q : %s", *id, err)
            return vGlobalExternalDNSInventoryRecordList, nil
        }
		dn := vExternalDNSInventoryRecord.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryrecords.global.tsm.tanzu.vmware.com":dn}
vDnsRecordType := string(vExternalDNSInventoryRecord.Spec.DnsRecordType)
vTtl := int(vExternalDNSInventoryRecord.Spec.Ttl)
vValue := string(vExternalDNSInventoryRecord.Spec.Value)
vWeight := int(vExternalDNSInventoryRecord.Spec.Weight)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryRecord {
	Id: &dn,
	ParentLabels: parentLabels,
	DnsRecordType: &vDnsRecordType,
	Ttl: &vTtl,
	Value: &vValue,
	Weight: &vWeight,
	}
		vGlobalExternalDNSInventoryRecordList = append(vGlobalExternalDNSInventoryRecordList, ret)

		log.Debugf("[getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver]Output DnsRecords objects %v", vGlobalExternalDNSInventoryRecordList)

		return vGlobalExternalDNSInventoryRecordList, nil
	}

	log.Debug("[getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver]Id is empty, process all DnsRecordss")

	vExternalDNSInventoryRecordParent, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetPrimaryDomains(context.TODO(), getParentName(obj.ParentLabels, "externaldnsinventoryprimarydomains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSInventoryRecordList, nil
    }
	vExternalDNSInventoryRecordAllObj, err := vExternalDNSInventoryRecordParent.GetAllDnsRecords(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver]Error getting DnsRecords objects %s", err)
        return vGlobalExternalDNSInventoryRecordList, nil
    }
	for _, i := range vExternalDNSInventoryRecordAllObj {
		vExternalDNSInventoryRecord, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).PrimaryDomains(getParentName(obj.ParentLabels, "externaldnsinventoryprimarydomains.global.tsm.tanzu.vmware.com")).GetDnsRecords(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver]Error getting DnsRecords node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalDNSInventoryRecord.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryrecords.global.tsm.tanzu.vmware.com":dn}
vDnsRecordType := string(vExternalDNSInventoryRecord.Spec.DnsRecordType)
vTtl := int(vExternalDNSInventoryRecord.Spec.Ttl)
vValue := string(vExternalDNSInventoryRecord.Spec.Value)
vWeight := int(vExternalDNSInventoryRecord.Spec.Weight)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryRecord {
	Id: &dn,
	ParentLabels: parentLabels,
	DnsRecordType: &vDnsRecordType,
	Ttl: &vTtl,
	Value: &vValue,
	Weight: &vWeight,
	}
		vGlobalExternalDNSInventoryRecordList = append(vGlobalExternalDNSInventoryRecordList, ret)
	}

	log.Debugf("[getGlobalExternalDNSInventoryPrimaryDomainDnsRecordsResolver]Output DnsRecords objects %v", vGlobalExternalDNSInventoryRecordList)

	return vGlobalExternalDNSInventoryRecordList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: HealthCheck Node: ExternalDNSInventoryRecord PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSInventoryRecordHealthCheckResolver(obj *model.GlobalExternalDNSInventoryRecord) (*model.GlobalExternalDNSInventoryHealthCheck, error) {
    log.Debugf("[getGlobalExternalDNSInventoryRecordHealthCheckResolver]Parent Object %+v", obj)
	vExternalDNSInventoryHealthCheckParent, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).PrimaryDomains(getParentName(obj.ParentLabels, "externaldnsinventoryprimarydomains.global.tsm.tanzu.vmware.com")).GetDnsRecords(context.TODO(), getParentName(obj.ParentLabels, "externaldnsinventoryrecords.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryRecordHealthCheckResolver]Error getting parent node %s", err)
        return &model.GlobalExternalDNSInventoryHealthCheck{}, nil
    }
	vExternalDNSInventoryHealthCheck, err := vExternalDNSInventoryHealthCheckParent.GetHealthCheck(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalExternalDNSInventoryRecordHealthCheckResolver]Error getting HealthCheck object %s", err)
        return &model.GlobalExternalDNSInventoryHealthCheck{}, nil
    }
	dn := vExternalDNSInventoryHealthCheck.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryhealthchecks.global.tsm.tanzu.vmware.com":dn}
vName := string(vExternalDNSInventoryHealthCheck.Spec.Name)
vProtocol := string(vExternalDNSInventoryHealthCheck.Spec.Protocol)
vPort := int(vExternalDNSInventoryHealthCheck.Spec.Port)
vPath := string(vExternalDNSInventoryHealthCheck.Spec.Path)
vHealthThreshold := int(vExternalDNSInventoryHealthCheck.Spec.HealthThreshold)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalExternalDNSInventoryHealthCheck {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Protocol: &vProtocol,
	Port: &vPort,
	Path: &vPath,
	HealthThreshold: &vHealthThreshold,
	}
	log.Debugf("[getGlobalExternalDNSInventoryRecordHealthCheckResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: PrimaryDomains Node: ExternalDNSInventoryZone PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSInventoryZonePrimaryDomainsResolver(obj *model.GlobalExternalDNSInventoryZone, id *string) ([]*model.GlobalExternalDNSInventoryPrimaryDomain, error) {
	log.Debugf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSInventoryPrimaryDomainList []*model.GlobalExternalDNSInventoryPrimaryDomain
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Id %q", *id)
		vExternalDNSInventoryPrimaryDomainParent, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), getParentName(obj.ParentLabels, "externaldnsinventoryzones.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Error getting PrimaryDomains %q : %s", *id, err)
			return vGlobalExternalDNSInventoryPrimaryDomainList, nil
		}
		vExternalDNSInventoryPrimaryDomain, err := vExternalDNSInventoryPrimaryDomainParent.GetPrimaryDomains(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Error getting PrimaryDomains %q : %s", *id, err)
			return vGlobalExternalDNSInventoryPrimaryDomainList, nil
		}
		dn := vExternalDNSInventoryPrimaryDomain.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryprimarydomains.global.tsm.tanzu.vmware.com":dn}
vRegion := string(vExternalDNSInventoryPrimaryDomain.Spec.Region)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryPrimaryDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	Region: &vRegion,
	}
		vGlobalExternalDNSInventoryPrimaryDomainList = append(vGlobalExternalDNSInventoryPrimaryDomainList, ret)

		log.Debugf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Output PrimaryDomains objects %v", vGlobalExternalDNSInventoryPrimaryDomainList)

		return vGlobalExternalDNSInventoryPrimaryDomainList, nil
	}

	log.Debug("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Id is empty, process all PrimaryDomainss")

	vExternalDNSInventoryPrimaryDomainParent, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), getParentName(obj.ParentLabels, "externaldnsinventoryzones.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSInventoryPrimaryDomainList, nil
    }
	vExternalDNSInventoryPrimaryDomainAllObj, err := vExternalDNSInventoryPrimaryDomainParent.GetAllPrimaryDomains(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Error getting PrimaryDomains %s", err)
        return vGlobalExternalDNSInventoryPrimaryDomainList, nil
    }
	for _, i := range vExternalDNSInventoryPrimaryDomainAllObj {
		vExternalDNSInventoryPrimaryDomainParent, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), getParentName(obj.ParentLabels, "externaldnsinventoryzones.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vExternalDNSInventoryPrimaryDomain, err := vExternalDNSInventoryPrimaryDomainParent.GetPrimaryDomains(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]Error getting PrimaryDomains node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vExternalDNSInventoryPrimaryDomain.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryprimarydomains.global.tsm.tanzu.vmware.com":dn}
vRegion := string(vExternalDNSInventoryPrimaryDomain.Spec.Region)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryPrimaryDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	Region: &vRegion,
	}
		vGlobalExternalDNSInventoryPrimaryDomainList = append(vGlobalExternalDNSInventoryPrimaryDomainList, ret)
	}
	log.Debugf("[getGlobalExternalDNSInventoryZonePrimaryDomainsResolver]List of PrimaryDomains object %v", vGlobalExternalDNSInventoryPrimaryDomainList)
	return vGlobalExternalDNSInventoryPrimaryDomainList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Zones Node: ExternalDNSInventory PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSInventoryZonesResolver(obj *model.GlobalExternalDNSInventory, id *string) ([]*model.GlobalExternalDNSInventoryZone, error) {
	log.Debugf("[getGlobalExternalDNSInventoryZonesResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSInventoryZoneList []*model.GlobalExternalDNSInventoryZone
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalDNSInventoryZonesResolver]Id %q", *id)
		vExternalDNSInventoryZone, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalDNSInventoryZonesResolver]Error getting Zones node %q : %s", *id, err)
            return vGlobalExternalDNSInventoryZoneList, nil
        }
		dn := vExternalDNSInventoryZone.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryzones.global.tsm.tanzu.vmware.com":dn}
vRecords := int(vExternalDNSInventoryZone.Spec.Records)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryZone {
	Id: &dn,
	ParentLabels: parentLabels,
	Records: &vRecords,
	}
		vGlobalExternalDNSInventoryZoneList = append(vGlobalExternalDNSInventoryZoneList, ret)

		log.Debugf("[getGlobalExternalDNSInventoryZonesResolver]Output Zones objects %v", vGlobalExternalDNSInventoryZoneList)

		return vGlobalExternalDNSInventoryZoneList, nil
	}

	log.Debug("[getGlobalExternalDNSInventoryZonesResolver]Id is empty, process all Zoness")

	vExternalDNSInventoryZoneParent, err := nc.GlobalRoot().Inventory().GetExternalDNS(context.TODO(), getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryZonesResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSInventoryZoneList, nil
    }
	vExternalDNSInventoryZoneAllObj, err := vExternalDNSInventoryZoneParent.GetAllZones(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryZonesResolver]Error getting Zones objects %s", err)
        return vGlobalExternalDNSInventoryZoneList, nil
    }
	for _, i := range vExternalDNSInventoryZoneAllObj {
		vExternalDNSInventoryZone, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetZones(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalDNSInventoryZonesResolver]Error getting Zones node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalDNSInventoryZone.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryzones.global.tsm.tanzu.vmware.com":dn}
vRecords := int(vExternalDNSInventoryZone.Spec.Records)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryZone {
	Id: &dn,
	ParentLabels: parentLabels,
	Records: &vRecords,
	}
		vGlobalExternalDNSInventoryZoneList = append(vGlobalExternalDNSInventoryZoneList, ret)
	}

	log.Debugf("[getGlobalExternalDNSInventoryZonesResolver]Output Zones objects %v", vGlobalExternalDNSInventoryZoneList)

	return vGlobalExternalDNSInventoryZoneList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PrimaryDomains Node: ExternalDNSInventory PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSInventoryPrimaryDomainsResolver(obj *model.GlobalExternalDNSInventory, id *string) ([]*model.GlobalExternalDNSInventoryPrimaryDomain, error) {
	log.Debugf("[getGlobalExternalDNSInventoryPrimaryDomainsResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSInventoryPrimaryDomainList []*model.GlobalExternalDNSInventoryPrimaryDomain
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalDNSInventoryPrimaryDomainsResolver]Id %q", *id)
		vExternalDNSInventoryPrimaryDomain, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetPrimaryDomains(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalDNSInventoryPrimaryDomainsResolver]Error getting PrimaryDomains node %q : %s", *id, err)
            return vGlobalExternalDNSInventoryPrimaryDomainList, nil
        }
		dn := vExternalDNSInventoryPrimaryDomain.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryprimarydomains.global.tsm.tanzu.vmware.com":dn}
vRegion := string(vExternalDNSInventoryPrimaryDomain.Spec.Region)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryPrimaryDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	Region: &vRegion,
	}
		vGlobalExternalDNSInventoryPrimaryDomainList = append(vGlobalExternalDNSInventoryPrimaryDomainList, ret)

		log.Debugf("[getGlobalExternalDNSInventoryPrimaryDomainsResolver]Output PrimaryDomains objects %v", vGlobalExternalDNSInventoryPrimaryDomainList)

		return vGlobalExternalDNSInventoryPrimaryDomainList, nil
	}

	log.Debug("[getGlobalExternalDNSInventoryPrimaryDomainsResolver]Id is empty, process all PrimaryDomainss")

	vExternalDNSInventoryPrimaryDomainParent, err := nc.GlobalRoot().Inventory().GetExternalDNS(context.TODO(), getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryPrimaryDomainsResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSInventoryPrimaryDomainList, nil
    }
	vExternalDNSInventoryPrimaryDomainAllObj, err := vExternalDNSInventoryPrimaryDomainParent.GetAllPrimaryDomains(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryPrimaryDomainsResolver]Error getting PrimaryDomains objects %s", err)
        return vGlobalExternalDNSInventoryPrimaryDomainList, nil
    }
	for _, i := range vExternalDNSInventoryPrimaryDomainAllObj {
		vExternalDNSInventoryPrimaryDomain, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetPrimaryDomains(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalDNSInventoryPrimaryDomainsResolver]Error getting PrimaryDomains node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalDNSInventoryPrimaryDomain.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryprimarydomains.global.tsm.tanzu.vmware.com":dn}
vRegion := string(vExternalDNSInventoryPrimaryDomain.Spec.Region)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryPrimaryDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	Region: &vRegion,
	}
		vGlobalExternalDNSInventoryPrimaryDomainList = append(vGlobalExternalDNSInventoryPrimaryDomainList, ret)
	}

	log.Debugf("[getGlobalExternalDNSInventoryPrimaryDomainsResolver]Output PrimaryDomains objects %v", vGlobalExternalDNSInventoryPrimaryDomainList)

	return vGlobalExternalDNSInventoryPrimaryDomainList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: HealthChecks Node: ExternalDNSInventory PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSInventoryHealthChecksResolver(obj *model.GlobalExternalDNSInventory, id *string) ([]*model.GlobalExternalDNSInventoryHealthCheck, error) {
	log.Debugf("[getGlobalExternalDNSInventoryHealthChecksResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSInventoryHealthCheckList []*model.GlobalExternalDNSInventoryHealthCheck
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalDNSInventoryHealthChecksResolver]Id %q", *id)
		vExternalDNSInventoryHealthCheck, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetHealthChecks(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalDNSInventoryHealthChecksResolver]Error getting HealthChecks node %q : %s", *id, err)
            return vGlobalExternalDNSInventoryHealthCheckList, nil
        }
		dn := vExternalDNSInventoryHealthCheck.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryhealthchecks.global.tsm.tanzu.vmware.com":dn}
vName := string(vExternalDNSInventoryHealthCheck.Spec.Name)
vProtocol := string(vExternalDNSInventoryHealthCheck.Spec.Protocol)
vPort := int(vExternalDNSInventoryHealthCheck.Spec.Port)
vPath := string(vExternalDNSInventoryHealthCheck.Spec.Path)
vHealthThreshold := int(vExternalDNSInventoryHealthCheck.Spec.HealthThreshold)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryHealthCheck {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Protocol: &vProtocol,
	Port: &vPort,
	Path: &vPath,
	HealthThreshold: &vHealthThreshold,
	}
		vGlobalExternalDNSInventoryHealthCheckList = append(vGlobalExternalDNSInventoryHealthCheckList, ret)

		log.Debugf("[getGlobalExternalDNSInventoryHealthChecksResolver]Output HealthChecks objects %v", vGlobalExternalDNSInventoryHealthCheckList)

		return vGlobalExternalDNSInventoryHealthCheckList, nil
	}

	log.Debug("[getGlobalExternalDNSInventoryHealthChecksResolver]Id is empty, process all HealthCheckss")

	vExternalDNSInventoryHealthCheckParent, err := nc.GlobalRoot().Inventory().GetExternalDNS(context.TODO(), getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryHealthChecksResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSInventoryHealthCheckList, nil
    }
	vExternalDNSInventoryHealthCheckAllObj, err := vExternalDNSInventoryHealthCheckParent.GetAllHealthChecks(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSInventoryHealthChecksResolver]Error getting HealthChecks objects %s", err)
        return vGlobalExternalDNSInventoryHealthCheckList, nil
    }
	for _, i := range vExternalDNSInventoryHealthCheckAllObj {
		vExternalDNSInventoryHealthCheck, err := nc.GlobalRoot().Inventory().ExternalDNS(getParentName(obj.ParentLabels, "externaldnsinventories.global.tsm.tanzu.vmware.com")).GetHealthChecks(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalDNSInventoryHealthChecksResolver]Error getting HealthChecks node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalDNSInventoryHealthCheck.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventoryhealthchecks.global.tsm.tanzu.vmware.com":dn}
vName := string(vExternalDNSInventoryHealthCheck.Spec.Name)
vProtocol := string(vExternalDNSInventoryHealthCheck.Spec.Protocol)
vPort := int(vExternalDNSInventoryHealthCheck.Spec.Port)
vPath := string(vExternalDNSInventoryHealthCheck.Spec.Path)
vHealthThreshold := int(vExternalDNSInventoryHealthCheck.Spec.HealthThreshold)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventoryHealthCheck {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Protocol: &vProtocol,
	Port: &vPort,
	Path: &vPath,
	HealthThreshold: &vHealthThreshold,
	}
		vGlobalExternalDNSInventoryHealthCheckList = append(vGlobalExternalDNSInventoryHealthCheckList, ret)
	}

	log.Debugf("[getGlobalExternalDNSInventoryHealthChecksResolver]Output HealthChecks objects %v", vGlobalExternalDNSInventoryHealthCheckList)

	return vGlobalExternalDNSInventoryHealthCheckList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Subdomains Node: ExternalDNSRuntimePrimaryDomain PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver(obj *model.GlobalExternalDNSRuntimePrimaryDomain, id *string) ([]*model.GlobalExternalDNSRuntimeSubdomain, error) {
	log.Debugf("[getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSRuntimeSubdomainList []*model.GlobalExternalDNSRuntimeSubdomain
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver]Id %q", *id)
		vExternalDNSRuntimeSubdomain, err := nc.GlobalRoot().Runtime().ExternalDNS().PrimaryDomains(getParentName(obj.ParentLabels, "externaldnsruntimeprimarydomains.global.tsm.tanzu.vmware.com")).GetSubdomains(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver]Error getting Subdomains node %q : %s", *id, err)
            return vGlobalExternalDNSRuntimeSubdomainList, nil
        }
		dn := vExternalDNSRuntimeSubdomain.DisplayName()
parentLabels := map[string]interface{}{"externaldnsruntimesubdomains.global.tsm.tanzu.vmware.com":dn}
vRecordType := string(vExternalDNSRuntimeSubdomain.Spec.RecordType)
vTtl := int(vExternalDNSRuntimeSubdomain.Spec.Ttl)
vHealthCheckDomain := string(vExternalDNSRuntimeSubdomain.Spec.HealthCheckDomain)
vHealthCheckExternalPort := int(vExternalDNSRuntimeSubdomain.Spec.HealthCheckExternalPort)
vHealthCheckPort := int(vExternalDNSRuntimeSubdomain.Spec.HealthCheckPort)
vHealthCheckPath := string(vExternalDNSRuntimeSubdomain.Spec.HealthCheckPath)
vHealthCheckThreshold := int(vExternalDNSRuntimeSubdomain.Spec.HealthCheckThreshold)
vHealthCheckInterval := int(vExternalDNSRuntimeSubdomain.Spec.HealthCheckInterval)
vHealthCheckProtocol := string(vExternalDNSRuntimeSubdomain.Spec.HealthCheckProtocol)
vGnsVersion := string(vExternalDNSRuntimeSubdomain.Spec.GnsVersion)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSRuntimeSubdomain {
	Id: &dn,
	ParentLabels: parentLabels,
	RecordType: &vRecordType,
	Ttl: &vTtl,
	HealthCheckDomain: &vHealthCheckDomain,
	HealthCheckExternalPort: &vHealthCheckExternalPort,
	HealthCheckPort: &vHealthCheckPort,
	HealthCheckPath: &vHealthCheckPath,
	HealthCheckThreshold: &vHealthCheckThreshold,
	HealthCheckInterval: &vHealthCheckInterval,
	HealthCheckProtocol: &vHealthCheckProtocol,
	GnsVersion: &vGnsVersion,
	}
		vGlobalExternalDNSRuntimeSubdomainList = append(vGlobalExternalDNSRuntimeSubdomainList, ret)

		log.Debugf("[getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver]Output Subdomains objects %v", vGlobalExternalDNSRuntimeSubdomainList)

		return vGlobalExternalDNSRuntimeSubdomainList, nil
	}

	log.Debug("[getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver]Id is empty, process all Subdomainss")

	vExternalDNSRuntimeSubdomainParent, err := nc.GlobalRoot().Runtime().ExternalDNS().GetPrimaryDomains(context.TODO(), getParentName(obj.ParentLabels, "externaldnsruntimeprimarydomains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSRuntimeSubdomainList, nil
    }
	vExternalDNSRuntimeSubdomainAllObj, err := vExternalDNSRuntimeSubdomainParent.GetAllSubdomains(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver]Error getting Subdomains objects %s", err)
        return vGlobalExternalDNSRuntimeSubdomainList, nil
    }
	for _, i := range vExternalDNSRuntimeSubdomainAllObj {
		vExternalDNSRuntimeSubdomain, err := nc.GlobalRoot().Runtime().ExternalDNS().PrimaryDomains(getParentName(obj.ParentLabels, "externaldnsruntimeprimarydomains.global.tsm.tanzu.vmware.com")).GetSubdomains(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver]Error getting Subdomains node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalDNSRuntimeSubdomain.DisplayName()
parentLabels := map[string]interface{}{"externaldnsruntimesubdomains.global.tsm.tanzu.vmware.com":dn}
vRecordType := string(vExternalDNSRuntimeSubdomain.Spec.RecordType)
vTtl := int(vExternalDNSRuntimeSubdomain.Spec.Ttl)
vHealthCheckDomain := string(vExternalDNSRuntimeSubdomain.Spec.HealthCheckDomain)
vHealthCheckExternalPort := int(vExternalDNSRuntimeSubdomain.Spec.HealthCheckExternalPort)
vHealthCheckPort := int(vExternalDNSRuntimeSubdomain.Spec.HealthCheckPort)
vHealthCheckPath := string(vExternalDNSRuntimeSubdomain.Spec.HealthCheckPath)
vHealthCheckThreshold := int(vExternalDNSRuntimeSubdomain.Spec.HealthCheckThreshold)
vHealthCheckInterval := int(vExternalDNSRuntimeSubdomain.Spec.HealthCheckInterval)
vHealthCheckProtocol := string(vExternalDNSRuntimeSubdomain.Spec.HealthCheckProtocol)
vGnsVersion := string(vExternalDNSRuntimeSubdomain.Spec.GnsVersion)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSRuntimeSubdomain {
	Id: &dn,
	ParentLabels: parentLabels,
	RecordType: &vRecordType,
	Ttl: &vTtl,
	HealthCheckDomain: &vHealthCheckDomain,
	HealthCheckExternalPort: &vHealthCheckExternalPort,
	HealthCheckPort: &vHealthCheckPort,
	HealthCheckPath: &vHealthCheckPath,
	HealthCheckThreshold: &vHealthCheckThreshold,
	HealthCheckInterval: &vHealthCheckInterval,
	HealthCheckProtocol: &vHealthCheckProtocol,
	GnsVersion: &vGnsVersion,
	}
		vGlobalExternalDNSRuntimeSubdomainList = append(vGlobalExternalDNSRuntimeSubdomainList, ret)
	}

	log.Debugf("[getGlobalExternalDNSRuntimePrimaryDomainSubdomainsResolver]Output Subdomains objects %v", vGlobalExternalDNSRuntimeSubdomainList)

	return vGlobalExternalDNSRuntimeSubdomainList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PrimaryDomains Node: ExternalDNSRuntime PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSRuntimePrimaryDomainsResolver(obj *model.GlobalExternalDNSRuntime, id *string) ([]*model.GlobalExternalDNSRuntimePrimaryDomain, error) {
	log.Debugf("[getGlobalExternalDNSRuntimePrimaryDomainsResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSRuntimePrimaryDomainList []*model.GlobalExternalDNSRuntimePrimaryDomain
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalDNSRuntimePrimaryDomainsResolver]Id %q", *id)
		vExternalDNSRuntimePrimaryDomain, err := nc.GlobalRoot().Runtime().ExternalDNS().GetPrimaryDomains(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalDNSRuntimePrimaryDomainsResolver]Error getting PrimaryDomains node %q : %s", *id, err)
            return vGlobalExternalDNSRuntimePrimaryDomainList, nil
        }
		dn := vExternalDNSRuntimePrimaryDomain.DisplayName()
parentLabels := map[string]interface{}{"externaldnsruntimeprimarydomains.global.tsm.tanzu.vmware.com":dn}
vPrimaryDomain := string(vExternalDNSRuntimePrimaryDomain.Spec.PrimaryDomain)
vDnsServerID := string(vExternalDNSRuntimePrimaryDomain.Spec.DnsServerID)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSRuntimePrimaryDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	PrimaryDomain: &vPrimaryDomain,
	DnsServerID: &vDnsServerID,
	}
		vGlobalExternalDNSRuntimePrimaryDomainList = append(vGlobalExternalDNSRuntimePrimaryDomainList, ret)

		log.Debugf("[getGlobalExternalDNSRuntimePrimaryDomainsResolver]Output PrimaryDomains objects %v", vGlobalExternalDNSRuntimePrimaryDomainList)

		return vGlobalExternalDNSRuntimePrimaryDomainList, nil
	}

	log.Debug("[getGlobalExternalDNSRuntimePrimaryDomainsResolver]Id is empty, process all PrimaryDomainss")

	vExternalDNSRuntimePrimaryDomainParent, err := nc.GlobalRoot().Runtime().GetExternalDNS(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSRuntimePrimaryDomainsResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSRuntimePrimaryDomainList, nil
    }
	vExternalDNSRuntimePrimaryDomainAllObj, err := vExternalDNSRuntimePrimaryDomainParent.GetAllPrimaryDomains(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSRuntimePrimaryDomainsResolver]Error getting PrimaryDomains objects %s", err)
        return vGlobalExternalDNSRuntimePrimaryDomainList, nil
    }
	for _, i := range vExternalDNSRuntimePrimaryDomainAllObj {
		vExternalDNSRuntimePrimaryDomain, err := nc.GlobalRoot().Runtime().ExternalDNS().GetPrimaryDomains(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalDNSRuntimePrimaryDomainsResolver]Error getting PrimaryDomains node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalDNSRuntimePrimaryDomain.DisplayName()
parentLabels := map[string]interface{}{"externaldnsruntimeprimarydomains.global.tsm.tanzu.vmware.com":dn}
vPrimaryDomain := string(vExternalDNSRuntimePrimaryDomain.Spec.PrimaryDomain)
vDnsServerID := string(vExternalDNSRuntimePrimaryDomain.Spec.DnsServerID)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSRuntimePrimaryDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	PrimaryDomain: &vPrimaryDomain,
	DnsServerID: &vDnsServerID,
	}
		vGlobalExternalDNSRuntimePrimaryDomainList = append(vGlobalExternalDNSRuntimePrimaryDomainList, ret)
	}

	log.Debugf("[getGlobalExternalDNSRuntimePrimaryDomainsResolver]Output PrimaryDomains objects %v", vGlobalExternalDNSRuntimePrimaryDomainList)

	return vGlobalExternalDNSRuntimePrimaryDomainList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Endpoints Node: ExternalDNSRuntimeSubdomain PKG: Global
//////////////////////////////////////
func getGlobalExternalDNSRuntimeSubdomainEndpointsResolver(obj *model.GlobalExternalDNSRuntimeSubdomain, id *string) ([]*model.GlobalExternalDNSRuntimeEndpoint, error) {
	log.Debugf("[getGlobalExternalDNSRuntimeSubdomainEndpointsResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSRuntimeEndpointList []*model.GlobalExternalDNSRuntimeEndpoint
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalDNSRuntimeSubdomainEndpointsResolver]Id %q", *id)
		vExternalDNSRuntimeEndpoint, err := nc.GlobalRoot().Runtime().ExternalDNS().PrimaryDomains(getParentName(obj.ParentLabels, "externaldnsruntimeprimarydomains.global.tsm.tanzu.vmware.com")).Subdomains(getParentName(obj.ParentLabels, "externaldnsruntimesubdomains.global.tsm.tanzu.vmware.com")).GetEndpoints(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalDNSRuntimeSubdomainEndpointsResolver]Error getting Endpoints node %q : %s", *id, err)
            return vGlobalExternalDNSRuntimeEndpointList, nil
        }
		dn := vExternalDNSRuntimeEndpoint.DisplayName()
parentLabels := map[string]interface{}{"externaldnsruntimeendpoints.global.tsm.tanzu.vmware.com":dn}
vWeight := int(vExternalDNSRuntimeEndpoint.Spec.Weight)
vActive := bool(vExternalDNSRuntimeEndpoint.Spec.Active)
vGnsVersion := string(vExternalDNSRuntimeEndpoint.Spec.GnsVersion)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSRuntimeEndpoint {
	Id: &dn,
	ParentLabels: parentLabels,
	Weight: &vWeight,
	Active: &vActive,
	GnsVersion: &vGnsVersion,
	}
		vGlobalExternalDNSRuntimeEndpointList = append(vGlobalExternalDNSRuntimeEndpointList, ret)

		log.Debugf("[getGlobalExternalDNSRuntimeSubdomainEndpointsResolver]Output Endpoints objects %v", vGlobalExternalDNSRuntimeEndpointList)

		return vGlobalExternalDNSRuntimeEndpointList, nil
	}

	log.Debug("[getGlobalExternalDNSRuntimeSubdomainEndpointsResolver]Id is empty, process all Endpointss")

	vExternalDNSRuntimeEndpointParent, err := nc.GlobalRoot().Runtime().ExternalDNS().PrimaryDomains(getParentName(obj.ParentLabels, "externaldnsruntimeprimarydomains.global.tsm.tanzu.vmware.com")).GetSubdomains(context.TODO(), getParentName(obj.ParentLabels, "externaldnsruntimesubdomains.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSRuntimeSubdomainEndpointsResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSRuntimeEndpointList, nil
    }
	vExternalDNSRuntimeEndpointAllObj, err := vExternalDNSRuntimeEndpointParent.GetAllEndpoints(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalDNSRuntimeSubdomainEndpointsResolver]Error getting Endpoints objects %s", err)
        return vGlobalExternalDNSRuntimeEndpointList, nil
    }
	for _, i := range vExternalDNSRuntimeEndpointAllObj {
		vExternalDNSRuntimeEndpoint, err := nc.GlobalRoot().Runtime().ExternalDNS().PrimaryDomains(getParentName(obj.ParentLabels, "externaldnsruntimeprimarydomains.global.tsm.tanzu.vmware.com")).Subdomains(getParentName(obj.ParentLabels, "externaldnsruntimesubdomains.global.tsm.tanzu.vmware.com")).GetEndpoints(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalDNSRuntimeSubdomainEndpointsResolver]Error getting Endpoints node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalDNSRuntimeEndpoint.DisplayName()
parentLabels := map[string]interface{}{"externaldnsruntimeendpoints.global.tsm.tanzu.vmware.com":dn}
vWeight := int(vExternalDNSRuntimeEndpoint.Spec.Weight)
vActive := bool(vExternalDNSRuntimeEndpoint.Spec.Active)
vGnsVersion := string(vExternalDNSRuntimeEndpoint.Spec.GnsVersion)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSRuntimeEndpoint {
	Id: &dn,
	ParentLabels: parentLabels,
	Weight: &vWeight,
	Active: &vActive,
	GnsVersion: &vGnsVersion,
	}
		vGlobalExternalDNSRuntimeEndpointList = append(vGlobalExternalDNSRuntimeEndpointList, ret)
	}

	log.Debugf("[getGlobalExternalDNSRuntimeSubdomainEndpointsResolver]Output Endpoints objects %v", vGlobalExternalDNSRuntimeEndpointList)

	return vGlobalExternalDNSRuntimeEndpointList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Plugins Node: ExternalPluginConfigFolder PKG: Global
//////////////////////////////////////
func getGlobalExternalPluginConfigFolderPluginsResolver(obj *model.GlobalExternalPluginConfigFolder, id *string) ([]*model.GlobalExternalPluginConfig, error) {
	log.Debugf("[getGlobalExternalPluginConfigFolderPluginsResolver]Parent Object %+v", obj)
	var vGlobalExternalPluginConfigList []*model.GlobalExternalPluginConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalPluginConfigFolderPluginsResolver]Id %q", *id)
		vExternalPluginConfig, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).GetPlugins(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalPluginConfigFolderPluginsResolver]Error getting Plugins node %q : %s", *id, err)
            return vGlobalExternalPluginConfigList, nil
        }
		dn := vExternalPluginConfig.DisplayName()
parentLabels := map[string]interface{}{"externalpluginconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vExternalPluginConfig.Spec.Name)
vProviderName := string(vExternalPluginConfig.Spec.ProviderName)
vInstallConfig := string(vExternalPluginConfig.Spec.InstallConfig)
vType := string(vExternalPluginConfig.Spec.Type)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalPluginConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ProviderName: &vProviderName,
	InstallConfig: &vInstallConfig,
	Type: &vType,
	}
		vGlobalExternalPluginConfigList = append(vGlobalExternalPluginConfigList, ret)

		log.Debugf("[getGlobalExternalPluginConfigFolderPluginsResolver]Output Plugins objects %v", vGlobalExternalPluginConfigList)

		return vGlobalExternalPluginConfigList, nil
	}

	log.Debug("[getGlobalExternalPluginConfigFolderPluginsResolver]Id is empty, process all Pluginss")

	vExternalPluginConfigParent, err := nc.GlobalRoot().Config().GetExternalPlugins(context.TODO(), getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginConfigFolderPluginsResolver]Error getting parent node %s", err)
        return vGlobalExternalPluginConfigList, nil
    }
	vExternalPluginConfigAllObj, err := vExternalPluginConfigParent.GetAllPlugins(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginConfigFolderPluginsResolver]Error getting Plugins objects %s", err)
        return vGlobalExternalPluginConfigList, nil
    }
	for _, i := range vExternalPluginConfigAllObj {
		vExternalPluginConfig, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).GetPlugins(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalPluginConfigFolderPluginsResolver]Error getting Plugins node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalPluginConfig.DisplayName()
parentLabels := map[string]interface{}{"externalpluginconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vExternalPluginConfig.Spec.Name)
vProviderName := string(vExternalPluginConfig.Spec.ProviderName)
vInstallConfig := string(vExternalPluginConfig.Spec.InstallConfig)
vType := string(vExternalPluginConfig.Spec.Type)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalPluginConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ProviderName: &vProviderName,
	InstallConfig: &vInstallConfig,
	Type: &vType,
	}
		vGlobalExternalPluginConfigList = append(vGlobalExternalPluginConfigList, ret)
	}

	log.Debugf("[getGlobalExternalPluginConfigFolderPluginsResolver]Output Plugins objects %v", vGlobalExternalPluginConfigList)

	return vGlobalExternalPluginConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PluginInstances Node: ExternalPluginConfig PKG: Global
//////////////////////////////////////
func getGlobalExternalPluginConfigPluginInstancesResolver(obj *model.GlobalExternalPluginConfig, id *string) ([]*model.GlobalExternalPluginInstanceConfig, error) {
	log.Debugf("[getGlobalExternalPluginConfigPluginInstancesResolver]Parent Object %+v", obj)
	var vGlobalExternalPluginInstanceConfigList []*model.GlobalExternalPluginInstanceConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalPluginConfigPluginInstancesResolver]Id %q", *id)
		vExternalPluginInstanceConfig, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).GetPluginInstances(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalPluginConfigPluginInstancesResolver]Error getting PluginInstances node %q : %s", *id, err)
            return vGlobalExternalPluginInstanceConfigList, nil
        }
		dn := vExternalPluginInstanceConfig.DisplayName()
parentLabels := map[string]interface{}{"externalplugininstanceconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vExternalPluginInstanceConfig.Spec.Name)
vSecurityToken := string(vExternalPluginInstanceConfig.Spec.SecurityToken)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalPluginInstanceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	SecurityToken: &vSecurityToken,
	}
		vGlobalExternalPluginInstanceConfigList = append(vGlobalExternalPluginInstanceConfigList, ret)

		log.Debugf("[getGlobalExternalPluginConfigPluginInstancesResolver]Output PluginInstances objects %v", vGlobalExternalPluginInstanceConfigList)

		return vGlobalExternalPluginInstanceConfigList, nil
	}

	log.Debug("[getGlobalExternalPluginConfigPluginInstancesResolver]Id is empty, process all PluginInstancess")

	vExternalPluginInstanceConfigParent, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).GetPlugins(context.TODO(), getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginConfigPluginInstancesResolver]Error getting parent node %s", err)
        return vGlobalExternalPluginInstanceConfigList, nil
    }
	vExternalPluginInstanceConfigAllObj, err := vExternalPluginInstanceConfigParent.GetAllPluginInstances(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginConfigPluginInstancesResolver]Error getting PluginInstances objects %s", err)
        return vGlobalExternalPluginInstanceConfigList, nil
    }
	for _, i := range vExternalPluginInstanceConfigAllObj {
		vExternalPluginInstanceConfig, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).GetPluginInstances(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalPluginConfigPluginInstancesResolver]Error getting PluginInstances node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalPluginInstanceConfig.DisplayName()
parentLabels := map[string]interface{}{"externalplugininstanceconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vExternalPluginInstanceConfig.Spec.Name)
vSecurityToken := string(vExternalPluginInstanceConfig.Spec.SecurityToken)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalPluginInstanceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	SecurityToken: &vSecurityToken,
	}
		vGlobalExternalPluginInstanceConfigList = append(vGlobalExternalPluginInstanceConfigList, ret)
	}

	log.Debugf("[getGlobalExternalPluginConfigPluginInstancesResolver]Output PluginInstances objects %v", vGlobalExternalPluginInstanceConfigList)

	return vGlobalExternalPluginInstanceConfigList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Capabilitiy Node: ExternalPluginInstanceConfig PKG: Global
//////////////////////////////////////
func getGlobalExternalPluginInstanceConfigCapabilitiyResolver(obj *model.GlobalExternalPluginInstanceConfig, id *string) (*model.GlobalExternalPluginCapability, error) {
	log.Debugf("[getGlobalExternalPluginInstanceConfigCapabilitiyResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalExternalPluginInstanceConfigCapabilitiyResolver]Id %q", *id)
		vExternalPluginCapability, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).PluginInstances(getParentName(obj.ParentLabels, "externalplugininstanceconfigs.global.tsm.tanzu.vmware.com")).GetCapabilitiy(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalPluginInstanceConfigCapabilitiyResolver]Error getting Capabilitiy node %q : %s", *id, err)
			return &model.GlobalExternalPluginCapability{}, nil
		}
		dn := vExternalPluginCapability.DisplayName()
parentLabels := map[string]interface{}{"externalplugincapabilities.global.tsm.tanzu.vmware.com":dn}
vCapability := string(vExternalPluginCapability.Spec.Capability)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalExternalPluginCapability {
	Id: &dn,
	ParentLabels: parentLabels,
	Capability: &vCapability,
	}

		log.Debugf("[getGlobalExternalPluginInstanceConfigCapabilitiyResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalExternalPluginInstanceConfigCapabilitiyResolver]Id is empty, process all Capabilitiys")
	vExternalPluginCapabilityParent, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).GetPluginInstances(context.TODO(), getParentName(obj.ParentLabels, "externalplugininstanceconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginInstanceConfigCapabilitiyResolver]Failed to get parent node %s", err)
        return &model.GlobalExternalPluginCapability{}, nil
    }
	vExternalPluginCapability, err := vExternalPluginCapabilityParent.GetCapabilitiy(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginInstanceConfigCapabilitiyResolver]Error getting Capabilitiy node %s", err)
        return &model.GlobalExternalPluginCapability{}, nil
    }
	dn := vExternalPluginCapability.DisplayName()
parentLabels := map[string]interface{}{"externalplugincapabilities.global.tsm.tanzu.vmware.com":dn}
vCapability := string(vExternalPluginCapability.Spec.Capability)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalExternalPluginCapability {
	Id: &dn,
	ParentLabels: parentLabels,
	Capability: &vCapability,
	}

	log.Debugf("[getGlobalExternalPluginInstanceConfigCapabilitiyResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Monitors Node: ExternalPluginInstanceConfig PKG: Global
//////////////////////////////////////
func getGlobalExternalPluginInstanceConfigMonitorsResolver(obj *model.GlobalExternalPluginInstanceConfig, id *string) ([]*model.GlobalExternalPluginMonitor, error) {
	log.Debugf("[getGlobalExternalPluginInstanceConfigMonitorsResolver]Parent Object %+v", obj)
	var vGlobalExternalPluginMonitorList []*model.GlobalExternalPluginMonitor
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalPluginInstanceConfigMonitorsResolver]Id %q", *id)
		vExternalPluginMonitor, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).PluginInstances(getParentName(obj.ParentLabels, "externalplugininstanceconfigs.global.tsm.tanzu.vmware.com")).GetMonitors(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalPluginInstanceConfigMonitorsResolver]Error getting Monitors node %q : %s", *id, err)
            return vGlobalExternalPluginMonitorList, nil
        }
		dn := vExternalPluginMonitor.DisplayName()
parentLabels := map[string]interface{}{"externalpluginmonitors.global.tsm.tanzu.vmware.com":dn}
vObjType := string(vExternalPluginMonitor.Spec.ObjType)
vPluginCapability := string(vExternalPluginMonitor.Spec.PluginCapability)
vFn := string(vExternalPluginMonitor.Spec.Fn)
vArg1 := string(vExternalPluginMonitor.Spec.Arg1)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalPluginMonitor {
	Id: &dn,
	ParentLabels: parentLabels,
	ObjType: &vObjType,
	PluginCapability: &vPluginCapability,
	Fn: &vFn,
	Arg1: &vArg1,
	}
		vGlobalExternalPluginMonitorList = append(vGlobalExternalPluginMonitorList, ret)

		log.Debugf("[getGlobalExternalPluginInstanceConfigMonitorsResolver]Output Monitors objects %v", vGlobalExternalPluginMonitorList)

		return vGlobalExternalPluginMonitorList, nil
	}

	log.Debug("[getGlobalExternalPluginInstanceConfigMonitorsResolver]Id is empty, process all Monitorss")

	vExternalPluginMonitorParent, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).GetPluginInstances(context.TODO(), getParentName(obj.ParentLabels, "externalplugininstanceconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginInstanceConfigMonitorsResolver]Error getting parent node %s", err)
        return vGlobalExternalPluginMonitorList, nil
    }
	vExternalPluginMonitorAllObj, err := vExternalPluginMonitorParent.GetAllMonitors(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginInstanceConfigMonitorsResolver]Error getting Monitors objects %s", err)
        return vGlobalExternalPluginMonitorList, nil
    }
	for _, i := range vExternalPluginMonitorAllObj {
		vExternalPluginMonitor, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).PluginInstances(getParentName(obj.ParentLabels, "externalplugininstanceconfigs.global.tsm.tanzu.vmware.com")).GetMonitors(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalPluginInstanceConfigMonitorsResolver]Error getting Monitors node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalPluginMonitor.DisplayName()
parentLabels := map[string]interface{}{"externalpluginmonitors.global.tsm.tanzu.vmware.com":dn}
vObjType := string(vExternalPluginMonitor.Spec.ObjType)
vPluginCapability := string(vExternalPluginMonitor.Spec.PluginCapability)
vFn := string(vExternalPluginMonitor.Spec.Fn)
vArg1 := string(vExternalPluginMonitor.Spec.Arg1)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalPluginMonitor {
	Id: &dn,
	ParentLabels: parentLabels,
	ObjType: &vObjType,
	PluginCapability: &vPluginCapability,
	Fn: &vFn,
	Arg1: &vArg1,
	}
		vGlobalExternalPluginMonitorList = append(vGlobalExternalPluginMonitorList, ret)
	}

	log.Debugf("[getGlobalExternalPluginInstanceConfigMonitorsResolver]Output Monitors objects %v", vGlobalExternalPluginMonitorList)

	return vGlobalExternalPluginMonitorList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Clusters Node: ExternalPluginInstanceConfig PKG: Global
//////////////////////////////////////
func getGlobalExternalPluginInstanceConfigClustersResolver(obj *model.GlobalExternalPluginInstanceConfig, id *string) ([]*model.GlobalCluster, error) {
	log.Debugf("[getGlobalExternalPluginInstanceConfigClustersResolver]Parent Object %+v", obj)
	var vGlobalClusterList []*model.GlobalCluster
	if id != nil && *id != "" {
		log.Debugf("[getGlobalExternalPluginInstanceConfigClustersResolver]Id %q", *id)
		vClusterParent, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).GetPluginInstances(context.TODO(), getParentName(obj.ParentLabels, "externalplugininstanceconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalExternalPluginInstanceConfigClustersResolver]Error getting Clusters %q : %s", *id, err)
			return vGlobalClusterList, nil
		}
		vCluster, err := vClusterParent.GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalExternalPluginInstanceConfigClustersResolver]Error getting Clusters %q : %s", *id, err)
			return vGlobalClusterList, nil
		}
		dn := vCluster.DisplayName()
parentLabels := map[string]interface{}{"clusters.global.tsm.tanzu.vmware.com":dn}
vName := string(vCluster.Spec.Name)
vUuid := string(vCluster.Spec.Uuid)
vConnected := bool(vCluster.Spec.Connected)
vIstioState := string(vCluster.Spec.IstioState)
vStatus := string(vCluster.Spec.Status)
vStatusHistory := string(vCluster.Spec.StatusHistory)
vCastatus := string(vCluster.Spec.Castatus)
vCaStatusHistory := string(vCluster.Spec.CaStatusHistory)
vComponentStatuses := string(vCluster.Spec.ComponentStatuses)
vComponentStatusesHistory := string(vCluster.Spec.ComponentStatusesHistory)
vType := string(vCluster.Spec.Type)
vProjectId := string(vCluster.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Uuid: &vUuid,
	Connected: &vConnected,
	IstioState: &vIstioState,
	Status: &vStatus,
	StatusHistory: &vStatusHistory,
	Castatus: &vCastatus,
	CaStatusHistory: &vCaStatusHistory,
	ComponentStatuses: &vComponentStatuses,
	ComponentStatusesHistory: &vComponentStatusesHistory,
	Type: &vType,
	ProjectId: &vProjectId,
	}
		vGlobalClusterList = append(vGlobalClusterList, ret)

		log.Debugf("[getGlobalExternalPluginInstanceConfigClustersResolver]Output Clusters objects %v", vGlobalClusterList)

		return vGlobalClusterList, nil
	}

	log.Debug("[getGlobalExternalPluginInstanceConfigClustersResolver]Id is empty, process all Clusterss")

	vClusterParent, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).GetPluginInstances(context.TODO(), getParentName(obj.ParentLabels, "externalplugininstanceconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginInstanceConfigClustersResolver]Error getting parent node %s", err)
        return vGlobalClusterList, nil
    }
	vClusterAllObj, err := vClusterParent.GetAllClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalExternalPluginInstanceConfigClustersResolver]Error getting Clusters %s", err)
        return vGlobalClusterList, nil
    }
	for _, i := range vClusterAllObj {
		vClusterParent, err := nc.GlobalRoot().Config().ExternalPlugins(getParentName(obj.ParentLabels, "externalpluginconfigfolders.global.tsm.tanzu.vmware.com")).Plugins(getParentName(obj.ParentLabels, "externalpluginconfigs.global.tsm.tanzu.vmware.com")).GetPluginInstances(context.TODO(), getParentName(obj.ParentLabels, "externalplugininstanceconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalExternalPluginInstanceConfigClustersResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vCluster, err := vClusterParent.GetClusters(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalExternalPluginInstanceConfigClustersResolver]Error getting Clusters node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vCluster.DisplayName()
parentLabels := map[string]interface{}{"clusters.global.tsm.tanzu.vmware.com":dn}
vName := string(vCluster.Spec.Name)
vUuid := string(vCluster.Spec.Uuid)
vConnected := bool(vCluster.Spec.Connected)
vIstioState := string(vCluster.Spec.IstioState)
vStatus := string(vCluster.Spec.Status)
vStatusHistory := string(vCluster.Spec.StatusHistory)
vCastatus := string(vCluster.Spec.Castatus)
vCaStatusHistory := string(vCluster.Spec.CaStatusHistory)
vComponentStatuses := string(vCluster.Spec.ComponentStatuses)
vComponentStatusesHistory := string(vCluster.Spec.ComponentStatusesHistory)
vType := string(vCluster.Spec.Type)
vProjectId := string(vCluster.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Uuid: &vUuid,
	Connected: &vConnected,
	IstioState: &vIstioState,
	Status: &vStatus,
	StatusHistory: &vStatusHistory,
	Castatus: &vCastatus,
	CaStatusHistory: &vCaStatusHistory,
	ComponentStatuses: &vComponentStatuses,
	ComponentStatusesHistory: &vComponentStatusesHistory,
	Type: &vType,
	ProjectId: &vProjectId,
	}
		vGlobalClusterList = append(vGlobalClusterList, ret)
	}
	log.Debugf("[getGlobalExternalPluginInstanceConfigClustersResolver]List of Clusters object %v", vGlobalClusterList)
	return vGlobalClusterList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Certificate Node: GatewayConfigAdditionalListeners PKG: Global
//////////////////////////////////////
func getGlobalGatewayConfigAdditionalListenersCertificateResolver(obj *model.GlobalGatewayConfigAdditionalListeners, id *string) (*model.GlobalGatewayConfigListenerCertificate, error) {
	log.Debugf("[getGlobalGatewayConfigAdditionalListenersCertificateResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalGatewayConfigAdditionalListenersCertificateResolver]Id %q", *id)
		vGatewayConfigListenerCertificate, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GatewayConfig(getParentName(obj.ParentLabels, "gatewayconfigs.global.tsm.tanzu.vmware.com")).AdditionalListeners(getParentName(obj.ParentLabels, "gatewayconfigadditionallistenerses.global.tsm.tanzu.vmware.com")).GetCertificate(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGatewayConfigAdditionalListenersCertificateResolver]Error getting Certificate node %q : %s", *id, err)
			return &model.GlobalGatewayConfigListenerCertificate{}, nil
		}
		dn := vGatewayConfigListenerCertificate.DisplayName()
parentLabels := map[string]interface{}{"gatewayconfiglistenercertificates.global.tsm.tanzu.vmware.com":dn}
vEncryptedCertificate := string(vGatewayConfigListenerCertificate.Spec.EncryptedCertificate)
vEncryptedPrivateKey := string(vGatewayConfigListenerCertificate.Spec.EncryptedPrivateKey)
vEncryptedCertChain := string(vGatewayConfigListenerCertificate.Spec.EncryptedCertChain)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalGatewayConfigListenerCertificate {
	Id: &dn,
	ParentLabels: parentLabels,
	EncryptedCertificate: &vEncryptedCertificate,
	EncryptedPrivateKey: &vEncryptedPrivateKey,
	EncryptedCertChain: &vEncryptedCertChain,
	}

		log.Debugf("[getGlobalGatewayConfigAdditionalListenersCertificateResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalGatewayConfigAdditionalListenersCertificateResolver]Id is empty, process all Certificates")
	vGatewayConfigListenerCertificateParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GatewayConfig(getParentName(obj.ParentLabels, "gatewayconfigs.global.tsm.tanzu.vmware.com")).GetAdditionalListeners(context.TODO(), getParentName(obj.ParentLabels, "gatewayconfigadditionallistenerses.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGatewayConfigAdditionalListenersCertificateResolver]Failed to get parent node %s", err)
        return &model.GlobalGatewayConfigListenerCertificate{}, nil
    }
	vGatewayConfigListenerCertificate, err := vGatewayConfigListenerCertificateParent.GetCertificate(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGatewayConfigAdditionalListenersCertificateResolver]Error getting Certificate node %s", err)
        return &model.GlobalGatewayConfigListenerCertificate{}, nil
    }
	dn := vGatewayConfigListenerCertificate.DisplayName()
parentLabels := map[string]interface{}{"gatewayconfiglistenercertificates.global.tsm.tanzu.vmware.com":dn}
vEncryptedCertificate := string(vGatewayConfigListenerCertificate.Spec.EncryptedCertificate)
vEncryptedPrivateKey := string(vGatewayConfigListenerCertificate.Spec.EncryptedPrivateKey)
vEncryptedCertChain := string(vGatewayConfigListenerCertificate.Spec.EncryptedCertChain)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalGatewayConfigListenerCertificate {
	Id: &dn,
	ParentLabels: parentLabels,
	EncryptedCertificate: &vEncryptedCertificate,
	EncryptedPrivateKey: &vEncryptedPrivateKey,
	EncryptedCertChain: &vEncryptedCertChain,
	}

	log.Debugf("[getGlobalGatewayConfigAdditionalListenersCertificateResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ListenerRoutes Node: GatewayConfigAdditionalListeners PKG: Global
//////////////////////////////////////
func getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver(obj *model.GlobalGatewayConfigAdditionalListeners, id *string) ([]*model.GlobalGatewayConfigListenerDestinationRoute, error) {
	log.Debugf("[getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver]Parent Object %+v", obj)
	var vGlobalGatewayConfigListenerDestinationRouteList []*model.GlobalGatewayConfigListenerDestinationRoute
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver]Id %q", *id)
		vGatewayConfigListenerDestinationRoute, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GatewayConfig(getParentName(obj.ParentLabels, "gatewayconfigs.global.tsm.tanzu.vmware.com")).AdditionalListeners(getParentName(obj.ParentLabels, "gatewayconfigadditionallistenerses.global.tsm.tanzu.vmware.com")).GetListenerRoutes(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver]Error getting ListenerRoutes node %q : %s", *id, err)
            return vGlobalGatewayConfigListenerDestinationRouteList, nil
        }
		dn := vGatewayConfigListenerDestinationRoute.DisplayName()
parentLabels := map[string]interface{}{"gatewayconfiglistenerdestinationroutes.global.tsm.tanzu.vmware.com":dn}
vHost := string(vGatewayConfigListenerDestinationRoute.Spec.Host)
vTarget := string(vGatewayConfigListenerDestinationRoute.Spec.Target)
Paths, _ := json.Marshal(vGatewayConfigListenerDestinationRoute.Spec.Paths)
PathsData := string(Paths)
vPort := int(vGatewayConfigListenerDestinationRoute.Spec.Port)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGatewayConfigListenerDestinationRoute {
	Id: &dn,
	ParentLabels: parentLabels,
	Host: &vHost,
	Target: &vTarget,
	Paths: &PathsData,
	Port: &vPort,
	}
		vGlobalGatewayConfigListenerDestinationRouteList = append(vGlobalGatewayConfigListenerDestinationRouteList, ret)

		log.Debugf("[getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver]Output ListenerRoutes objects %v", vGlobalGatewayConfigListenerDestinationRouteList)

		return vGlobalGatewayConfigListenerDestinationRouteList, nil
	}

	log.Debug("[getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver]Id is empty, process all ListenerRoutess")

	vGatewayConfigListenerDestinationRouteParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GatewayConfig(getParentName(obj.ParentLabels, "gatewayconfigs.global.tsm.tanzu.vmware.com")).GetAdditionalListeners(context.TODO(), getParentName(obj.ParentLabels, "gatewayconfigadditionallistenerses.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver]Error getting parent node %s", err)
        return vGlobalGatewayConfigListenerDestinationRouteList, nil
    }
	vGatewayConfigListenerDestinationRouteAllObj, err := vGatewayConfigListenerDestinationRouteParent.GetAllListenerRoutes(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver]Error getting ListenerRoutes objects %s", err)
        return vGlobalGatewayConfigListenerDestinationRouteList, nil
    }
	for _, i := range vGatewayConfigListenerDestinationRouteAllObj {
		vGatewayConfigListenerDestinationRoute, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GatewayConfig(getParentName(obj.ParentLabels, "gatewayconfigs.global.tsm.tanzu.vmware.com")).AdditionalListeners(getParentName(obj.ParentLabels, "gatewayconfigadditionallistenerses.global.tsm.tanzu.vmware.com")).GetListenerRoutes(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver]Error getting ListenerRoutes node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGatewayConfigListenerDestinationRoute.DisplayName()
parentLabels := map[string]interface{}{"gatewayconfiglistenerdestinationroutes.global.tsm.tanzu.vmware.com":dn}
vHost := string(vGatewayConfigListenerDestinationRoute.Spec.Host)
vTarget := string(vGatewayConfigListenerDestinationRoute.Spec.Target)
Paths, _ := json.Marshal(vGatewayConfigListenerDestinationRoute.Spec.Paths)
PathsData := string(Paths)
vPort := int(vGatewayConfigListenerDestinationRoute.Spec.Port)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGatewayConfigListenerDestinationRoute {
	Id: &dn,
	ParentLabels: parentLabels,
	Host: &vHost,
	Target: &vTarget,
	Paths: &PathsData,
	Port: &vPort,
	}
		vGlobalGatewayConfigListenerDestinationRouteList = append(vGlobalGatewayConfigListenerDestinationRouteList, ret)
	}

	log.Debugf("[getGlobalGatewayConfigAdditionalListenersListenerRoutesResolver]Output ListenerRoutes objects %v", vGlobalGatewayConfigListenerDestinationRouteList)

	return vGlobalGatewayConfigListenerDestinationRouteList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AdditionalListeners Node: GatewayConfig PKG: Global
//////////////////////////////////////
func getGlobalGatewayConfigAdditionalListenersResolver(obj *model.GlobalGatewayConfig, id *string) ([]*model.GlobalGatewayConfigAdditionalListeners, error) {
	log.Debugf("[getGlobalGatewayConfigAdditionalListenersResolver]Parent Object %+v", obj)
	var vGlobalGatewayConfigAdditionalListenersList []*model.GlobalGatewayConfigAdditionalListeners
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGatewayConfigAdditionalListenersResolver]Id %q", *id)
		vGatewayConfigAdditionalListeners, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GatewayConfig(getParentName(obj.ParentLabels, "gatewayconfigs.global.tsm.tanzu.vmware.com")).GetAdditionalListeners(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGatewayConfigAdditionalListenersResolver]Error getting AdditionalListeners node %q : %s", *id, err)
            return vGlobalGatewayConfigAdditionalListenersList, nil
        }
		dn := vGatewayConfigAdditionalListeners.DisplayName()
parentLabels := map[string]interface{}{"gatewayconfigadditionallistenerses.global.tsm.tanzu.vmware.com":dn}
vName := string(vGatewayConfigAdditionalListeners.Spec.Name)
vPort := int(vGatewayConfigAdditionalListeners.Spec.Port)
vProtocol := string(vGatewayConfigAdditionalListeners.Spec.Protocol)
vTlsMode := string(vGatewayConfigAdditionalListeners.Spec.TlsMode)
vOwnedBy := string(vGatewayConfigAdditionalListeners.Spec.OwnedBy)
Hosts, _ := json.Marshal(vGatewayConfigAdditionalListeners.Spec.Hosts)
HostsData := string(Hosts)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGatewayConfigAdditionalListeners {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Port: &vPort,
	Protocol: &vProtocol,
	TlsMode: &vTlsMode,
	OwnedBy: &vOwnedBy,
	Hosts: &HostsData,
	}
		vGlobalGatewayConfigAdditionalListenersList = append(vGlobalGatewayConfigAdditionalListenersList, ret)

		log.Debugf("[getGlobalGatewayConfigAdditionalListenersResolver]Output AdditionalListeners objects %v", vGlobalGatewayConfigAdditionalListenersList)

		return vGlobalGatewayConfigAdditionalListenersList, nil
	}

	log.Debug("[getGlobalGatewayConfigAdditionalListenersResolver]Id is empty, process all AdditionalListenerss")

	vGatewayConfigAdditionalListenersParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetGatewayConfig(context.TODO(), getParentName(obj.ParentLabels, "gatewayconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGatewayConfigAdditionalListenersResolver]Error getting parent node %s", err)
        return vGlobalGatewayConfigAdditionalListenersList, nil
    }
	vGatewayConfigAdditionalListenersAllObj, err := vGatewayConfigAdditionalListenersParent.GetAllAdditionalListeners(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGatewayConfigAdditionalListenersResolver]Error getting AdditionalListeners objects %s", err)
        return vGlobalGatewayConfigAdditionalListenersList, nil
    }
	for _, i := range vGatewayConfigAdditionalListenersAllObj {
		vGatewayConfigAdditionalListeners, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GatewayConfig(getParentName(obj.ParentLabels, "gatewayconfigs.global.tsm.tanzu.vmware.com")).GetAdditionalListeners(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGatewayConfigAdditionalListenersResolver]Error getting AdditionalListeners node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGatewayConfigAdditionalListeners.DisplayName()
parentLabels := map[string]interface{}{"gatewayconfigadditionallistenerses.global.tsm.tanzu.vmware.com":dn}
vName := string(vGatewayConfigAdditionalListeners.Spec.Name)
vPort := int(vGatewayConfigAdditionalListeners.Spec.Port)
vProtocol := string(vGatewayConfigAdditionalListeners.Spec.Protocol)
vTlsMode := string(vGatewayConfigAdditionalListeners.Spec.TlsMode)
vOwnedBy := string(vGatewayConfigAdditionalListeners.Spec.OwnedBy)
Hosts, _ := json.Marshal(vGatewayConfigAdditionalListeners.Spec.Hosts)
HostsData := string(Hosts)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGatewayConfigAdditionalListeners {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Port: &vPort,
	Protocol: &vProtocol,
	TlsMode: &vTlsMode,
	OwnedBy: &vOwnedBy,
	Hosts: &HostsData,
	}
		vGlobalGatewayConfigAdditionalListenersList = append(vGlobalGatewayConfigAdditionalListenersList, ret)
	}

	log.Debugf("[getGlobalGatewayConfigAdditionalListenersResolver]Output AdditionalListeners objects %v", vGlobalGatewayConfigAdditionalListenersList)

	return vGlobalGatewayConfigAdditionalListenersList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Services Node: Gateway PKG: Global
//////////////////////////////////////
func getGlobalGatewayServicesResolver(obj *model.GlobalGateway, id *string) ([]*model.GlobalService, error) {
	log.Debugf("[getGlobalGatewayServicesResolver]Parent Object %+v", obj)
	var vGlobalServiceList []*model.GlobalService
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGatewayServicesResolver]Id %q", *id)
		vServiceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetGateways(context.TODO(), getParentName(obj.ParentLabels, "gateways.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalGatewayServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		vService, err := vServiceParent.GetServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGatewayServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)

		log.Debugf("[getGlobalGatewayServicesResolver]Output Services objects %v", vGlobalServiceList)

		return vGlobalServiceList, nil
	}

	log.Debug("[getGlobalGatewayServicesResolver]Id is empty, process all Servicess")

	vServiceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetGateways(context.TODO(), getParentName(obj.ParentLabels, "gateways.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGatewayServicesResolver]Error getting parent node %s", err)
        return vGlobalServiceList, nil
    }
	vServiceAllObj, err := vServiceParent.GetAllServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGatewayServicesResolver]Error getting Services %s", err)
        return vGlobalServiceList, nil
    }
	for _, i := range vServiceAllObj {
		vServiceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetGateways(context.TODO(), getParentName(obj.ParentLabels, "gateways.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalGatewayServicesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vService, err := vServiceParent.GetServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGatewayServicesResolver]Error getting Services node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)
	}
	log.Debugf("[getGlobalGatewayServicesResolver]List of Services object %v", vGlobalServiceList)
	return vGlobalServiceList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: RoutingPolicies Node: GlobalNs PKG: Global
//////////////////////////////////////
func getGlobalGlobalNsRoutingPoliciesResolver(obj *model.GlobalGlobalNs, id *string) ([]*model.GlobalRPolicy, error) {
	log.Debugf("[getGlobalGlobalNsRoutingPoliciesResolver]Parent Object %+v", obj)
	var vGlobalRPolicyList []*model.GlobalRPolicy
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGlobalNsRoutingPoliciesResolver]Id %q", *id)
		vRPolicy, err := nc.GlobalRoot().Runtime().AllsparkServices().AwsConnector().Gns(getParentName(obj.ParentLabels, "globalnses.global.tsm.tanzu.vmware.com")).GetRoutingPolicies(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGlobalNsRoutingPoliciesResolver]Error getting RoutingPolicies node %q : %s", *id, err)
            return vGlobalRPolicyList, nil
        }
		dn := vRPolicy.DisplayName()
parentLabels := map[string]interface{}{"rpolicies.global.tsm.tanzu.vmware.com":dn}
vHealthCheckId := string(vRPolicy.Spec.HealthCheckId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalRPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	HealthCheckId: &vHealthCheckId,
	}
		vGlobalRPolicyList = append(vGlobalRPolicyList, ret)

		log.Debugf("[getGlobalGlobalNsRoutingPoliciesResolver]Output RoutingPolicies objects %v", vGlobalRPolicyList)

		return vGlobalRPolicyList, nil
	}

	log.Debug("[getGlobalGlobalNsRoutingPoliciesResolver]Id is empty, process all RoutingPoliciess")

	vRPolicyParent, err := nc.GlobalRoot().Runtime().AllsparkServices().AwsConnector().GetGns(context.TODO(), getParentName(obj.ParentLabels, "globalnses.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGlobalNsRoutingPoliciesResolver]Error getting parent node %s", err)
        return vGlobalRPolicyList, nil
    }
	vRPolicyAllObj, err := vRPolicyParent.GetAllRoutingPolicies(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGlobalNsRoutingPoliciesResolver]Error getting RoutingPolicies objects %s", err)
        return vGlobalRPolicyList, nil
    }
	for _, i := range vRPolicyAllObj {
		vRPolicy, err := nc.GlobalRoot().Runtime().AllsparkServices().AwsConnector().Gns(getParentName(obj.ParentLabels, "globalnses.global.tsm.tanzu.vmware.com")).GetRoutingPolicies(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGlobalNsRoutingPoliciesResolver]Error getting RoutingPolicies node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vRPolicy.DisplayName()
parentLabels := map[string]interface{}{"rpolicies.global.tsm.tanzu.vmware.com":dn}
vHealthCheckId := string(vRPolicy.Spec.HealthCheckId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalRPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	HealthCheckId: &vHealthCheckId,
	}
		vGlobalRPolicyList = append(vGlobalRPolicyList, ret)
	}

	log.Debugf("[getGlobalGlobalNsRoutingPoliciesResolver]Output RoutingPolicies objects %v", vGlobalRPolicyList)

	return vGlobalRPolicyList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Tenants Node: GlobalRegistrationService PKG: Global
//////////////////////////////////////
func getGlobalGlobalRegistrationServiceTenantsResolver(obj *model.GlobalGlobalRegistrationService, id *string) ([]*model.GlobalTenant, error) {
	log.Debugf("[getGlobalGlobalRegistrationServiceTenantsResolver]Parent Object %+v", obj)
	var vGlobalTenantList []*model.GlobalTenant
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGlobalRegistrationServiceTenantsResolver]Id %q", *id)
		vTenant, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).GetTenants(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGlobalRegistrationServiceTenantsResolver]Error getting Tenants node %q : %s", *id, err)
            return vGlobalTenantList, nil
        }
		dn := vTenant.DisplayName()
parentLabels := map[string]interface{}{"tenants.global.tsm.tanzu.vmware.com":dn}
vName := string(vTenant.Spec.Name)
vTenantName := string(vTenant.Spec.TenantName)
vContactEmail := string(vTenant.Spec.ContactEmail)
vYaml := string(vTenant.Spec.Yaml)
vLb := string(vTenant.Spec.Lb)
vCompanySize := string(vTenant.Spec.CompanySize)
vAddress := string(vTenant.Spec.Address)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTenant {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	TenantName: &vTenantName,
	ContactEmail: &vContactEmail,
	Yaml: &vYaml,
	Lb: &vLb,
	CompanySize: &vCompanySize,
	Address: &vAddress,
	}
		vGlobalTenantList = append(vGlobalTenantList, ret)

		log.Debugf("[getGlobalGlobalRegistrationServiceTenantsResolver]Output Tenants objects %v", vGlobalTenantList)

		return vGlobalTenantList, nil
	}

	log.Debug("[getGlobalGlobalRegistrationServiceTenantsResolver]Id is empty, process all Tenantss")

	vTenantParent, err := nc.GlobalRoot().Runtime().AllsparkServices().GetGlobalRegistrationService(context.TODO(), getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGlobalRegistrationServiceTenantsResolver]Error getting parent node %s", err)
        return vGlobalTenantList, nil
    }
	vTenantAllObj, err := vTenantParent.GetAllTenants(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGlobalRegistrationServiceTenantsResolver]Error getting Tenants objects %s", err)
        return vGlobalTenantList, nil
    }
	for _, i := range vTenantAllObj {
		vTenant, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).GetTenants(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGlobalRegistrationServiceTenantsResolver]Error getting Tenants node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vTenant.DisplayName()
parentLabels := map[string]interface{}{"tenants.global.tsm.tanzu.vmware.com":dn}
vName := string(vTenant.Spec.Name)
vTenantName := string(vTenant.Spec.TenantName)
vContactEmail := string(vTenant.Spec.ContactEmail)
vYaml := string(vTenant.Spec.Yaml)
vLb := string(vTenant.Spec.Lb)
vCompanySize := string(vTenant.Spec.CompanySize)
vAddress := string(vTenant.Spec.Address)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTenant {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	TenantName: &vTenantName,
	ContactEmail: &vContactEmail,
	Yaml: &vYaml,
	Lb: &vLb,
	CompanySize: &vCompanySize,
	Address: &vAddress,
	}
		vGlobalTenantList = append(vGlobalTenantList, ret)
	}

	log.Debugf("[getGlobalGlobalRegistrationServiceTenantsResolver]Output Tenants objects %v", vGlobalTenantList)

	return vGlobalTenantList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: TenantToken Node: GlobalRegistrationService PKG: Global
//////////////////////////////////////
func getGlobalGlobalRegistrationServiceTenantTokenResolver(obj *model.GlobalGlobalRegistrationService, id *string) ([]*model.GlobalTenantToken, error) {
	log.Debugf("[getGlobalGlobalRegistrationServiceTenantTokenResolver]Parent Object %+v", obj)
	var vGlobalTenantTokenList []*model.GlobalTenantToken
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGlobalRegistrationServiceTenantTokenResolver]Id %q", *id)
		vTenantToken, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).GetTenantToken(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGlobalRegistrationServiceTenantTokenResolver]Error getting TenantToken node %q : %s", *id, err)
            return vGlobalTenantTokenList, nil
        }
		dn := vTenantToken.DisplayName()
parentLabels := map[string]interface{}{"tenanttokens.global.tsm.tanzu.vmware.com":dn}
vTtl := int(vTenantToken.Spec.Ttl)
vCreated := string(vTenantToken.Spec.Created)
vTenantId := string(vTenantToken.Spec.TenantId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTenantToken {
	Id: &dn,
	ParentLabels: parentLabels,
	Ttl: &vTtl,
	Created: &vCreated,
	TenantId: &vTenantId,
	}
		vGlobalTenantTokenList = append(vGlobalTenantTokenList, ret)

		log.Debugf("[getGlobalGlobalRegistrationServiceTenantTokenResolver]Output TenantToken objects %v", vGlobalTenantTokenList)

		return vGlobalTenantTokenList, nil
	}

	log.Debug("[getGlobalGlobalRegistrationServiceTenantTokenResolver]Id is empty, process all TenantTokens")

	vTenantTokenParent, err := nc.GlobalRoot().Runtime().AllsparkServices().GetGlobalRegistrationService(context.TODO(), getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGlobalRegistrationServiceTenantTokenResolver]Error getting parent node %s", err)
        return vGlobalTenantTokenList, nil
    }
	vTenantTokenAllObj, err := vTenantTokenParent.GetAllTenantToken(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGlobalRegistrationServiceTenantTokenResolver]Error getting TenantToken objects %s", err)
        return vGlobalTenantTokenList, nil
    }
	for _, i := range vTenantTokenAllObj {
		vTenantToken, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).GetTenantToken(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGlobalRegistrationServiceTenantTokenResolver]Error getting TenantToken node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vTenantToken.DisplayName()
parentLabels := map[string]interface{}{"tenanttokens.global.tsm.tanzu.vmware.com":dn}
vTtl := int(vTenantToken.Spec.Ttl)
vCreated := string(vTenantToken.Spec.Created)
vTenantId := string(vTenantToken.Spec.TenantId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTenantToken {
	Id: &dn,
	ParentLabels: parentLabels,
	Ttl: &vTtl,
	Created: &vCreated,
	TenantId: &vTenantId,
	}
		vGlobalTenantTokenList = append(vGlobalTenantTokenList, ret)
	}

	log.Debugf("[getGlobalGlobalRegistrationServiceTenantTokenResolver]Output TenantToken objects %v", vGlobalTenantTokenList)

	return vGlobalTenantTokenList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Gns Node: GlobalNamespace PKG: Global
//////////////////////////////////////
func getGlobalGlobalNamespaceGnsResolver(obj *model.GlobalGlobalNamespace, id *string) ([]*model.GlobalGNS, error) {
	log.Debugf("[getGlobalGlobalNamespaceGnsResolver]Parent Object %+v", obj)
	var vGlobalGNSList []*model.GlobalGNS
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGlobalNamespaceGnsResolver]Id %q", *id)
		vGNS, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGlobalNamespaceGnsResolver]Error getting Gns node %q : %s", *id, err)
            return vGlobalGNSList, nil
        }
		dn := vGNS.DisplayName()
parentLabels := map[string]interface{}{"gnss.global.tsm.tanzu.vmware.com":dn}
vDomain := string(vGNS.Spec.Domain)
vUseSharedGateway := bool(vGNS.Spec.UseSharedGateway)
vMTLSEnforced := bool(vGNS.Spec.MTLSEnforced)
vMTLSPermissive := bool(vGNS.Spec.MTLSPermissive)
vApiDiscoveryEnabled := bool(vGNS.Spec.ApiDiscoveryEnabled)
vMTLSExceptions := string(vGNS.Spec.MTLSExceptions)
vCaType := string(vGNS.Spec.CaType)
vCa := string(vGNS.Spec.Ca)
vDescription := string(vGNS.Spec.Description)
vColor := string(vGNS.Spec.Color)
vVersion := string(vGNS.Spec.Version)
vProjectId := string(vGNS.Spec.ProjectId)
vMemberDomains := string(vGNS.Spec.MemberDomains)
vMatchingConditions := string(vGNS.Spec.MatchingConditions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGNS {
	Id: &dn,
	ParentLabels: parentLabels,
	Domain: &vDomain,
	UseSharedGateway: &vUseSharedGateway,
	MTLSEnforced: &vMTLSEnforced,
	MTLSPermissive: &vMTLSPermissive,
	ApiDiscoveryEnabled: &vApiDiscoveryEnabled,
	MTLSExceptions: &vMTLSExceptions,
	CaType: &vCaType,
	Ca: &vCa,
	Description: &vDescription,
	Color: &vColor,
	Version: &vVersion,
	ProjectId: &vProjectId,
	MemberDomains: &vMemberDomains,
	MatchingConditions: &vMatchingConditions,
	}
		vGlobalGNSList = append(vGlobalGNSList, ret)

		log.Debugf("[getGlobalGlobalNamespaceGnsResolver]Output Gns objects %v", vGlobalGNSList)

		return vGlobalGNSList, nil
	}

	log.Debug("[getGlobalGlobalNamespaceGnsResolver]Id is empty, process all Gnss")

	vGNSParent, err := nc.GlobalRoot().Config().GetGlobalNamespace(context.TODO(), getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGlobalNamespaceGnsResolver]Error getting parent node %s", err)
        return vGlobalGNSList, nil
    }
	vGNSAllObj, err := vGNSParent.GetAllGns(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGlobalNamespaceGnsResolver]Error getting Gns objects %s", err)
        return vGlobalGNSList, nil
    }
	for _, i := range vGNSAllObj {
		vGNS, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGlobalNamespaceGnsResolver]Error getting Gns node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGNS.DisplayName()
parentLabels := map[string]interface{}{"gnss.global.tsm.tanzu.vmware.com":dn}
vDomain := string(vGNS.Spec.Domain)
vUseSharedGateway := bool(vGNS.Spec.UseSharedGateway)
vMTLSEnforced := bool(vGNS.Spec.MTLSEnforced)
vMTLSPermissive := bool(vGNS.Spec.MTLSPermissive)
vApiDiscoveryEnabled := bool(vGNS.Spec.ApiDiscoveryEnabled)
vMTLSExceptions := string(vGNS.Spec.MTLSExceptions)
vCaType := string(vGNS.Spec.CaType)
vCa := string(vGNS.Spec.Ca)
vDescription := string(vGNS.Spec.Description)
vColor := string(vGNS.Spec.Color)
vVersion := string(vGNS.Spec.Version)
vProjectId := string(vGNS.Spec.ProjectId)
vMemberDomains := string(vGNS.Spec.MemberDomains)
vMatchingConditions := string(vGNS.Spec.MatchingConditions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGNS {
	Id: &dn,
	ParentLabels: parentLabels,
	Domain: &vDomain,
	UseSharedGateway: &vUseSharedGateway,
	MTLSEnforced: &vMTLSEnforced,
	MTLSPermissive: &vMTLSPermissive,
	ApiDiscoveryEnabled: &vApiDiscoveryEnabled,
	MTLSExceptions: &vMTLSExceptions,
	CaType: &vCaType,
	Ca: &vCa,
	Description: &vDescription,
	Color: &vColor,
	Version: &vVersion,
	ProjectId: &vProjectId,
	MemberDomains: &vMemberDomains,
	MatchingConditions: &vMatchingConditions,
	}
		vGlobalGNSList = append(vGlobalGNSList, ret)
	}

	log.Debugf("[getGlobalGlobalNamespaceGnsResolver]Output Gns objects %v", vGlobalGNSList)

	return vGlobalGNSList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsSvcGroupRT Node: GnsBindingRT PKG: Global
//////////////////////////////////////
func getGlobalGnsBindingRTGnsSvcGroupRTResolver(obj *model.GlobalGnsBindingRT, id *string) ([]*model.GlobalGnsSvcGroupRT, error) {
	log.Debugf("[getGlobalGnsBindingRTGnsSvcGroupRTResolver]Parent Object %+v", obj)
	var vGlobalGnsSvcGroupRTList []*model.GlobalGnsSvcGroupRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGnsBindingRTGnsSvcGroupRTResolver]Id %q", *id)
		vGnsSvcGroupRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GnsBinding(getParentName(obj.ParentLabels, "gnsbindingrts.global.tsm.tanzu.vmware.com")).GetGnsSvcGroupRT(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGnsBindingRTGnsSvcGroupRTResolver]Error getting GnsSvcGroupRT node %q : %s", *id, err)
            return vGlobalGnsSvcGroupRTList, nil
        }
		dn := vGnsSvcGroupRT.DisplayName()
parentLabels := map[string]interface{}{"gnssvcgrouprts.global.tsm.tanzu.vmware.com":dn}
vName := string(vGnsSvcGroupRT.Spec.Name)
vDisplayName := string(vGnsSvcGroupRT.Spec.DisplayName)
vDescription := string(vGnsSvcGroupRT.Spec.Description)
vServices := string(vGnsSvcGroupRT.Spec.Services)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsSvcGroupRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Services: &vServices,
	}
		vGlobalGnsSvcGroupRTList = append(vGlobalGnsSvcGroupRTList, ret)

		log.Debugf("[getGlobalGnsBindingRTGnsSvcGroupRTResolver]Output GnsSvcGroupRT objects %v", vGlobalGnsSvcGroupRTList)

		return vGlobalGnsSvcGroupRTList, nil
	}

	log.Debug("[getGlobalGnsBindingRTGnsSvcGroupRTResolver]Id is empty, process all GnsSvcGroupRTs")

	vGnsSvcGroupRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetGnsBinding(context.TODO(), getParentName(obj.ParentLabels, "gnsbindingrts.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGnsBindingRTGnsSvcGroupRTResolver]Error getting parent node %s", err)
        return vGlobalGnsSvcGroupRTList, nil
    }
	vGnsSvcGroupRTAllObj, err := vGnsSvcGroupRTParent.GetAllGnsSvcGroupRT(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGnsBindingRTGnsSvcGroupRTResolver]Error getting GnsSvcGroupRT objects %s", err)
        return vGlobalGnsSvcGroupRTList, nil
    }
	for _, i := range vGnsSvcGroupRTAllObj {
		vGnsSvcGroupRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GnsBinding(getParentName(obj.ParentLabels, "gnsbindingrts.global.tsm.tanzu.vmware.com")).GetGnsSvcGroupRT(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGnsBindingRTGnsSvcGroupRTResolver]Error getting GnsSvcGroupRT node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsSvcGroupRT.DisplayName()
parentLabels := map[string]interface{}{"gnssvcgrouprts.global.tsm.tanzu.vmware.com":dn}
vName := string(vGnsSvcGroupRT.Spec.Name)
vDisplayName := string(vGnsSvcGroupRT.Spec.DisplayName)
vDescription := string(vGnsSvcGroupRT.Spec.Description)
vServices := string(vGnsSvcGroupRT.Spec.Services)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsSvcGroupRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Services: &vServices,
	}
		vGlobalGnsSvcGroupRTList = append(vGlobalGnsSvcGroupRTList, ret)
	}

	log.Debugf("[getGlobalGnsBindingRTGnsSvcGroupRTResolver]Output GnsSvcGroupRT objects %v", vGlobalGnsSvcGroupRTList)

	return vGlobalGnsSvcGroupRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsRoutingRules Node: GnsBindingRT PKG: Global
//////////////////////////////////////
func getGlobalGnsBindingRTGnsRoutingRulesResolver(obj *model.GlobalGnsBindingRT, id *string) ([]*model.GlobalGnsRoutingRuleConfig, error) {
	log.Debugf("[getGlobalGnsBindingRTGnsRoutingRulesResolver]Parent Object %+v", obj)
	var vGlobalGnsRoutingRuleConfigList []*model.GlobalGnsRoutingRuleConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGnsBindingRTGnsRoutingRulesResolver]Id %q", *id)
		vGnsRoutingRuleConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GnsBinding(getParentName(obj.ParentLabels, "gnsbindingrts.global.tsm.tanzu.vmware.com")).GetGnsRoutingRules(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGnsBindingRTGnsRoutingRulesResolver]Error getting GnsRoutingRules node %q : %s", *id, err)
            return vGlobalGnsRoutingRuleConfigList, nil
        }
		dn := vGnsRoutingRuleConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsroutingruleconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vGnsRoutingRuleConfig.Spec.Name)
vOwnedBy := string(vGnsRoutingRuleConfig.Spec.OwnedBy)
vServiceFQDN := string(vGnsRoutingRuleConfig.Spec.ServiceFQDN)
vPortName := string(vGnsRoutingRuleConfig.Spec.PortName)
vPort := int(vGnsRoutingRuleConfig.Spec.Port)
vHttpRouteRules := string(vGnsRoutingRuleConfig.Spec.HttpRouteRules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsRoutingRuleConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	ServiceFQDN: &vServiceFQDN,
	PortName: &vPortName,
	Port: &vPort,
	HttpRouteRules: &vHttpRouteRules,
	}
		vGlobalGnsRoutingRuleConfigList = append(vGlobalGnsRoutingRuleConfigList, ret)

		log.Debugf("[getGlobalGnsBindingRTGnsRoutingRulesResolver]Output GnsRoutingRules objects %v", vGlobalGnsRoutingRuleConfigList)

		return vGlobalGnsRoutingRuleConfigList, nil
	}

	log.Debug("[getGlobalGnsBindingRTGnsRoutingRulesResolver]Id is empty, process all GnsRoutingRuless")

	vGnsRoutingRuleConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetGnsBinding(context.TODO(), getParentName(obj.ParentLabels, "gnsbindingrts.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGnsBindingRTGnsRoutingRulesResolver]Error getting parent node %s", err)
        return vGlobalGnsRoutingRuleConfigList, nil
    }
	vGnsRoutingRuleConfigAllObj, err := vGnsRoutingRuleConfigParent.GetAllGnsRoutingRules(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGnsBindingRTGnsRoutingRulesResolver]Error getting GnsRoutingRules objects %s", err)
        return vGlobalGnsRoutingRuleConfigList, nil
    }
	for _, i := range vGnsRoutingRuleConfigAllObj {
		vGnsRoutingRuleConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GnsBinding(getParentName(obj.ParentLabels, "gnsbindingrts.global.tsm.tanzu.vmware.com")).GetGnsRoutingRules(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGnsBindingRTGnsRoutingRulesResolver]Error getting GnsRoutingRules node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsRoutingRuleConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsroutingruleconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vGnsRoutingRuleConfig.Spec.Name)
vOwnedBy := string(vGnsRoutingRuleConfig.Spec.OwnedBy)
vServiceFQDN := string(vGnsRoutingRuleConfig.Spec.ServiceFQDN)
vPortName := string(vGnsRoutingRuleConfig.Spec.PortName)
vPort := int(vGnsRoutingRuleConfig.Spec.Port)
vHttpRouteRules := string(vGnsRoutingRuleConfig.Spec.HttpRouteRules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsRoutingRuleConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	OwnedBy: &vOwnedBy,
	ServiceFQDN: &vServiceFQDN,
	PortName: &vPortName,
	Port: &vPort,
	HttpRouteRules: &vHttpRouteRules,
	}
		vGlobalGnsRoutingRuleConfigList = append(vGlobalGnsRoutingRuleConfigList, ret)
	}

	log.Debugf("[getGlobalGnsBindingRTGnsRoutingRulesResolver]Output GnsRoutingRules objects %v", vGlobalGnsRoutingRuleConfigList)

	return vGlobalGnsRoutingRuleConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsServiceEntryConfig Node: GnsBindingRT PKG: Global
//////////////////////////////////////
func getGlobalGnsBindingRTGnsServiceEntryConfigResolver(obj *model.GlobalGnsBindingRT, id *string) ([]*model.GlobalGnsServiceEntryConfig, error) {
	log.Debugf("[getGlobalGnsBindingRTGnsServiceEntryConfigResolver]Parent Object %+v", obj)
	var vGlobalGnsServiceEntryConfigList []*model.GlobalGnsServiceEntryConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGnsBindingRTGnsServiceEntryConfigResolver]Id %q", *id)
		vGnsServiceEntryConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GnsBinding(getParentName(obj.ParentLabels, "gnsbindingrts.global.tsm.tanzu.vmware.com")).GetGnsServiceEntryConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGnsBindingRTGnsServiceEntryConfigResolver]Error getting GnsServiceEntryConfig node %q : %s", *id, err)
            return vGlobalGnsServiceEntryConfigList, nil
        }
		dn := vGnsServiceEntryConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsserviceentryconfigs.global.tsm.tanzu.vmware.com":dn}
vService := string(vGnsServiceEntryConfig.Spec.Service)
vPorts := string(vGnsServiceEntryConfig.Spec.Ports)
vVersions := string(vGnsServiceEntryConfig.Spec.Versions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsServiceEntryConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Service: &vService,
	Ports: &vPorts,
	Versions: &vVersions,
	}
		vGlobalGnsServiceEntryConfigList = append(vGlobalGnsServiceEntryConfigList, ret)

		log.Debugf("[getGlobalGnsBindingRTGnsServiceEntryConfigResolver]Output GnsServiceEntryConfig objects %v", vGlobalGnsServiceEntryConfigList)

		return vGlobalGnsServiceEntryConfigList, nil
	}

	log.Debug("[getGlobalGnsBindingRTGnsServiceEntryConfigResolver]Id is empty, process all GnsServiceEntryConfigs")

	vGnsServiceEntryConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetGnsBinding(context.TODO(), getParentName(obj.ParentLabels, "gnsbindingrts.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGnsBindingRTGnsServiceEntryConfigResolver]Error getting parent node %s", err)
        return vGlobalGnsServiceEntryConfigList, nil
    }
	vGnsServiceEntryConfigAllObj, err := vGnsServiceEntryConfigParent.GetAllGnsServiceEntryConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGnsBindingRTGnsServiceEntryConfigResolver]Error getting GnsServiceEntryConfig objects %s", err)
        return vGlobalGnsServiceEntryConfigList, nil
    }
	for _, i := range vGnsServiceEntryConfigAllObj {
		vGnsServiceEntryConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GnsBinding(getParentName(obj.ParentLabels, "gnsbindingrts.global.tsm.tanzu.vmware.com")).GetGnsServiceEntryConfig(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGnsBindingRTGnsServiceEntryConfigResolver]Error getting GnsServiceEntryConfig node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsServiceEntryConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsserviceentryconfigs.global.tsm.tanzu.vmware.com":dn}
vService := string(vGnsServiceEntryConfig.Spec.Service)
vPorts := string(vGnsServiceEntryConfig.Spec.Ports)
vVersions := string(vGnsServiceEntryConfig.Spec.Versions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsServiceEntryConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Service: &vService,
	Ports: &vPorts,
	Versions: &vVersions,
	}
		vGlobalGnsServiceEntryConfigList = append(vGlobalGnsServiceEntryConfigList, ret)
	}

	log.Debugf("[getGlobalGnsBindingRTGnsServiceEntryConfigResolver]Output GnsServiceEntryConfig objects %v", vGlobalGnsServiceEntryConfigList)

	return vGlobalGnsServiceEntryConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: RoutingConfigs Node: PublicServiceConfig PKG: Global
//////////////////////////////////////
func getGlobalPublicServiceConfigRoutingConfigsResolver(obj *model.GlobalPublicServiceConfig, id *string) ([]*model.GlobalPublicServiceRouteConfig, error) {
	log.Debugf("[getGlobalPublicServiceConfigRoutingConfigsResolver]Parent Object %+v", obj)
	var vGlobalPublicServiceRouteConfigList []*model.GlobalPublicServiceRouteConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalPublicServiceConfigRoutingConfigsResolver]Id %q", *id)
		vPublicServiceRouteConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).PublicServices(getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com")).GetRoutingConfigs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigRoutingConfigsResolver]Error getting RoutingConfigs node %q : %s", *id, err)
            return vGlobalPublicServiceRouteConfigList, nil
        }
		dn := vPublicServiceRouteConfig.DisplayName()
parentLabels := map[string]interface{}{"publicservicerouteconfigs.global.tsm.tanzu.vmware.com":dn}
vType := string(vPublicServiceRouteConfig.Spec.Type)
vRoutes := string(vPublicServiceRouteConfig.Spec.Routes)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPublicServiceRouteConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Routes: &vRoutes,
	}
		vGlobalPublicServiceRouteConfigList = append(vGlobalPublicServiceRouteConfigList, ret)

		log.Debugf("[getGlobalPublicServiceConfigRoutingConfigsResolver]Output RoutingConfigs objects %v", vGlobalPublicServiceRouteConfigList)

		return vGlobalPublicServiceRouteConfigList, nil
	}

	log.Debug("[getGlobalPublicServiceConfigRoutingConfigsResolver]Id is empty, process all RoutingConfigss")

	vPublicServiceRouteConfigParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalPublicServiceConfigRoutingConfigsResolver]Error getting parent node %s", err)
        return vGlobalPublicServiceRouteConfigList, nil
    }
	vPublicServiceRouteConfigAllObj, err := vPublicServiceRouteConfigParent.GetAllRoutingConfigs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalPublicServiceConfigRoutingConfigsResolver]Error getting RoutingConfigs objects %s", err)
        return vGlobalPublicServiceRouteConfigList, nil
    }
	for _, i := range vPublicServiceRouteConfigAllObj {
		vPublicServiceRouteConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).PublicServices(getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com")).GetRoutingConfigs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalPublicServiceConfigRoutingConfigsResolver]Error getting RoutingConfigs node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vPublicServiceRouteConfig.DisplayName()
parentLabels := map[string]interface{}{"publicservicerouteconfigs.global.tsm.tanzu.vmware.com":dn}
vType := string(vPublicServiceRouteConfig.Spec.Type)
vRoutes := string(vPublicServiceRouteConfig.Spec.Routes)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPublicServiceRouteConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Routes: &vRoutes,
	}
		vGlobalPublicServiceRouteConfigList = append(vGlobalPublicServiceRouteConfigList, ret)
	}

	log.Debugf("[getGlobalPublicServiceConfigRoutingConfigsResolver]Output RoutingConfigs objects %v", vGlobalPublicServiceRouteConfigList)

	return vGlobalPublicServiceRouteConfigList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ExternalDNS Node: PublicServiceConfig PKG: Global
//////////////////////////////////////
func getGlobalPublicServiceConfigExternalDNSResolver(obj *model.GlobalPublicServiceConfig, id *string) ([]*model.GlobalExternalDNSConfigN, error) {
	log.Debugf("[getGlobalPublicServiceConfigExternalDNSResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSConfigNList []*model.GlobalExternalDNSConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalPublicServiceConfigExternalDNSResolver]Id %q", *id)
		vExternalDNSConfigNParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigExternalDNSResolver]Error getting ExternalDNS %q : %s", *id, err)
			return vGlobalExternalDNSConfigNList, nil
		}
		vExternalDNSConfigN, err := vExternalDNSConfigNParent.GetExternalDNS(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigExternalDNSResolver]Error getting ExternalDNS %q : %s", *id, err)
			return vGlobalExternalDNSConfigNList, nil
		}
		dn := vExternalDNSConfigN.DisplayName()
parentLabels := map[string]interface{}{"externaldnsconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalDNSConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalExternalDNSConfigNList = append(vGlobalExternalDNSConfigNList, ret)

		log.Debugf("[getGlobalPublicServiceConfigExternalDNSResolver]Output ExternalDNS objects %v", vGlobalExternalDNSConfigNList)

		return vGlobalExternalDNSConfigNList, nil
	}

	log.Debug("[getGlobalPublicServiceConfigExternalDNSResolver]Id is empty, process all ExternalDNSs")

	vExternalDNSConfigNParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalPublicServiceConfigExternalDNSResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSConfigNList, nil
    }
	vExternalDNSConfigNAllObj, err := vExternalDNSConfigNParent.GetAllExternalDNS(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalPublicServiceConfigExternalDNSResolver]Error getting ExternalDNS %s", err)
        return vGlobalExternalDNSConfigNList, nil
    }
	for _, i := range vExternalDNSConfigNAllObj {
		vExternalDNSConfigNParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigExternalDNSResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vExternalDNSConfigN, err := vExternalDNSConfigNParent.GetExternalDNS(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalPublicServiceConfigExternalDNSResolver]Error getting ExternalDNS node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vExternalDNSConfigN.DisplayName()
parentLabels := map[string]interface{}{"externaldnsconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalDNSConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalExternalDNSConfigNList = append(vGlobalExternalDNSConfigNList, ret)
	}
	log.Debugf("[getGlobalPublicServiceConfigExternalDNSResolver]List of ExternalDNS object %v", vGlobalExternalDNSConfigNList)
	return vGlobalExternalDNSConfigNList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Certificates Node: PublicServiceConfig PKG: Global
//////////////////////////////////////
func getGlobalPublicServiceConfigCertificatesResolver(obj *model.GlobalPublicServiceConfig, id *string) ([]*model.GlobalCertificateConfigN, error) {
	log.Debugf("[getGlobalPublicServiceConfigCertificatesResolver]Parent Object %+v", obj)
	var vGlobalCertificateConfigNList []*model.GlobalCertificateConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalPublicServiceConfigCertificatesResolver]Id %q", *id)
		vCertificateConfigNParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigCertificatesResolver]Error getting Certificates %q : %s", *id, err)
			return vGlobalCertificateConfigNList, nil
		}
		vCertificateConfigN, err := vCertificateConfigNParent.GetCertificates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigCertificatesResolver]Error getting Certificates %q : %s", *id, err)
			return vGlobalCertificateConfigNList, nil
		}
		dn := vCertificateConfigN.DisplayName()
parentLabels := map[string]interface{}{"certificateconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vCertificateConfigN.Spec.ProjectId)
vBeginsOn := string(vCertificateConfigN.Spec.BeginsOn)
vExpiresOn := string(vCertificateConfigN.Spec.ExpiresOn)
vIssuedToCN := string(vCertificateConfigN.Spec.IssuedToCN)
vConfig := string(vCertificateConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	BeginsOn: &vBeginsOn,
	ExpiresOn: &vExpiresOn,
	IssuedToCN: &vIssuedToCN,
	Config: &vConfig,
	}
		vGlobalCertificateConfigNList = append(vGlobalCertificateConfigNList, ret)

		log.Debugf("[getGlobalPublicServiceConfigCertificatesResolver]Output Certificates objects %v", vGlobalCertificateConfigNList)

		return vGlobalCertificateConfigNList, nil
	}

	log.Debug("[getGlobalPublicServiceConfigCertificatesResolver]Id is empty, process all Certificatess")

	vCertificateConfigNParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalPublicServiceConfigCertificatesResolver]Error getting parent node %s", err)
        return vGlobalCertificateConfigNList, nil
    }
	vCertificateConfigNAllObj, err := vCertificateConfigNParent.GetAllCertificates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalPublicServiceConfigCertificatesResolver]Error getting Certificates %s", err)
        return vGlobalCertificateConfigNList, nil
    }
	for _, i := range vCertificateConfigNAllObj {
		vCertificateConfigNParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigCertificatesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vCertificateConfigN, err := vCertificateConfigNParent.GetCertificates(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalPublicServiceConfigCertificatesResolver]Error getting Certificates node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vCertificateConfigN.DisplayName()
parentLabels := map[string]interface{}{"certificateconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vCertificateConfigN.Spec.ProjectId)
vBeginsOn := string(vCertificateConfigN.Spec.BeginsOn)
vExpiresOn := string(vCertificateConfigN.Spec.ExpiresOn)
vIssuedToCN := string(vCertificateConfigN.Spec.IssuedToCN)
vConfig := string(vCertificateConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	BeginsOn: &vBeginsOn,
	ExpiresOn: &vExpiresOn,
	IssuedToCN: &vIssuedToCN,
	Config: &vConfig,
	}
		vGlobalCertificateConfigNList = append(vGlobalCertificateConfigNList, ret)
	}
	log.Debugf("[getGlobalPublicServiceConfigCertificatesResolver]List of Certificates object %v", vGlobalCertificateConfigNList)
	return vGlobalCertificateConfigNList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: HealthChecks Node: PublicServiceConfig PKG: Global
//////////////////////////////////////
func getGlobalPublicServiceConfigHealthChecksResolver(obj *model.GlobalPublicServiceConfig, id *string) ([]*model.GlobalHealthCheckConfigN, error) {
	log.Debugf("[getGlobalPublicServiceConfigHealthChecksResolver]Parent Object %+v", obj)
	var vGlobalHealthCheckConfigNList []*model.GlobalHealthCheckConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalPublicServiceConfigHealthChecksResolver]Id %q", *id)
		vHealthCheckConfigNParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigHealthChecksResolver]Error getting HealthChecks %q : %s", *id, err)
			return vGlobalHealthCheckConfigNList, nil
		}
		vHealthCheckConfigN, err := vHealthCheckConfigNParent.GetHealthChecks(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigHealthChecksResolver]Error getting HealthChecks %q : %s", *id, err)
			return vGlobalHealthCheckConfigNList, nil
		}
		dn := vHealthCheckConfigN.DisplayName()
parentLabels := map[string]interface{}{"healthcheckconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vHealthCheckConfigN.Spec.ProjectId)
vConfig := string(vHealthCheckConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalHealthCheckConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	Config: &vConfig,
	}
		vGlobalHealthCheckConfigNList = append(vGlobalHealthCheckConfigNList, ret)

		log.Debugf("[getGlobalPublicServiceConfigHealthChecksResolver]Output HealthChecks objects %v", vGlobalHealthCheckConfigNList)

		return vGlobalHealthCheckConfigNList, nil
	}

	log.Debug("[getGlobalPublicServiceConfigHealthChecksResolver]Id is empty, process all HealthCheckss")

	vHealthCheckConfigNParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalPublicServiceConfigHealthChecksResolver]Error getting parent node %s", err)
        return vGlobalHealthCheckConfigNList, nil
    }
	vHealthCheckConfigNAllObj, err := vHealthCheckConfigNParent.GetAllHealthChecks(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalPublicServiceConfigHealthChecksResolver]Error getting HealthChecks %s", err)
        return vGlobalHealthCheckConfigNList, nil
    }
	for _, i := range vHealthCheckConfigNAllObj {
		vHealthCheckConfigNParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), getParentName(obj.ParentLabels, "publicserviceconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalPublicServiceConfigHealthChecksResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vHealthCheckConfigN, err := vHealthCheckConfigNParent.GetHealthChecks(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalPublicServiceConfigHealthChecksResolver]Error getting HealthChecks node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vHealthCheckConfigN.DisplayName()
parentLabels := map[string]interface{}{"healthcheckconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vHealthCheckConfigN.Spec.ProjectId)
vConfig := string(vHealthCheckConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalHealthCheckConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	Config: &vConfig,
	}
		vGlobalHealthCheckConfigNList = append(vGlobalHealthCheckConfigNList, ret)
	}
	log.Debugf("[getGlobalPublicServiceConfigHealthChecksResolver]List of HealthChecks object %v", vGlobalHealthCheckConfigNList)
	return vGlobalHealthCheckConfigNList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Services Node: GNSSvcGroup PKG: Global
//////////////////////////////////////
func getGlobalGNSSvcGroupServicesResolver(obj *model.GlobalGNSSvcGroup, id *string) ([]*model.GlobalService, error) {
	log.Debugf("[getGlobalGNSSvcGroupServicesResolver]Parent Object %+v", obj)
	var vGlobalServiceList []*model.GlobalService
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSSvcGroupServicesResolver]Id %q", *id)
		vServiceParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsServiceGroups(context.TODO(), getParentName(obj.ParentLabels, "gnssvcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalGNSSvcGroupServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		vService, err := vServiceParent.GetServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSSvcGroupServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)

		log.Debugf("[getGlobalGNSSvcGroupServicesResolver]Output Services objects %v", vGlobalServiceList)

		return vGlobalServiceList, nil
	}

	log.Debug("[getGlobalGNSSvcGroupServicesResolver]Id is empty, process all Servicess")

	vServiceParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsServiceGroups(context.TODO(), getParentName(obj.ParentLabels, "gnssvcgroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSSvcGroupServicesResolver]Error getting parent node %s", err)
        return vGlobalServiceList, nil
    }
	vServiceAllObj, err := vServiceParent.GetAllServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSSvcGroupServicesResolver]Error getting Services %s", err)
        return vGlobalServiceList, nil
    }
	for _, i := range vServiceAllObj {
		vServiceParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsServiceGroups(context.TODO(), getParentName(obj.ParentLabels, "gnssvcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalGNSSvcGroupServicesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vService, err := vServiceParent.GetServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSSvcGroupServicesResolver]Error getting Services node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)
	}
	log.Debugf("[getGlobalGNSSvcGroupServicesResolver]List of Services object %v", vGlobalServiceList)
	return vGlobalServiceList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: RoutingConfig Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSRoutingConfigResolver(obj *model.GlobalGNS, id *string) (*model.GlobalGNSRoutingConfig, error) {
	log.Debugf("[getGlobalGNSRoutingConfigResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalGNSRoutingConfigResolver]Id %q", *id)
		vGNSRoutingConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetRoutingConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSRoutingConfigResolver]Error getting RoutingConfig node %q : %s", *id, err)
			return &model.GlobalGNSRoutingConfig{}, nil
		}
		dn := vGNSRoutingConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsroutingconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vGNSRoutingConfig.Spec.Name)
vSpec := string(vGNSRoutingConfig.Spec.Spec)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalGNSRoutingConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Spec: &vSpec,
	}

		log.Debugf("[getGlobalGNSRoutingConfigResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalGNSRoutingConfigResolver]Id is empty, process all RoutingConfigs")
	vGNSRoutingConfigParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSRoutingConfigResolver]Failed to get parent node %s", err)
        return &model.GlobalGNSRoutingConfig{}, nil
    }
	vGNSRoutingConfig, err := vGNSRoutingConfigParent.GetRoutingConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSRoutingConfigResolver]Error getting RoutingConfig node %s", err)
        return &model.GlobalGNSRoutingConfig{}, nil
    }
	dn := vGNSRoutingConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsroutingconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vGNSRoutingConfig.Spec.Name)
vSpec := string(vGNSRoutingConfig.Spec.Spec)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalGNSRoutingConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Spec: &vSpec,
	}

	log.Debugf("[getGlobalGNSRoutingConfigResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsServiceGroups Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSGnsServiceGroupsResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalGNSSvcGroup, error) {
	log.Debugf("[getGlobalGNSGnsServiceGroupsResolver]Parent Object %+v", obj)
	var vGlobalGNSSvcGroupList []*model.GlobalGNSSvcGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSGnsServiceGroupsResolver]Id %q", *id)
		vGNSSvcGroup, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsServiceGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSGnsServiceGroupsResolver]Error getting GnsServiceGroups node %q : %s", *id, err)
            return vGlobalGNSSvcGroupList, nil
        }
		dn := vGNSSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"gnssvcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vGNSSvcGroup.Spec.DisplayName)
vDescription := string(vGNSSvcGroup.Spec.Description)
vColor := string(vGNSSvcGroup.Spec.Color)
vRules := string(vGNSSvcGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGNSSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Color: &vColor,
	Rules: &vRules,
	}
		vGlobalGNSSvcGroupList = append(vGlobalGNSSvcGroupList, ret)

		log.Debugf("[getGlobalGNSGnsServiceGroupsResolver]Output GnsServiceGroups objects %v", vGlobalGNSSvcGroupList)

		return vGlobalGNSSvcGroupList, nil
	}

	log.Debug("[getGlobalGNSGnsServiceGroupsResolver]Id is empty, process all GnsServiceGroupss")

	vGNSSvcGroupParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSGnsServiceGroupsResolver]Error getting parent node %s", err)
        return vGlobalGNSSvcGroupList, nil
    }
	vGNSSvcGroupAllObj, err := vGNSSvcGroupParent.GetAllGnsServiceGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSGnsServiceGroupsResolver]Error getting GnsServiceGroups objects %s", err)
        return vGlobalGNSSvcGroupList, nil
    }
	for _, i := range vGNSSvcGroupAllObj {
		vGNSSvcGroup, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsServiceGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSGnsServiceGroupsResolver]Error getting GnsServiceGroups node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGNSSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"gnssvcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vGNSSvcGroup.Spec.DisplayName)
vDescription := string(vGNSSvcGroup.Spec.Description)
vColor := string(vGNSSvcGroup.Spec.Color)
vRules := string(vGNSSvcGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGNSSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Color: &vColor,
	Rules: &vRules,
	}
		vGlobalGNSSvcGroupList = append(vGlobalGNSSvcGroupList, ret)
	}

	log.Debugf("[getGlobalGNSGnsServiceGroupsResolver]Output GnsServiceGroups objects %v", vGlobalGNSSvcGroupList)

	return vGlobalGNSSvcGroupList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PublicServices Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSPublicServicesResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalPublicServiceConfig, error) {
	log.Debugf("[getGlobalGNSPublicServicesResolver]Parent Object %+v", obj)
	var vGlobalPublicServiceConfigList []*model.GlobalPublicServiceConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSPublicServicesResolver]Id %q", *id)
		vPublicServiceConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSPublicServicesResolver]Error getting PublicServices node %q : %s", *id, err)
            return vGlobalPublicServiceConfigList, nil
        }
		dn := vPublicServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"publicserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vFqdn := string(vPublicServiceConfig.Spec.Fqdn)
vConfig := string(vPublicServiceConfig.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPublicServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Fqdn: &vFqdn,
	Config: &vConfig,
	}
		vGlobalPublicServiceConfigList = append(vGlobalPublicServiceConfigList, ret)

		log.Debugf("[getGlobalGNSPublicServicesResolver]Output PublicServices objects %v", vGlobalPublicServiceConfigList)

		return vGlobalPublicServiceConfigList, nil
	}

	log.Debug("[getGlobalGNSPublicServicesResolver]Id is empty, process all PublicServicess")

	vPublicServiceConfigParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSPublicServicesResolver]Error getting parent node %s", err)
        return vGlobalPublicServiceConfigList, nil
    }
	vPublicServiceConfigAllObj, err := vPublicServiceConfigParent.GetAllPublicServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSPublicServicesResolver]Error getting PublicServices objects %s", err)
        return vGlobalPublicServiceConfigList, nil
    }
	for _, i := range vPublicServiceConfigAllObj {
		vPublicServiceConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPublicServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSPublicServicesResolver]Error getting PublicServices node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vPublicServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"publicserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vFqdn := string(vPublicServiceConfig.Spec.Fqdn)
vConfig := string(vPublicServiceConfig.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPublicServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Fqdn: &vFqdn,
	Config: &vConfig,
	}
		vGlobalPublicServiceConfigList = append(vGlobalPublicServiceConfigList, ret)
	}

	log.Debugf("[getGlobalGNSPublicServicesResolver]Output PublicServices objects %v", vGlobalPublicServiceConfigList)

	return vGlobalPublicServiceConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: SharedServices Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSSharedServicesResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalSharedServiceConfig, error) {
	log.Debugf("[getGlobalGNSSharedServicesResolver]Parent Object %+v", obj)
	var vGlobalSharedServiceConfigList []*model.GlobalSharedServiceConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSSharedServicesResolver]Id %q", *id)
		vSharedServiceConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetSharedServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSSharedServicesResolver]Error getting SharedServices node %q : %s", *id, err)
            return vGlobalSharedServiceConfigList, nil
        }
		dn := vSharedServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"sharedserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vSharedServiceConfig.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSharedServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	}
		vGlobalSharedServiceConfigList = append(vGlobalSharedServiceConfigList, ret)

		log.Debugf("[getGlobalGNSSharedServicesResolver]Output SharedServices objects %v", vGlobalSharedServiceConfigList)

		return vGlobalSharedServiceConfigList, nil
	}

	log.Debug("[getGlobalGNSSharedServicesResolver]Id is empty, process all SharedServicess")

	vSharedServiceConfigParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSSharedServicesResolver]Error getting parent node %s", err)
        return vGlobalSharedServiceConfigList, nil
    }
	vSharedServiceConfigAllObj, err := vSharedServiceConfigParent.GetAllSharedServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSSharedServicesResolver]Error getting SharedServices objects %s", err)
        return vGlobalSharedServiceConfigList, nil
    }
	for _, i := range vSharedServiceConfigAllObj {
		vSharedServiceConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetSharedServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSSharedServicesResolver]Error getting SharedServices node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSharedServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"sharedserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vSharedServiceConfig.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSharedServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	}
		vGlobalSharedServiceConfigList = append(vGlobalSharedServiceConfigList, ret)
	}

	log.Debugf("[getGlobalGNSSharedServicesResolver]Output SharedServices objects %v", vGlobalSharedServiceConfigList)

	return vGlobalSharedServiceConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: SloPolicies Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSSloPoliciesResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalSLOPolicy, error) {
	log.Debugf("[getGlobalGNSSloPoliciesResolver]Parent Object %+v", obj)
	var vGlobalSLOPolicyList []*model.GlobalSLOPolicy
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSSloPoliciesResolver]Id %q", *id)
		vSLOPolicy, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetSloPolicies(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSSloPoliciesResolver]Error getting SloPolicies node %q : %s", *id, err)
            return vGlobalSLOPolicyList, nil
        }
		dn := vSLOPolicy.DisplayName()
parentLabels := map[string]interface{}{"slopolicies.global.tsm.tanzu.vmware.com":dn}
vName := string(vSLOPolicy.Spec.Name)
vDisabled := bool(vSLOPolicy.Spec.Disabled)
vDescription := string(vSLOPolicy.Spec.Description)
vLabels := string(vSLOPolicy.Spec.Labels)
vSlis := string(vSLOPolicy.Spec.Slis)
ServiceNames, _ := json.Marshal(vSLOPolicy.Spec.ServiceNames)
ServiceNamesData := string(ServiceNames)
vSloTargetValue := string(vSLOPolicy.Spec.SloTargetValue)
vSloPeriod := string(vSLOPolicy.Spec.SloPeriod)
vSloKind := string(vSLOPolicy.Spec.SloKind)
Actions, _ := json.Marshal(vSLOPolicy.Spec.Actions)
ActionsData := string(Actions)
vSloCreationTime := string(vSLOPolicy.Spec.SloCreationTime)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSLOPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Disabled: &vDisabled,
	Description: &vDescription,
	Labels: &vLabels,
	Slis: &vSlis,
	ServiceNames: &ServiceNamesData,
	SloTargetValue: &vSloTargetValue,
	SloPeriod: &vSloPeriod,
	SloKind: &vSloKind,
	Actions: &ActionsData,
	SloCreationTime: &vSloCreationTime,
	}
		vGlobalSLOPolicyList = append(vGlobalSLOPolicyList, ret)

		log.Debugf("[getGlobalGNSSloPoliciesResolver]Output SloPolicies objects %v", vGlobalSLOPolicyList)

		return vGlobalSLOPolicyList, nil
	}

	log.Debug("[getGlobalGNSSloPoliciesResolver]Id is empty, process all SloPoliciess")

	vSLOPolicyParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSSloPoliciesResolver]Error getting parent node %s", err)
        return vGlobalSLOPolicyList, nil
    }
	vSLOPolicyAllObj, err := vSLOPolicyParent.GetAllSloPolicies(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSSloPoliciesResolver]Error getting SloPolicies objects %s", err)
        return vGlobalSLOPolicyList, nil
    }
	for _, i := range vSLOPolicyAllObj {
		vSLOPolicy, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetSloPolicies(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSSloPoliciesResolver]Error getting SloPolicies node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSLOPolicy.DisplayName()
parentLabels := map[string]interface{}{"slopolicies.global.tsm.tanzu.vmware.com":dn}
vName := string(vSLOPolicy.Spec.Name)
vDisabled := bool(vSLOPolicy.Spec.Disabled)
vDescription := string(vSLOPolicy.Spec.Description)
vLabels := string(vSLOPolicy.Spec.Labels)
vSlis := string(vSLOPolicy.Spec.Slis)
ServiceNames, _ := json.Marshal(vSLOPolicy.Spec.ServiceNames)
ServiceNamesData := string(ServiceNames)
vSloTargetValue := string(vSLOPolicy.Spec.SloTargetValue)
vSloPeriod := string(vSLOPolicy.Spec.SloPeriod)
vSloKind := string(vSLOPolicy.Spec.SloKind)
Actions, _ := json.Marshal(vSLOPolicy.Spec.Actions)
ActionsData := string(Actions)
vSloCreationTime := string(vSLOPolicy.Spec.SloCreationTime)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSLOPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Disabled: &vDisabled,
	Description: &vDescription,
	Labels: &vLabels,
	Slis: &vSlis,
	ServiceNames: &ServiceNamesData,
	SloTargetValue: &vSloTargetValue,
	SloPeriod: &vSloPeriod,
	SloKind: &vSloKind,
	Actions: &ActionsData,
	SloCreationTime: &vSloCreationTime,
	}
		vGlobalSLOPolicyList = append(vGlobalSLOPolicyList, ret)
	}

	log.Debugf("[getGlobalGNSSloPoliciesResolver]Output SloPolicies objects %v", vGlobalSLOPolicyList)

	return vGlobalSLOPolicyList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ExternalServices Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSExternalServicesResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalExternalServiceConfig, error) {
	log.Debugf("[getGlobalGNSExternalServicesResolver]Parent Object %+v", obj)
	var vGlobalExternalServiceConfigList []*model.GlobalExternalServiceConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSExternalServicesResolver]Id %q", *id)
		vExternalServiceConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetExternalServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSExternalServicesResolver]Error getting ExternalServices node %q : %s", *id, err)
            return vGlobalExternalServiceConfigList, nil
        }
		dn := vExternalServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"externalserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vExternalServiceConfig.Spec.Spec)
vSystem := bool(vExternalServiceConfig.Spec.System)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	System: &vSystem,
	}
		vGlobalExternalServiceConfigList = append(vGlobalExternalServiceConfigList, ret)

		log.Debugf("[getGlobalGNSExternalServicesResolver]Output ExternalServices objects %v", vGlobalExternalServiceConfigList)

		return vGlobalExternalServiceConfigList, nil
	}

	log.Debug("[getGlobalGNSExternalServicesResolver]Id is empty, process all ExternalServicess")

	vExternalServiceConfigParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSExternalServicesResolver]Error getting parent node %s", err)
        return vGlobalExternalServiceConfigList, nil
    }
	vExternalServiceConfigAllObj, err := vExternalServiceConfigParent.GetAllExternalServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSExternalServicesResolver]Error getting ExternalServices objects %s", err)
        return vGlobalExternalServiceConfigList, nil
    }
	for _, i := range vExternalServiceConfigAllObj {
		vExternalServiceConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetExternalServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSExternalServicesResolver]Error getting ExternalServices node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"externalserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vExternalServiceConfig.Spec.Spec)
vSystem := bool(vExternalServiceConfig.Spec.System)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	System: &vSystem,
	}
		vGlobalExternalServiceConfigList = append(vGlobalExternalServiceConfigList, ret)
	}

	log.Debugf("[getGlobalGNSExternalServicesResolver]Output ExternalServices objects %v", vGlobalExternalServiceConfigList)

	return vGlobalExternalServiceConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AutoscalingPolicies Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSAutoscalingPoliciesResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalAutoscalingPolicy, error) {
	log.Debugf("[getGlobalGNSAutoscalingPoliciesResolver]Parent Object %+v", obj)
	var vGlobalAutoscalingPolicyList []*model.GlobalAutoscalingPolicy
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSAutoscalingPoliciesResolver]Id %q", *id)
		vAutoscalingPolicy, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetAutoscalingPolicies(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSAutoscalingPoliciesResolver]Error getting AutoscalingPolicies node %q : %s", *id, err)
            return vGlobalAutoscalingPolicyList, nil
        }
		dn := vAutoscalingPolicy.DisplayName()
parentLabels := map[string]interface{}{"autoscalingpolicies.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscalingPolicy.Spec.Name)
vDescription := string(vAutoscalingPolicy.Spec.Description)
vLabels := string(vAutoscalingPolicy.Spec.Labels)
vServiceName := string(vAutoscalingPolicy.Spec.ServiceName)
vAutoscalerSpec := string(vAutoscalingPolicy.Spec.AutoscalerSpec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscalingPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Description: &vDescription,
	Labels: &vLabels,
	ServiceName: &vServiceName,
	AutoscalerSpec: &vAutoscalerSpec,
	}
		vGlobalAutoscalingPolicyList = append(vGlobalAutoscalingPolicyList, ret)

		log.Debugf("[getGlobalGNSAutoscalingPoliciesResolver]Output AutoscalingPolicies objects %v", vGlobalAutoscalingPolicyList)

		return vGlobalAutoscalingPolicyList, nil
	}

	log.Debug("[getGlobalGNSAutoscalingPoliciesResolver]Id is empty, process all AutoscalingPoliciess")

	vAutoscalingPolicyParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSAutoscalingPoliciesResolver]Error getting parent node %s", err)
        return vGlobalAutoscalingPolicyList, nil
    }
	vAutoscalingPolicyAllObj, err := vAutoscalingPolicyParent.GetAllAutoscalingPolicies(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSAutoscalingPoliciesResolver]Error getting AutoscalingPolicies objects %s", err)
        return vGlobalAutoscalingPolicyList, nil
    }
	for _, i := range vAutoscalingPolicyAllObj {
		vAutoscalingPolicy, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetAutoscalingPolicies(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSAutoscalingPoliciesResolver]Error getting AutoscalingPolicies node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAutoscalingPolicy.DisplayName()
parentLabels := map[string]interface{}{"autoscalingpolicies.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscalingPolicy.Spec.Name)
vDescription := string(vAutoscalingPolicy.Spec.Description)
vLabels := string(vAutoscalingPolicy.Spec.Labels)
vServiceName := string(vAutoscalingPolicy.Spec.ServiceName)
vAutoscalerSpec := string(vAutoscalingPolicy.Spec.AutoscalerSpec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscalingPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Description: &vDescription,
	Labels: &vLabels,
	ServiceName: &vServiceName,
	AutoscalerSpec: &vAutoscalerSpec,
	}
		vGlobalAutoscalingPolicyList = append(vGlobalAutoscalingPolicyList, ret)
	}

	log.Debugf("[getGlobalGNSAutoscalingPoliciesResolver]Output AutoscalingPolicies objects %v", vGlobalAutoscalingPolicyList)

	return vGlobalAutoscalingPolicyList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: RoutingPolicies Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSRoutingPoliciesResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalGNSRoutingConfig, error) {
	log.Debugf("[getGlobalGNSRoutingPoliciesResolver]Parent Object %+v", obj)
	var vGlobalGNSRoutingConfigList []*model.GlobalGNSRoutingConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSRoutingPoliciesResolver]Id %q", *id)
		vGNSRoutingConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetRoutingPolicies(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSRoutingPoliciesResolver]Error getting RoutingPolicies node %q : %s", *id, err)
            return vGlobalGNSRoutingConfigList, nil
        }
		dn := vGNSRoutingConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsroutingconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vGNSRoutingConfig.Spec.Name)
vSpec := string(vGNSRoutingConfig.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGNSRoutingConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Spec: &vSpec,
	}
		vGlobalGNSRoutingConfigList = append(vGlobalGNSRoutingConfigList, ret)

		log.Debugf("[getGlobalGNSRoutingPoliciesResolver]Output RoutingPolicies objects %v", vGlobalGNSRoutingConfigList)

		return vGlobalGNSRoutingConfigList, nil
	}

	log.Debug("[getGlobalGNSRoutingPoliciesResolver]Id is empty, process all RoutingPoliciess")

	vGNSRoutingConfigParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSRoutingPoliciesResolver]Error getting parent node %s", err)
        return vGlobalGNSRoutingConfigList, nil
    }
	vGNSRoutingConfigAllObj, err := vGNSRoutingConfigParent.GetAllRoutingPolicies(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSRoutingPoliciesResolver]Error getting RoutingPolicies objects %s", err)
        return vGlobalGNSRoutingConfigList, nil
    }
	for _, i := range vGNSRoutingConfigAllObj {
		vGNSRoutingConfig, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetRoutingPolicies(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSRoutingPoliciesResolver]Error getting RoutingPolicies node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGNSRoutingConfig.DisplayName()
parentLabels := map[string]interface{}{"gnsroutingconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vGNSRoutingConfig.Spec.Name)
vSpec := string(vGNSRoutingConfig.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGNSRoutingConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Spec: &vSpec,
	}
		vGlobalGNSRoutingConfigList = append(vGlobalGNSRoutingConfigList, ret)
	}

	log.Debugf("[getGlobalGNSRoutingPoliciesResolver]Output RoutingPolicies objects %v", vGlobalGNSRoutingConfigList)

	return vGlobalGNSRoutingConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ApiDiscovery Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSApiDiscoveryResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalApiDiscovery, error) {
	log.Debugf("[getGlobalGNSApiDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalApiDiscoveryList []*model.GlobalApiDiscovery
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSApiDiscoveryResolver]Id %q", *id)
		vApiDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetApiDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSApiDiscoveryResolver]Error getting ApiDiscovery node %q : %s", *id, err)
            return vGlobalApiDiscoveryList, nil
        }
		dn := vApiDiscovery.DisplayName()
parentLabels := map[string]interface{}{"apidiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vApiDiscovery.Spec.Description)
Labels, _ := json.Marshal(vApiDiscovery.Spec.Labels)
LabelsData := string(Labels)
Spec, _ := json.Marshal(vApiDiscovery.Spec.Spec)
SpecData := string(Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalApiDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &LabelsData,
	Spec: &SpecData,
	}
		vGlobalApiDiscoveryList = append(vGlobalApiDiscoveryList, ret)

		log.Debugf("[getGlobalGNSApiDiscoveryResolver]Output ApiDiscovery objects %v", vGlobalApiDiscoveryList)

		return vGlobalApiDiscoveryList, nil
	}

	log.Debug("[getGlobalGNSApiDiscoveryResolver]Id is empty, process all ApiDiscoverys")

	vApiDiscoveryParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSApiDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalApiDiscoveryList, nil
    }
	vApiDiscoveryAllObj, err := vApiDiscoveryParent.GetAllApiDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSApiDiscoveryResolver]Error getting ApiDiscovery objects %s", err)
        return vGlobalApiDiscoveryList, nil
    }
	for _, i := range vApiDiscoveryAllObj {
		vApiDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetApiDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSApiDiscoveryResolver]Error getting ApiDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vApiDiscovery.DisplayName()
parentLabels := map[string]interface{}{"apidiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vApiDiscovery.Spec.Description)
Labels, _ := json.Marshal(vApiDiscovery.Spec.Labels)
LabelsData := string(Labels)
Spec, _ := json.Marshal(vApiDiscovery.Spec.Spec)
SpecData := string(Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalApiDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &LabelsData,
	Spec: &SpecData,
	}
		vGlobalApiDiscoveryList = append(vGlobalApiDiscoveryList, ret)
	}

	log.Debugf("[getGlobalGNSApiDiscoveryResolver]Output ApiDiscovery objects %v", vGlobalApiDiscoveryList)

	return vGlobalApiDiscoveryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GeoDiscovery Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSGeoDiscoveryResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalGeoDiscovery, error) {
	log.Debugf("[getGlobalGNSGeoDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalGeoDiscoveryList []*model.GlobalGeoDiscovery
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSGeoDiscoveryResolver]Id %q", *id)
		vGeoDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGeoDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSGeoDiscoveryResolver]Error getting GeoDiscovery node %q : %s", *id, err)
            return vGlobalGeoDiscoveryList, nil
        }
		dn := vGeoDiscovery.DisplayName()
parentLabels := map[string]interface{}{"geodiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vGeoDiscovery.Spec.Description)
vLabels := string(vGeoDiscovery.Spec.Labels)
vSpec := string(vGeoDiscovery.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGeoDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalGeoDiscoveryList = append(vGlobalGeoDiscoveryList, ret)

		log.Debugf("[getGlobalGNSGeoDiscoveryResolver]Output GeoDiscovery objects %v", vGlobalGeoDiscoveryList)

		return vGlobalGeoDiscoveryList, nil
	}

	log.Debug("[getGlobalGNSGeoDiscoveryResolver]Id is empty, process all GeoDiscoverys")

	vGeoDiscoveryParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSGeoDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalGeoDiscoveryList, nil
    }
	vGeoDiscoveryAllObj, err := vGeoDiscoveryParent.GetAllGeoDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSGeoDiscoveryResolver]Error getting GeoDiscovery objects %s", err)
        return vGlobalGeoDiscoveryList, nil
    }
	for _, i := range vGeoDiscoveryAllObj {
		vGeoDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGeoDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSGeoDiscoveryResolver]Error getting GeoDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGeoDiscovery.DisplayName()
parentLabels := map[string]interface{}{"geodiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vGeoDiscovery.Spec.Description)
vLabels := string(vGeoDiscovery.Spec.Labels)
vSpec := string(vGeoDiscovery.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGeoDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalGeoDiscoveryList = append(vGlobalGeoDiscoveryList, ret)
	}

	log.Debugf("[getGlobalGNSGeoDiscoveryResolver]Output GeoDiscovery objects %v", vGlobalGeoDiscoveryList)

	return vGlobalGeoDiscoveryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PiiDiscovery Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSPiiDiscoveryResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalPiiDiscovery, error) {
	log.Debugf("[getGlobalGNSPiiDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalPiiDiscoveryList []*model.GlobalPiiDiscovery
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSPiiDiscoveryResolver]Id %q", *id)
		vPiiDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPiiDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSPiiDiscoveryResolver]Error getting PiiDiscovery node %q : %s", *id, err)
            return vGlobalPiiDiscoveryList, nil
        }
		dn := vPiiDiscovery.DisplayName()
parentLabels := map[string]interface{}{"piidiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vPiiDiscovery.Spec.Description)
vLabels := string(vPiiDiscovery.Spec.Labels)
vSpec := string(vPiiDiscovery.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPiiDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalPiiDiscoveryList = append(vGlobalPiiDiscoveryList, ret)

		log.Debugf("[getGlobalGNSPiiDiscoveryResolver]Output PiiDiscovery objects %v", vGlobalPiiDiscoveryList)

		return vGlobalPiiDiscoveryList, nil
	}

	log.Debug("[getGlobalGNSPiiDiscoveryResolver]Id is empty, process all PiiDiscoverys")

	vPiiDiscoveryParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSPiiDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalPiiDiscoveryList, nil
    }
	vPiiDiscoveryAllObj, err := vPiiDiscoveryParent.GetAllPiiDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSPiiDiscoveryResolver]Error getting PiiDiscovery objects %s", err)
        return vGlobalPiiDiscoveryList, nil
    }
	for _, i := range vPiiDiscoveryAllObj {
		vPiiDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetPiiDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSPiiDiscoveryResolver]Error getting PiiDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vPiiDiscovery.DisplayName()
parentLabels := map[string]interface{}{"piidiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vPiiDiscovery.Spec.Description)
vLabels := string(vPiiDiscovery.Spec.Labels)
vSpec := string(vPiiDiscovery.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPiiDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalPiiDiscoveryList = append(vGlobalPiiDiscoveryList, ret)
	}

	log.Debugf("[getGlobalGNSPiiDiscoveryResolver]Output PiiDiscovery objects %v", vGlobalPiiDiscoveryList)

	return vGlobalPiiDiscoveryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AttackDiscovery Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSAttackDiscoveryResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalAttackDiscovery, error) {
	log.Debugf("[getGlobalGNSAttackDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalAttackDiscoveryList []*model.GlobalAttackDiscovery
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSAttackDiscoveryResolver]Id %q", *id)
		vAttackDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetAttackDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSAttackDiscoveryResolver]Error getting AttackDiscovery node %q : %s", *id, err)
            return vGlobalAttackDiscoveryList, nil
        }
		dn := vAttackDiscovery.DisplayName()
parentLabels := map[string]interface{}{"attackdiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vAttackDiscovery.Spec.Description)
vLabels := string(vAttackDiscovery.Spec.Labels)
vSpec := string(vAttackDiscovery.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAttackDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalAttackDiscoveryList = append(vGlobalAttackDiscoveryList, ret)

		log.Debugf("[getGlobalGNSAttackDiscoveryResolver]Output AttackDiscovery objects %v", vGlobalAttackDiscoveryList)

		return vGlobalAttackDiscoveryList, nil
	}

	log.Debug("[getGlobalGNSAttackDiscoveryResolver]Id is empty, process all AttackDiscoverys")

	vAttackDiscoveryParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSAttackDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalAttackDiscoveryList, nil
    }
	vAttackDiscoveryAllObj, err := vAttackDiscoveryParent.GetAllAttackDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSAttackDiscoveryResolver]Error getting AttackDiscovery objects %s", err)
        return vGlobalAttackDiscoveryList, nil
    }
	for _, i := range vAttackDiscoveryAllObj {
		vAttackDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetAttackDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSAttackDiscoveryResolver]Error getting AttackDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAttackDiscovery.DisplayName()
parentLabels := map[string]interface{}{"attackdiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vAttackDiscovery.Spec.Description)
vLabels := string(vAttackDiscovery.Spec.Labels)
vSpec := string(vAttackDiscovery.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAttackDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalAttackDiscoveryList = append(vGlobalAttackDiscoveryList, ret)
	}

	log.Debugf("[getGlobalGNSAttackDiscoveryResolver]Output AttackDiscovery objects %v", vGlobalAttackDiscoveryList)

	return vGlobalAttackDiscoveryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: UserDiscovery Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSUserDiscoveryResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalUserDiscovery, error) {
	log.Debugf("[getGlobalGNSUserDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalUserDiscoveryList []*model.GlobalUserDiscovery
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSUserDiscoveryResolver]Id %q", *id)
		vUserDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetUserDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSUserDiscoveryResolver]Error getting UserDiscovery node %q : %s", *id, err)
            return vGlobalUserDiscoveryList, nil
        }
		dn := vUserDiscovery.DisplayName()
parentLabels := map[string]interface{}{"userdiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vUserDiscovery.Spec.Description)
vLabels := string(vUserDiscovery.Spec.Labels)
vSpec := string(vUserDiscovery.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUserDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalUserDiscoveryList = append(vGlobalUserDiscoveryList, ret)

		log.Debugf("[getGlobalGNSUserDiscoveryResolver]Output UserDiscovery objects %v", vGlobalUserDiscoveryList)

		return vGlobalUserDiscoveryList, nil
	}

	log.Debug("[getGlobalGNSUserDiscoveryResolver]Id is empty, process all UserDiscoverys")

	vUserDiscoveryParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSUserDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalUserDiscoveryList, nil
    }
	vUserDiscoveryAllObj, err := vUserDiscoveryParent.GetAllUserDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSUserDiscoveryResolver]Error getting UserDiscovery objects %s", err)
        return vGlobalUserDiscoveryList, nil
    }
	for _, i := range vUserDiscoveryAllObj {
		vUserDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetUserDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSUserDiscoveryResolver]Error getting UserDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vUserDiscovery.DisplayName()
parentLabels := map[string]interface{}{"userdiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vUserDiscovery.Spec.Description)
vLabels := string(vUserDiscovery.Spec.Labels)
vSpec := string(vUserDiscovery.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUserDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalUserDiscoveryList = append(vGlobalUserDiscoveryList, ret)
	}

	log.Debugf("[getGlobalGNSUserDiscoveryResolver]Output UserDiscovery objects %v", vGlobalUserDiscoveryList)

	return vGlobalUserDiscoveryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsAccessControlPolicy Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSGnsAccessControlPolicyResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalGnsAccessControlPolicy, error) {
	log.Debugf("[getGlobalGNSGnsAccessControlPolicyResolver]Parent Object %+v", obj)
	var vGlobalGnsAccessControlPolicyList []*model.GlobalGnsAccessControlPolicy
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSGnsAccessControlPolicyResolver]Id %q", *id)
		vGnsAccessControlPolicy, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsAccessControlPolicy(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSGnsAccessControlPolicyResolver]Error getting GnsAccessControlPolicy node %q : %s", *id, err)
            return vGlobalGnsAccessControlPolicyList, nil
        }
		dn := vGnsAccessControlPolicy.DisplayName()
parentLabels := map[string]interface{}{"gnsaccesscontrolpolicies.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vGnsAccessControlPolicy.Spec.Description)
vLabels := string(vGnsAccessControlPolicy.Spec.Labels)
vSpec := string(vGnsAccessControlPolicy.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsAccessControlPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalGnsAccessControlPolicyList = append(vGlobalGnsAccessControlPolicyList, ret)

		log.Debugf("[getGlobalGNSGnsAccessControlPolicyResolver]Output GnsAccessControlPolicy objects %v", vGlobalGnsAccessControlPolicyList)

		return vGlobalGnsAccessControlPolicyList, nil
	}

	log.Debug("[getGlobalGNSGnsAccessControlPolicyResolver]Id is empty, process all GnsAccessControlPolicys")

	vGnsAccessControlPolicyParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSGnsAccessControlPolicyResolver]Error getting parent node %s", err)
        return vGlobalGnsAccessControlPolicyList, nil
    }
	vGnsAccessControlPolicyAllObj, err := vGnsAccessControlPolicyParent.GetAllGnsAccessControlPolicy(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSGnsAccessControlPolicyResolver]Error getting GnsAccessControlPolicy objects %s", err)
        return vGlobalGnsAccessControlPolicyList, nil
    }
	for _, i := range vGnsAccessControlPolicyAllObj {
		vGnsAccessControlPolicy, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsAccessControlPolicy(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSGnsAccessControlPolicyResolver]Error getting GnsAccessControlPolicy node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsAccessControlPolicy.DisplayName()
parentLabels := map[string]interface{}{"gnsaccesscontrolpolicies.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vGnsAccessControlPolicy.Spec.Description)
vLabels := string(vGnsAccessControlPolicy.Spec.Labels)
vSpec := string(vGnsAccessControlPolicy.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsAccessControlPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalGnsAccessControlPolicyList = append(vGlobalGnsAccessControlPolicyList, ret)
	}

	log.Debugf("[getGlobalGNSGnsAccessControlPolicyResolver]Output GnsAccessControlPolicy objects %v", vGlobalGnsAccessControlPolicyList)

	return vGlobalGnsAccessControlPolicyList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsSchemaViolationDiscovery Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSGnsSchemaViolationDiscoveryResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalGnsSchemaViolationDiscovery, error) {
	log.Debugf("[getGlobalGNSGnsSchemaViolationDiscoveryResolver]Parent Object %+v", obj)
	var vGlobalGnsSchemaViolationDiscoveryList []*model.GlobalGnsSchemaViolationDiscovery
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSGnsSchemaViolationDiscoveryResolver]Id %q", *id)
		vGnsSchemaViolationDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsSchemaViolationDiscovery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSGnsSchemaViolationDiscoveryResolver]Error getting GnsSchemaViolationDiscovery node %q : %s", *id, err)
            return vGlobalGnsSchemaViolationDiscoveryList, nil
        }
		dn := vGnsSchemaViolationDiscovery.DisplayName()
parentLabels := map[string]interface{}{"gnsschemaviolationdiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vGnsSchemaViolationDiscovery.Spec.Description)
vLabels := string(vGnsSchemaViolationDiscovery.Spec.Labels)
vSpec := string(vGnsSchemaViolationDiscovery.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsSchemaViolationDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalGnsSchemaViolationDiscoveryList = append(vGlobalGnsSchemaViolationDiscoveryList, ret)

		log.Debugf("[getGlobalGNSGnsSchemaViolationDiscoveryResolver]Output GnsSchemaViolationDiscovery objects %v", vGlobalGnsSchemaViolationDiscoveryList)

		return vGlobalGnsSchemaViolationDiscoveryList, nil
	}

	log.Debug("[getGlobalGNSGnsSchemaViolationDiscoveryResolver]Id is empty, process all GnsSchemaViolationDiscoverys")

	vGnsSchemaViolationDiscoveryParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSGnsSchemaViolationDiscoveryResolver]Error getting parent node %s", err)
        return vGlobalGnsSchemaViolationDiscoveryList, nil
    }
	vGnsSchemaViolationDiscoveryAllObj, err := vGnsSchemaViolationDiscoveryParent.GetAllGnsSchemaViolationDiscovery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSGnsSchemaViolationDiscoveryResolver]Error getting GnsSchemaViolationDiscovery objects %s", err)
        return vGlobalGnsSchemaViolationDiscoveryList, nil
    }
	for _, i := range vGnsSchemaViolationDiscoveryAllObj {
		vGnsSchemaViolationDiscovery, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsSchemaViolationDiscovery(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSGnsSchemaViolationDiscoveryResolver]Error getting GnsSchemaViolationDiscovery node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsSchemaViolationDiscovery.DisplayName()
parentLabels := map[string]interface{}{"gnsschemaviolationdiscoveries.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vGnsSchemaViolationDiscovery.Spec.Description)
vLabels := string(vGnsSchemaViolationDiscovery.Spec.Labels)
vSpec := string(vGnsSchemaViolationDiscovery.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsSchemaViolationDiscovery {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &vSpec,
	}
		vGlobalGnsSchemaViolationDiscoveryList = append(vGlobalGnsSchemaViolationDiscoveryList, ret)
	}

	log.Debugf("[getGlobalGNSGnsSchemaViolationDiscoveryResolver]Output GnsSchemaViolationDiscovery objects %v", vGlobalGnsSchemaViolationDiscoveryList)

	return vGlobalGnsSchemaViolationDiscoveryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: GnsSegmentationPolicy Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSGnsSegmentationPolicyResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalGnsSegmentationPolicy, error) {
	log.Debugf("[getGlobalGNSGnsSegmentationPolicyResolver]Parent Object %+v", obj)
	var vGlobalGnsSegmentationPolicyList []*model.GlobalGnsSegmentationPolicy
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSGnsSegmentationPolicyResolver]Id %q", *id)
		vGnsSegmentationPolicy, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsSegmentationPolicy(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSGnsSegmentationPolicyResolver]Error getting GnsSegmentationPolicy node %q : %s", *id, err)
            return vGlobalGnsSegmentationPolicyList, nil
        }
		dn := vGnsSegmentationPolicy.DisplayName()
parentLabels := map[string]interface{}{"gnssegmentationpolicies.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vGnsSegmentationPolicy.Spec.Description)
vLabels := string(vGnsSegmentationPolicy.Spec.Labels)
Spec, _ := json.Marshal(vGnsSegmentationPolicy.Spec.Spec)
SpecData := string(Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsSegmentationPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &SpecData,
	}
		vGlobalGnsSegmentationPolicyList = append(vGlobalGnsSegmentationPolicyList, ret)

		log.Debugf("[getGlobalGNSGnsSegmentationPolicyResolver]Output GnsSegmentationPolicy objects %v", vGlobalGnsSegmentationPolicyList)

		return vGlobalGnsSegmentationPolicyList, nil
	}

	log.Debug("[getGlobalGNSGnsSegmentationPolicyResolver]Id is empty, process all GnsSegmentationPolicys")

	vGnsSegmentationPolicyParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSGnsSegmentationPolicyResolver]Error getting parent node %s", err)
        return vGlobalGnsSegmentationPolicyList, nil
    }
	vGnsSegmentationPolicyAllObj, err := vGnsSegmentationPolicyParent.GetAllGnsSegmentationPolicy(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSGnsSegmentationPolicyResolver]Error getting GnsSegmentationPolicy objects %s", err)
        return vGlobalGnsSegmentationPolicyList, nil
    }
	for _, i := range vGnsSegmentationPolicyAllObj {
		vGnsSegmentationPolicy, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).Gns(getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com")).GetGnsSegmentationPolicy(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSGnsSegmentationPolicyResolver]Error getting GnsSegmentationPolicy node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vGnsSegmentationPolicy.DisplayName()
parentLabels := map[string]interface{}{"gnssegmentationpolicies.global.tsm.tanzu.vmware.com":dn}
vDescription := string(vGnsSegmentationPolicy.Spec.Description)
vLabels := string(vGnsSegmentationPolicy.Spec.Labels)
Spec, _ := json.Marshal(vGnsSegmentationPolicy.Spec.Spec)
SpecData := string(Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGnsSegmentationPolicy {
	Id: &dn,
	ParentLabels: parentLabels,
	Description: &vDescription,
	Labels: &vLabels,
	Spec: &SpecData,
	}
		vGlobalGnsSegmentationPolicyList = append(vGlobalGnsSegmentationPolicyList, ret)
	}

	log.Debugf("[getGlobalGNSGnsSegmentationPolicyResolver]Output GnsSegmentationPolicy objects %v", vGlobalGnsSegmentationPolicyList)

	return vGlobalGnsSegmentationPolicyList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: MemberGroups Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSMemberGroupsResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalSvcGroup, error) {
	log.Debugf("[getGlobalGNSMemberGroupsResolver]Parent Object %+v", obj)
	var vGlobalSvcGroupList []*model.GlobalSvcGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSMemberGroupsResolver]Id %q", *id)
		vSvcGroupParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalGNSMemberGroupsResolver]Error getting MemberGroups %q : %s", *id, err)
			return vGlobalSvcGroupList, nil
		}
		vSvcGroup, err := vSvcGroupParent.GetMemberGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSMemberGroupsResolver]Error getting MemberGroups %q : %s", *id, err)
			return vGlobalSvcGroupList, nil
		}
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)

		log.Debugf("[getGlobalGNSMemberGroupsResolver]Output MemberGroups objects %v", vGlobalSvcGroupList)

		return vGlobalSvcGroupList, nil
	}

	log.Debug("[getGlobalGNSMemberGroupsResolver]Id is empty, process all MemberGroupss")

	vSvcGroupParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSMemberGroupsResolver]Error getting parent node %s", err)
        return vGlobalSvcGroupList, nil
    }
	vSvcGroupAllObj, err := vSvcGroupParent.GetAllMemberGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSMemberGroupsResolver]Error getting MemberGroups %s", err)
        return vGlobalSvcGroupList, nil
    }
	for _, i := range vSvcGroupAllObj {
		vSvcGroupParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalGNSMemberGroupsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vSvcGroup, err := vSvcGroupParent.GetMemberGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSMemberGroupsResolver]Error getting MemberGroups node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)
	}
	log.Debugf("[getGlobalGNSMemberGroupsResolver]List of MemberGroups object %v", vGlobalSvcGroupList)
	return vGlobalSvcGroupList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Members Node: GNS PKG: Global
//////////////////////////////////////
func getGlobalGNSMembersResolver(obj *model.GlobalGNS, id *string) ([]*model.GlobalDomain, error) {
	log.Debugf("[getGlobalGNSMembersResolver]Parent Object %+v", obj)
	var vGlobalDomainList []*model.GlobalDomain
	if id != nil && *id != "" {
		log.Debugf("[getGlobalGNSMembersResolver]Id %q", *id)
		vDomainParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalGNSMembersResolver]Error getting Members %q : %s", *id, err)
			return vGlobalDomainList, nil
		}
		vDomain, err := vDomainParent.GetMembers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalGNSMembersResolver]Error getting Members %q : %s", *id, err)
			return vGlobalDomainList, nil
		}
		dn := vDomain.DisplayName()
parentLabels := map[string]interface{}{"domains.global.tsm.tanzu.vmware.com":dn}
vName := string(vDomain.Spec.Name)
vEnviornmentType := string(vDomain.Spec.EnviornmentType)
vApiLink := string(vDomain.Spec.ApiLink)
vAnnotations := string(vDomain.Spec.Annotations)
vLabels := string(vDomain.Spec.Labels)
vMetadata := string(vDomain.Spec.Metadata)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	EnviornmentType: &vEnviornmentType,
	ApiLink: &vApiLink,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Metadata: &vMetadata,
	}
		vGlobalDomainList = append(vGlobalDomainList, ret)

		log.Debugf("[getGlobalGNSMembersResolver]Output Members objects %v", vGlobalDomainList)

		return vGlobalDomainList, nil
	}

	log.Debug("[getGlobalGNSMembersResolver]Id is empty, process all Memberss")

	vDomainParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalGNSMembersResolver]Error getting parent node %s", err)
        return vGlobalDomainList, nil
    }
	vDomainAllObj, err := vDomainParent.GetAllMembers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalGNSMembersResolver]Error getting Members %s", err)
        return vGlobalDomainList, nil
    }
	for _, i := range vDomainAllObj {
		vDomainParent, err := nc.GlobalRoot().Config().GlobalNamespace(getParentName(obj.ParentLabels, "globalnamespaces.global.tsm.tanzu.vmware.com")).GetGns(context.TODO(), getParentName(obj.ParentLabels, "gnss.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalGNSMembersResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vDomain, err := vDomainParent.GetMembers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalGNSMembersResolver]Error getting Members node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vDomain.DisplayName()
parentLabels := map[string]interface{}{"domains.global.tsm.tanzu.vmware.com":dn}
vName := string(vDomain.Spec.Name)
vEnviornmentType := string(vDomain.Spec.EnviornmentType)
vApiLink := string(vDomain.Spec.ApiLink)
vAnnotations := string(vDomain.Spec.Annotations)
vLabels := string(vDomain.Spec.Labels)
vMetadata := string(vDomain.Spec.Metadata)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDomain {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	EnviornmentType: &vEnviornmentType,
	ApiLink: &vApiLink,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Metadata: &vMetadata,
	}
		vGlobalDomainList = append(vGlobalDomainList, ret)
	}
	log.Debugf("[getGlobalGNSMembersResolver]List of Members object %v", vGlobalDomainList)
	return vGlobalDomainList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: HaConfigV2 Node: HostConfigV2 PKG: Global
//////////////////////////////////////
func getGlobalHostConfigV2HaConfigV2Resolver(obj *model.GlobalHostConfigV2, id *string) (*model.GlobalHaConfigV2, error) {
	log.Debugf("[getGlobalHostConfigV2HaConfigV2Resolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalHostConfigV2HaConfigV2Resolver]Id %q", *id)
		vHaConfigV2, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).HostConfigV2(getParentName(obj.ParentLabels, "hostconfigv2s.global.tsm.tanzu.vmware.com")).GetHaConfigV2(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalHostConfigV2HaConfigV2Resolver]Error getting HaConfigV2 node %q : %s", *id, err)
			return &model.GlobalHaConfigV2{}, nil
		}
		dn := vHaConfigV2.DisplayName()
parentLabels := map[string]interface{}{"haconfigv2s.global.tsm.tanzu.vmware.com":dn}
vConfigType := string(vHaConfigV2.Spec.ConfigType)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalHaConfigV2 {
	Id: &dn,
	ParentLabels: parentLabels,
	ConfigType: &vConfigType,
	}

		log.Debugf("[getGlobalHostConfigV2HaConfigV2Resolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalHostConfigV2HaConfigV2Resolver]Id is empty, process all HaConfigV2s")
	vHaConfigV2Parent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetHostConfigV2(context.TODO(), getParentName(obj.ParentLabels, "hostconfigv2s.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalHostConfigV2HaConfigV2Resolver]Failed to get parent node %s", err)
        return &model.GlobalHaConfigV2{}, nil
    }
	vHaConfigV2, err := vHaConfigV2Parent.GetHaConfigV2(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalHostConfigV2HaConfigV2Resolver]Error getting HaConfigV2 node %s", err)
        return &model.GlobalHaConfigV2{}, nil
    }
	dn := vHaConfigV2.DisplayName()
parentLabels := map[string]interface{}{"haconfigv2s.global.tsm.tanzu.vmware.com":dn}
vConfigType := string(vHaConfigV2.Spec.ConfigType)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalHaConfigV2 {
	Id: &dn,
	ParentLabels: parentLabels,
	ConfigType: &vConfigType,
	}

	log.Debugf("[getGlobalHostConfigV2HaConfigV2Resolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: OutboundAuthenticationMode Node: HostConfigV2 PKG: Global
//////////////////////////////////////
func getGlobalHostConfigV2OutboundAuthenticationModeResolver(obj *model.GlobalHostConfigV2, id *string) (*model.GlobalOutboundAuthenticationMode, error) {
	log.Debugf("[getGlobalHostConfigV2OutboundAuthenticationModeResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalHostConfigV2OutboundAuthenticationModeResolver]Id %q", *id)
		vOutboundAuthenticationMode, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).HostConfigV2(getParentName(obj.ParentLabels, "hostconfigv2s.global.tsm.tanzu.vmware.com")).GetOutboundAuthenticationMode(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalHostConfigV2OutboundAuthenticationModeResolver]Error getting OutboundAuthenticationMode node %q : %s", *id, err)
			return &model.GlobalOutboundAuthenticationMode{}, nil
		}
		dn := vOutboundAuthenticationMode.DisplayName()
parentLabels := map[string]interface{}{"outboundauthenticationmodes.global.tsm.tanzu.vmware.com":dn}
vMode := string(vOutboundAuthenticationMode.Spec.Mode)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalOutboundAuthenticationMode {
	Id: &dn,
	ParentLabels: parentLabels,
	Mode: &vMode,
	}

		log.Debugf("[getGlobalHostConfigV2OutboundAuthenticationModeResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalHostConfigV2OutboundAuthenticationModeResolver]Id is empty, process all OutboundAuthenticationModes")
	vOutboundAuthenticationModeParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetHostConfigV2(context.TODO(), getParentName(obj.ParentLabels, "hostconfigv2s.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalHostConfigV2OutboundAuthenticationModeResolver]Failed to get parent node %s", err)
        return &model.GlobalOutboundAuthenticationMode{}, nil
    }
	vOutboundAuthenticationMode, err := vOutboundAuthenticationModeParent.GetOutboundAuthenticationMode(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalHostConfigV2OutboundAuthenticationModeResolver]Error getting OutboundAuthenticationMode node %s", err)
        return &model.GlobalOutboundAuthenticationMode{}, nil
    }
	dn := vOutboundAuthenticationMode.DisplayName()
parentLabels := map[string]interface{}{"outboundauthenticationmodes.global.tsm.tanzu.vmware.com":dn}
vMode := string(vOutboundAuthenticationMode.Spec.Mode)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalOutboundAuthenticationMode {
	Id: &dn,
	ParentLabels: parentLabels,
	Mode: &vMode,
	}

	log.Debugf("[getGlobalHostConfigV2OutboundAuthenticationModeResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: HaConfig Node: HostConfig PKG: Global
//////////////////////////////////////
func getGlobalHostConfigHaConfigResolver(obj *model.GlobalHostConfig, id *string) (*model.GlobalHaConfig, error) {
	log.Debugf("[getGlobalHostConfigHaConfigResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalHostConfigHaConfigResolver]Id %q", *id)
		vHaConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).HostConfig(getParentName(obj.ParentLabels, "hostconfigs.global.tsm.tanzu.vmware.com")).GetHaConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalHostConfigHaConfigResolver]Error getting HaConfig node %q : %s", *id, err)
			return &model.GlobalHaConfig{}, nil
		}
		dn := vHaConfig.DisplayName()
parentLabels := map[string]interface{}{"haconfigs.global.tsm.tanzu.vmware.com":dn}
vConfigType := string(vHaConfig.Spec.ConfigType)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalHaConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	ConfigType: &vConfigType,
	}

		log.Debugf("[getGlobalHostConfigHaConfigResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalHostConfigHaConfigResolver]Id is empty, process all HaConfigs")
	vHaConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetHostConfig(context.TODO(), getParentName(obj.ParentLabels, "hostconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalHostConfigHaConfigResolver]Failed to get parent node %s", err)
        return &model.GlobalHaConfig{}, nil
    }
	vHaConfig, err := vHaConfigParent.GetHaConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalHostConfigHaConfigResolver]Error getting HaConfig node %s", err)
        return &model.GlobalHaConfig{}, nil
    }
	dn := vHaConfig.DisplayName()
parentLabels := map[string]interface{}{"haconfigs.global.tsm.tanzu.vmware.com":dn}
vConfigType := string(vHaConfig.Spec.ConfigType)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalHaConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	ConfigType: &vConfigType,
	}

	log.Debugf("[getGlobalHostConfigHaConfigResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: JobFolder Node: Inventory PKG: Global
//////////////////////////////////////
func getGlobalInventoryJobFolderResolver(obj *model.GlobalInventory, id *string) (*model.GlobalJobFolder, error) {
	log.Debugf("[getGlobalInventoryJobFolderResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalInventoryJobFolderResolver]Id %q", *id)
		vJobFolder, err := nc.GlobalRoot().Inventory().GetJobFolder(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalInventoryJobFolderResolver]Error getting JobFolder node %q : %s", *id, err)
			return &model.GlobalJobFolder{}, nil
		}
		dn := vJobFolder.DisplayName()
parentLabels := map[string]interface{}{"jobfolders.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalJobFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalInventoryJobFolderResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalInventoryJobFolderResolver]Id is empty, process all JobFolders")
	vJobFolderParent, err := nc.GlobalRoot().GetInventory(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalInventoryJobFolderResolver]Failed to get parent node %s", err)
        return &model.GlobalJobFolder{}, nil
    }
	vJobFolder, err := vJobFolderParent.GetJobFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalInventoryJobFolderResolver]Error getting JobFolder node %s", err)
        return &model.GlobalJobFolder{}, nil
    }
	dn := vJobFolder.DisplayName()
parentLabels := map[string]interface{}{"jobfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalJobFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalInventoryJobFolderResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Regions Node: Inventory PKG: Global
//////////////////////////////////////
func getGlobalInventoryRegionsResolver(obj *model.GlobalInventory, id *string) ([]*model.GlobalDCRegion, error) {
	log.Debugf("[getGlobalInventoryRegionsResolver]Parent Object %+v", obj)
	var vGlobalDCRegionList []*model.GlobalDCRegion
	if id != nil && *id != "" {
		log.Debugf("[getGlobalInventoryRegionsResolver]Id %q", *id)
		vDCRegion, err := nc.GlobalRoot().Inventory().GetRegions(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalInventoryRegionsResolver]Error getting Regions node %q : %s", *id, err)
            return vGlobalDCRegionList, nil
        }
		dn := vDCRegion.DisplayName()
parentLabels := map[string]interface{}{"dcregions.global.tsm.tanzu.vmware.com":dn}
vName := string(vDCRegion.Spec.Name)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDCRegion {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalDCRegionList = append(vGlobalDCRegionList, ret)

		log.Debugf("[getGlobalInventoryRegionsResolver]Output Regions objects %v", vGlobalDCRegionList)

		return vGlobalDCRegionList, nil
	}

	log.Debug("[getGlobalInventoryRegionsResolver]Id is empty, process all Regionss")

	vDCRegionParent, err := nc.GlobalRoot().GetInventory(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalInventoryRegionsResolver]Error getting parent node %s", err)
        return vGlobalDCRegionList, nil
    }
	vDCRegionAllObj, err := vDCRegionParent.GetAllRegions(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalInventoryRegionsResolver]Error getting Regions objects %s", err)
        return vGlobalDCRegionList, nil
    }
	for _, i := range vDCRegionAllObj {
		vDCRegion, err := nc.GlobalRoot().Inventory().GetRegions(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalInventoryRegionsResolver]Error getting Regions node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDCRegion.DisplayName()
parentLabels := map[string]interface{}{"dcregions.global.tsm.tanzu.vmware.com":dn}
vName := string(vDCRegion.Spec.Name)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDCRegion {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalDCRegionList = append(vGlobalDCRegionList, ret)
	}

	log.Debugf("[getGlobalInventoryRegionsResolver]Output Regions objects %v", vGlobalDCRegionList)

	return vGlobalDCRegionList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Clusters Node: Inventory PKG: Global
//////////////////////////////////////
func getGlobalInventoryClustersResolver(obj *model.GlobalInventory, id *string) ([]*model.GlobalCluster, error) {
	log.Debugf("[getGlobalInventoryClustersResolver]Parent Object %+v", obj)
	var vGlobalClusterList []*model.GlobalCluster
	if id != nil && *id != "" {
		log.Debugf("[getGlobalInventoryClustersResolver]Id %q", *id)
		vCluster, err := nc.GlobalRoot().Inventory().GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalInventoryClustersResolver]Error getting Clusters node %q : %s", *id, err)
            return vGlobalClusterList, nil
        }
		dn := vCluster.DisplayName()
parentLabels := map[string]interface{}{"clusters.global.tsm.tanzu.vmware.com":dn}
vName := string(vCluster.Spec.Name)
vUuid := string(vCluster.Spec.Uuid)
vConnected := bool(vCluster.Spec.Connected)
vIstioState := string(vCluster.Spec.IstioState)
vStatus := string(vCluster.Spec.Status)
vStatusHistory := string(vCluster.Spec.StatusHistory)
vCastatus := string(vCluster.Spec.Castatus)
vCaStatusHistory := string(vCluster.Spec.CaStatusHistory)
vComponentStatuses := string(vCluster.Spec.ComponentStatuses)
vComponentStatusesHistory := string(vCluster.Spec.ComponentStatusesHistory)
vType := string(vCluster.Spec.Type)
vProjectId := string(vCluster.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Uuid: &vUuid,
	Connected: &vConnected,
	IstioState: &vIstioState,
	Status: &vStatus,
	StatusHistory: &vStatusHistory,
	Castatus: &vCastatus,
	CaStatusHistory: &vCaStatusHistory,
	ComponentStatuses: &vComponentStatuses,
	ComponentStatusesHistory: &vComponentStatusesHistory,
	Type: &vType,
	ProjectId: &vProjectId,
	}
		vGlobalClusterList = append(vGlobalClusterList, ret)

		log.Debugf("[getGlobalInventoryClustersResolver]Output Clusters objects %v", vGlobalClusterList)

		return vGlobalClusterList, nil
	}

	log.Debug("[getGlobalInventoryClustersResolver]Id is empty, process all Clusterss")

	vClusterParent, err := nc.GlobalRoot().GetInventory(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalInventoryClustersResolver]Error getting parent node %s", err)
        return vGlobalClusterList, nil
    }
	vClusterAllObj, err := vClusterParent.GetAllClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalInventoryClustersResolver]Error getting Clusters objects %s", err)
        return vGlobalClusterList, nil
    }
	for _, i := range vClusterAllObj {
		vCluster, err := nc.GlobalRoot().Inventory().GetClusters(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalInventoryClustersResolver]Error getting Clusters node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vCluster.DisplayName()
parentLabels := map[string]interface{}{"clusters.global.tsm.tanzu.vmware.com":dn}
vName := string(vCluster.Spec.Name)
vUuid := string(vCluster.Spec.Uuid)
vConnected := bool(vCluster.Spec.Connected)
vIstioState := string(vCluster.Spec.IstioState)
vStatus := string(vCluster.Spec.Status)
vStatusHistory := string(vCluster.Spec.StatusHistory)
vCastatus := string(vCluster.Spec.Castatus)
vCaStatusHistory := string(vCluster.Spec.CaStatusHistory)
vComponentStatuses := string(vCluster.Spec.ComponentStatuses)
vComponentStatusesHistory := string(vCluster.Spec.ComponentStatusesHistory)
vType := string(vCluster.Spec.Type)
vProjectId := string(vCluster.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Uuid: &vUuid,
	Connected: &vConnected,
	IstioState: &vIstioState,
	Status: &vStatus,
	StatusHistory: &vStatusHistory,
	Castatus: &vCastatus,
	CaStatusHistory: &vCaStatusHistory,
	ComponentStatuses: &vComponentStatuses,
	ComponentStatusesHistory: &vComponentStatusesHistory,
	Type: &vType,
	ProjectId: &vProjectId,
	}
		vGlobalClusterList = append(vGlobalClusterList, ret)
	}

	log.Debugf("[getGlobalInventoryClustersResolver]Output Clusters objects %v", vGlobalClusterList)

	return vGlobalClusterList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ExternalDNS Node: Inventory PKG: Global
//////////////////////////////////////
func getGlobalInventoryExternalDNSResolver(obj *model.GlobalInventory, id *string) ([]*model.GlobalExternalDNSInventory, error) {
	log.Debugf("[getGlobalInventoryExternalDNSResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSInventoryList []*model.GlobalExternalDNSInventory
	if id != nil && *id != "" {
		log.Debugf("[getGlobalInventoryExternalDNSResolver]Id %q", *id)
		vExternalDNSInventory, err := nc.GlobalRoot().Inventory().GetExternalDNS(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalInventoryExternalDNSResolver]Error getting ExternalDNS node %q : %s", *id, err)
            return vGlobalExternalDNSInventoryList, nil
        }
		dn := vExternalDNSInventory.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventories.global.tsm.tanzu.vmware.com":dn}
EnabledForProjects, _ := json.Marshal(vExternalDNSInventory.Spec.EnabledForProjects)
EnabledForProjectsData := string(EnabledForProjects)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	EnabledForProjects: &EnabledForProjectsData,
	}
		vGlobalExternalDNSInventoryList = append(vGlobalExternalDNSInventoryList, ret)

		log.Debugf("[getGlobalInventoryExternalDNSResolver]Output ExternalDNS objects %v", vGlobalExternalDNSInventoryList)

		return vGlobalExternalDNSInventoryList, nil
	}

	log.Debug("[getGlobalInventoryExternalDNSResolver]Id is empty, process all ExternalDNSs")

	vExternalDNSInventoryParent, err := nc.GlobalRoot().GetInventory(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalInventoryExternalDNSResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSInventoryList, nil
    }
	vExternalDNSInventoryAllObj, err := vExternalDNSInventoryParent.GetAllExternalDNS(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalInventoryExternalDNSResolver]Error getting ExternalDNS objects %s", err)
        return vGlobalExternalDNSInventoryList, nil
    }
	for _, i := range vExternalDNSInventoryAllObj {
		vExternalDNSInventory, err := nc.GlobalRoot().Inventory().GetExternalDNS(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalInventoryExternalDNSResolver]Error getting ExternalDNS node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vExternalDNSInventory.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventories.global.tsm.tanzu.vmware.com":dn}
EnabledForProjects, _ := json.Marshal(vExternalDNSInventory.Spec.EnabledForProjects)
EnabledForProjectsData := string(EnabledForProjects)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	EnabledForProjects: &EnabledForProjectsData,
	}
		vGlobalExternalDNSInventoryList = append(vGlobalExternalDNSInventoryList, ret)
	}

	log.Debugf("[getGlobalInventoryExternalDNSResolver]Output ExternalDNS objects %v", vGlobalExternalDNSInventoryList)

	return vGlobalExternalDNSInventoryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: JobConfig Node: JobConfigFolder PKG: Global
//////////////////////////////////////
func getGlobalJobConfigFolderJobConfigResolver(obj *model.GlobalJobConfigFolder, id *string) ([]*model.GlobalJobConfig, error) {
	log.Debugf("[getGlobalJobConfigFolderJobConfigResolver]Parent Object %+v", obj)
	var vGlobalJobConfigList []*model.GlobalJobConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalJobConfigFolderJobConfigResolver]Id %q", *id)
		vJobConfig, err := nc.GlobalRoot().Runtime().JobConfigFolder().GetJobConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalJobConfigFolderJobConfigResolver]Error getting JobConfig node %q : %s", *id, err)
            return vGlobalJobConfigList, nil
        }
		dn := vJobConfig.DisplayName()
parentLabels := map[string]interface{}{"jobconfigs.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vJobConfig.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalJobConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalJobConfigList = append(vGlobalJobConfigList, ret)

		log.Debugf("[getGlobalJobConfigFolderJobConfigResolver]Output JobConfig objects %v", vGlobalJobConfigList)

		return vGlobalJobConfigList, nil
	}

	log.Debug("[getGlobalJobConfigFolderJobConfigResolver]Id is empty, process all JobConfigs")

	vJobConfigParent, err := nc.GlobalRoot().Runtime().GetJobConfigFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalJobConfigFolderJobConfigResolver]Error getting parent node %s", err)
        return vGlobalJobConfigList, nil
    }
	vJobConfigAllObj, err := vJobConfigParent.GetAllJobConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalJobConfigFolderJobConfigResolver]Error getting JobConfig objects %s", err)
        return vGlobalJobConfigList, nil
    }
	for _, i := range vJobConfigAllObj {
		vJobConfig, err := nc.GlobalRoot().Runtime().JobConfigFolder().GetJobConfig(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalJobConfigFolderJobConfigResolver]Error getting JobConfig node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vJobConfig.DisplayName()
parentLabels := map[string]interface{}{"jobconfigs.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vJobConfig.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalJobConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalJobConfigList = append(vGlobalJobConfigList, ret)
	}

	log.Debugf("[getGlobalJobConfigFolderJobConfigResolver]Output JobConfig objects %v", vGlobalJobConfigList)

	return vGlobalJobConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Jobs Node: JobFolder PKG: Global
//////////////////////////////////////
func getGlobalJobFolderJobsResolver(obj *model.GlobalJobFolder, id *string) ([]*model.GlobalJob, error) {
	log.Debugf("[getGlobalJobFolderJobsResolver]Parent Object %+v", obj)
	var vGlobalJobList []*model.GlobalJob
	if id != nil && *id != "" {
		log.Debugf("[getGlobalJobFolderJobsResolver]Id %q", *id)
		vJob, err := nc.GlobalRoot().Inventory().JobFolder(getParentName(obj.ParentLabels, "jobfolders.global.tsm.tanzu.vmware.com")).GetJobs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalJobFolderJobsResolver]Error getting Jobs node %q : %s", *id, err)
            return vGlobalJobList, nil
        }
		dn := vJob.DisplayName()
parentLabels := map[string]interface{}{"jobs.global.tsm.tanzu.vmware.com":dn}
vStatus := string(vJob.Spec.Status)
vProjectId := string(vJob.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Status: &vStatus,
	ProjectId: &vProjectId,
	}
		vGlobalJobList = append(vGlobalJobList, ret)

		log.Debugf("[getGlobalJobFolderJobsResolver]Output Jobs objects %v", vGlobalJobList)

		return vGlobalJobList, nil
	}

	log.Debug("[getGlobalJobFolderJobsResolver]Id is empty, process all Jobss")

	vJobParent, err := nc.GlobalRoot().Inventory().GetJobFolder(context.TODO(), getParentName(obj.ParentLabels, "jobfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalJobFolderJobsResolver]Error getting parent node %s", err)
        return vGlobalJobList, nil
    }
	vJobAllObj, err := vJobParent.GetAllJobs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalJobFolderJobsResolver]Error getting Jobs objects %s", err)
        return vGlobalJobList, nil
    }
	for _, i := range vJobAllObj {
		vJob, err := nc.GlobalRoot().Inventory().JobFolder(getParentName(obj.ParentLabels, "jobfolders.global.tsm.tanzu.vmware.com")).GetJobs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalJobFolderJobsResolver]Error getting Jobs node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vJob.DisplayName()
parentLabels := map[string]interface{}{"jobs.global.tsm.tanzu.vmware.com":dn}
vStatus := string(vJob.Spec.Status)
vProjectId := string(vJob.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Status: &vStatus,
	ProjectId: &vProjectId,
	}
		vGlobalJobList = append(vGlobalJobList, ret)
	}

	log.Debugf("[getGlobalJobFolderJobsResolver]Output Jobs objects %v", vGlobalJobList)

	return vGlobalJobList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Resources Node: LocalRegistrationServiceCluster PKG: Global
//////////////////////////////////////
func getGlobalLocalRegistrationServiceClusterResourcesResolver(obj *model.GlobalLocalRegistrationServiceCluster, id *string) ([]*model.GlobalLocalRegistrationServiceResource, error) {
	log.Debugf("[getGlobalLocalRegistrationServiceClusterResourcesResolver]Parent Object %+v", obj)
	var vGlobalLocalRegistrationServiceResourceList []*model.GlobalLocalRegistrationServiceResource
	if id != nil && *id != "" {
		log.Debugf("[getGlobalLocalRegistrationServiceClusterResourcesResolver]Id %q", *id)
		vLocalRegistrationServiceResource, err := nc.GlobalRoot().Runtime().AllsparkServices().LocalRegistrationService(getParentName(obj.ParentLabels, "localregistrationservices.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "localregistrationserviceclusters.global.tsm.tanzu.vmware.com")).GetResources(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalLocalRegistrationServiceClusterResourcesResolver]Error getting Resources node %q : %s", *id, err)
            return vGlobalLocalRegistrationServiceResourceList, nil
        }
		dn := vLocalRegistrationServiceResource.DisplayName()
parentLabels := map[string]interface{}{"localregistrationserviceresources.global.tsm.tanzu.vmware.com":dn}
vType := string(vLocalRegistrationServiceResource.Spec.Type)
vLocation := string(vLocalRegistrationServiceResource.Spec.Location)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalLocalRegistrationServiceResource {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Location: &vLocation,
	}
		vGlobalLocalRegistrationServiceResourceList = append(vGlobalLocalRegistrationServiceResourceList, ret)

		log.Debugf("[getGlobalLocalRegistrationServiceClusterResourcesResolver]Output Resources objects %v", vGlobalLocalRegistrationServiceResourceList)

		return vGlobalLocalRegistrationServiceResourceList, nil
	}

	log.Debug("[getGlobalLocalRegistrationServiceClusterResourcesResolver]Id is empty, process all Resourcess")

	vLocalRegistrationServiceResourceParent, err := nc.GlobalRoot().Runtime().AllsparkServices().LocalRegistrationService(getParentName(obj.ParentLabels, "localregistrationservices.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), getParentName(obj.ParentLabels, "localregistrationserviceclusters.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalLocalRegistrationServiceClusterResourcesResolver]Error getting parent node %s", err)
        return vGlobalLocalRegistrationServiceResourceList, nil
    }
	vLocalRegistrationServiceResourceAllObj, err := vLocalRegistrationServiceResourceParent.GetAllResources(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalLocalRegistrationServiceClusterResourcesResolver]Error getting Resources objects %s", err)
        return vGlobalLocalRegistrationServiceResourceList, nil
    }
	for _, i := range vLocalRegistrationServiceResourceAllObj {
		vLocalRegistrationServiceResource, err := nc.GlobalRoot().Runtime().AllsparkServices().LocalRegistrationService(getParentName(obj.ParentLabels, "localregistrationservices.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "localregistrationserviceclusters.global.tsm.tanzu.vmware.com")).GetResources(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalLocalRegistrationServiceClusterResourcesResolver]Error getting Resources node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vLocalRegistrationServiceResource.DisplayName()
parentLabels := map[string]interface{}{"localregistrationserviceresources.global.tsm.tanzu.vmware.com":dn}
vType := string(vLocalRegistrationServiceResource.Spec.Type)
vLocation := string(vLocalRegistrationServiceResource.Spec.Location)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalLocalRegistrationServiceResource {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Location: &vLocation,
	}
		vGlobalLocalRegistrationServiceResourceList = append(vGlobalLocalRegistrationServiceResourceList, ret)
	}

	log.Debugf("[getGlobalLocalRegistrationServiceClusterResourcesResolver]Output Resources objects %v", vGlobalLocalRegistrationServiceResourceList)

	return vGlobalLocalRegistrationServiceResourceList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Template Node: LocalRegistrationService PKG: Global
//////////////////////////////////////
func getGlobalLocalRegistrationServiceTemplateResolver(obj *model.GlobalLocalRegistrationService) (*model.GlobalServiceTemplate, error) {
    log.Debugf("[getGlobalLocalRegistrationServiceTemplateResolver]Parent Object %+v", obj)
	vServiceTemplateParent, err := nc.GlobalRoot().Runtime().AllsparkServices().GetLocalRegistrationService(context.TODO(), getParentName(obj.ParentLabels, "localregistrationservices.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalLocalRegistrationServiceTemplateResolver]Error getting parent node %s", err)
        return &model.GlobalServiceTemplate{}, nil
    }
	vServiceTemplate, err := vServiceTemplateParent.GetTemplate(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalLocalRegistrationServiceTemplateResolver]Error getting Template object %s", err)
        return &model.GlobalServiceTemplate{}, nil
    }
	dn := vServiceTemplate.DisplayName()
parentLabels := map[string]interface{}{"servicetemplates.global.tsm.tanzu.vmware.com":dn}
vVersion := string(vServiceTemplate.Spec.Version)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalServiceTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	Version: &vVersion,
	}
	log.Debugf("[getGlobalLocalRegistrationServiceTemplateResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Clusters Node: LocalRegistrationService PKG: Global
//////////////////////////////////////
func getGlobalLocalRegistrationServiceClustersResolver(obj *model.GlobalLocalRegistrationService, id *string) ([]*model.GlobalLocalRegistrationServiceCluster, error) {
	log.Debugf("[getGlobalLocalRegistrationServiceClustersResolver]Parent Object %+v", obj)
	var vGlobalLocalRegistrationServiceClusterList []*model.GlobalLocalRegistrationServiceCluster
	if id != nil && *id != "" {
		log.Debugf("[getGlobalLocalRegistrationServiceClustersResolver]Id %q", *id)
		vLocalRegistrationServiceCluster, err := nc.GlobalRoot().Runtime().AllsparkServices().LocalRegistrationService(getParentName(obj.ParentLabels, "localregistrationservices.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalLocalRegistrationServiceClustersResolver]Error getting Clusters node %q : %s", *id, err)
            return vGlobalLocalRegistrationServiceClusterList, nil
        }
		dn := vLocalRegistrationServiceCluster.DisplayName()
parentLabels := map[string]interface{}{"localregistrationserviceclusters.global.tsm.tanzu.vmware.com":dn}
vTenant := string(vLocalRegistrationServiceCluster.Spec.Tenant)
vType := string(vLocalRegistrationServiceCluster.Spec.Type)
vVersion := string(vLocalRegistrationServiceCluster.Spec.Version)
vErrorCount := int(vLocalRegistrationServiceCluster.Spec.ErrorCount)
vRestartCount := int(vLocalRegistrationServiceCluster.Spec.RestartCount)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalLocalRegistrationServiceCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Tenant: &vTenant,
	Type: &vType,
	Version: &vVersion,
	ErrorCount: &vErrorCount,
	RestartCount: &vRestartCount,
	}
		vGlobalLocalRegistrationServiceClusterList = append(vGlobalLocalRegistrationServiceClusterList, ret)

		log.Debugf("[getGlobalLocalRegistrationServiceClustersResolver]Output Clusters objects %v", vGlobalLocalRegistrationServiceClusterList)

		return vGlobalLocalRegistrationServiceClusterList, nil
	}

	log.Debug("[getGlobalLocalRegistrationServiceClustersResolver]Id is empty, process all Clusterss")

	vLocalRegistrationServiceClusterParent, err := nc.GlobalRoot().Runtime().AllsparkServices().GetLocalRegistrationService(context.TODO(), getParentName(obj.ParentLabels, "localregistrationservices.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalLocalRegistrationServiceClustersResolver]Error getting parent node %s", err)
        return vGlobalLocalRegistrationServiceClusterList, nil
    }
	vLocalRegistrationServiceClusterAllObj, err := vLocalRegistrationServiceClusterParent.GetAllClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalLocalRegistrationServiceClustersResolver]Error getting Clusters objects %s", err)
        return vGlobalLocalRegistrationServiceClusterList, nil
    }
	for _, i := range vLocalRegistrationServiceClusterAllObj {
		vLocalRegistrationServiceCluster, err := nc.GlobalRoot().Runtime().AllsparkServices().LocalRegistrationService(getParentName(obj.ParentLabels, "localregistrationservices.global.tsm.tanzu.vmware.com")).GetClusters(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalLocalRegistrationServiceClustersResolver]Error getting Clusters node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vLocalRegistrationServiceCluster.DisplayName()
parentLabels := map[string]interface{}{"localregistrationserviceclusters.global.tsm.tanzu.vmware.com":dn}
vTenant := string(vLocalRegistrationServiceCluster.Spec.Tenant)
vType := string(vLocalRegistrationServiceCluster.Spec.Type)
vVersion := string(vLocalRegistrationServiceCluster.Spec.Version)
vErrorCount := int(vLocalRegistrationServiceCluster.Spec.ErrorCount)
vRestartCount := int(vLocalRegistrationServiceCluster.Spec.RestartCount)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalLocalRegistrationServiceCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Tenant: &vTenant,
	Type: &vType,
	Version: &vVersion,
	ErrorCount: &vErrorCount,
	RestartCount: &vRestartCount,
	}
		vGlobalLocalRegistrationServiceClusterList = append(vGlobalLocalRegistrationServiceClusterList, ret)
	}

	log.Debugf("[getGlobalLocalRegistrationServiceClustersResolver]Output Clusters objects %v", vGlobalLocalRegistrationServiceClusterList)

	return vGlobalLocalRegistrationServiceClusterList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Log Node: LogFolder PKG: Global
//////////////////////////////////////
func getGlobalLogFolderLogResolver(obj *model.GlobalLogFolder, id *string) ([]*model.GlobalLog, error) {
	log.Debugf("[getGlobalLogFolderLogResolver]Parent Object %+v", obj)
	var vGlobalLogList []*model.GlobalLog
	if id != nil && *id != "" {
		log.Debugf("[getGlobalLogFolderLogResolver]Id %q", *id)
		vLog, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).LogFolder(getParentName(obj.ParentLabels, "logfolders.global.tsm.tanzu.vmware.com")).GetLog(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalLogFolderLogResolver]Error getting Log node %q : %s", *id, err)
            return vGlobalLogList, nil
        }
		dn := vLog.DisplayName()
parentLabels := map[string]interface{}{"logs.global.tsm.tanzu.vmware.com":dn}
vRequest := string(vLog.Spec.Request)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalLog {
	Id: &dn,
	ParentLabels: parentLabels,
	Request: &vRequest,
	}
		vGlobalLogList = append(vGlobalLogList, ret)

		log.Debugf("[getGlobalLogFolderLogResolver]Output Log objects %v", vGlobalLogList)

		return vGlobalLogList, nil
	}

	log.Debug("[getGlobalLogFolderLogResolver]Id is empty, process all Logs")

	vLogParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetLogFolder(context.TODO(), getParentName(obj.ParentLabels, "logfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalLogFolderLogResolver]Error getting parent node %s", err)
        return vGlobalLogList, nil
    }
	vLogAllObj, err := vLogParent.GetAllLog(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalLogFolderLogResolver]Error getting Log objects %s", err)
        return vGlobalLogList, nil
    }
	for _, i := range vLogAllObj {
		vLog, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).LogFolder(getParentName(obj.ParentLabels, "logfolders.global.tsm.tanzu.vmware.com")).GetLog(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalLogFolderLogResolver]Error getting Log node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vLog.DisplayName()
parentLabels := map[string]interface{}{"logs.global.tsm.tanzu.vmware.com":dn}
vRequest := string(vLog.Spec.Request)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalLog {
	Id: &dn,
	ParentLabels: parentLabels,
	Request: &vRequest,
	}
		vGlobalLogList = append(vGlobalLogList, ret)
	}

	log.Debugf("[getGlobalLogFolderLogResolver]Output Log objects %v", vGlobalLogList)

	return vGlobalLogList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Clusters Node: NodeFolder PKG: Global
//////////////////////////////////////
func getGlobalNodeFolderClustersResolver(obj *model.GlobalNodeFolder, id *string) ([]*model.GlobalNodeFolderCluster, error) {
	log.Debugf("[getGlobalNodeFolderClustersResolver]Parent Object %+v", obj)
	var vGlobalNodeFolderClusterList []*model.GlobalNodeFolderCluster
	if id != nil && *id != "" {
		log.Debugf("[getGlobalNodeFolderClustersResolver]Id %q", *id)
		vNodeFolderCluster, err := nc.GlobalRoot().Runtime().NodeFolder().GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalNodeFolderClustersResolver]Error getting Clusters node %q : %s", *id, err)
            return vGlobalNodeFolderClusterList, nil
        }
		dn := vNodeFolderCluster.DisplayName()
parentLabels := map[string]interface{}{"nodefolderclusters.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNodeFolderCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalNodeFolderClusterList = append(vGlobalNodeFolderClusterList, ret)

		log.Debugf("[getGlobalNodeFolderClustersResolver]Output Clusters objects %v", vGlobalNodeFolderClusterList)

		return vGlobalNodeFolderClusterList, nil
	}

	log.Debug("[getGlobalNodeFolderClustersResolver]Id is empty, process all Clusterss")

	vNodeFolderClusterParent, err := nc.GlobalRoot().Runtime().GetNodeFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalNodeFolderClustersResolver]Error getting parent node %s", err)
        return vGlobalNodeFolderClusterList, nil
    }
	vNodeFolderClusterAllObj, err := vNodeFolderClusterParent.GetAllClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalNodeFolderClustersResolver]Error getting Clusters objects %s", err)
        return vGlobalNodeFolderClusterList, nil
    }
	for _, i := range vNodeFolderClusterAllObj {
		vNodeFolderCluster, err := nc.GlobalRoot().Runtime().NodeFolder().GetClusters(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalNodeFolderClustersResolver]Error getting Clusters node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vNodeFolderCluster.DisplayName()
parentLabels := map[string]interface{}{"nodefolderclusters.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNodeFolderCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalNodeFolderClusterList = append(vGlobalNodeFolderClusterList, ret)
	}

	log.Debugf("[getGlobalNodeFolderClustersResolver]Output Clusters objects %v", vGlobalNodeFolderClusterList)

	return vGlobalNodeFolderClusterList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: DefinitionVersions Node: NodeTemplate PKG: Global
//////////////////////////////////////
func getGlobalNodeTemplateDefinitionVersionsResolver(obj *model.GlobalNodeTemplate, id *string) ([]*model.GlobalNodeDefinition, error) {
	log.Debugf("[getGlobalNodeTemplateDefinitionVersionsResolver]Parent Object %+v", obj)
	var vGlobalNodeDefinitionList []*model.GlobalNodeDefinition
	if id != nil && *id != "" {
		log.Debugf("[getGlobalNodeTemplateDefinitionVersionsResolver]Id %q", *id)
		vNodeDefinition, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).NodeTemplates(getParentName(obj.ParentLabels, "nodetemplates.global.tsm.tanzu.vmware.com")).GetDefinitionVersions(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalNodeTemplateDefinitionVersionsResolver]Error getting DefinitionVersions node %q : %s", *id, err)
            return vGlobalNodeDefinitionList, nil
        }
		dn := vNodeDefinition.DisplayName()
parentLabels := map[string]interface{}{"nodedefinitions.global.tsm.tanzu.vmware.com":dn}
vType := string(vNodeDefinition.Spec.Type)
vVersion := string(vNodeDefinition.Spec.Version)
vProvider := string(vNodeDefinition.Spec.Provider)
vImageInfo := string(vNodeDefinition.Spec.ImageInfo)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNodeDefinition {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Version: &vVersion,
	Provider: &vProvider,
	ImageInfo: &vImageInfo,
	}
		vGlobalNodeDefinitionList = append(vGlobalNodeDefinitionList, ret)

		log.Debugf("[getGlobalNodeTemplateDefinitionVersionsResolver]Output DefinitionVersions objects %v", vGlobalNodeDefinitionList)

		return vGlobalNodeDefinitionList, nil
	}

	log.Debug("[getGlobalNodeTemplateDefinitionVersionsResolver]Id is empty, process all DefinitionVersionss")

	vNodeDefinitionParent, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetNodeTemplates(context.TODO(), getParentName(obj.ParentLabels, "nodetemplates.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalNodeTemplateDefinitionVersionsResolver]Error getting parent node %s", err)
        return vGlobalNodeDefinitionList, nil
    }
	vNodeDefinitionAllObj, err := vNodeDefinitionParent.GetAllDefinitionVersions(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalNodeTemplateDefinitionVersionsResolver]Error getting DefinitionVersions objects %s", err)
        return vGlobalNodeDefinitionList, nil
    }
	for _, i := range vNodeDefinitionAllObj {
		vNodeDefinition, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).NodeTemplates(getParentName(obj.ParentLabels, "nodetemplates.global.tsm.tanzu.vmware.com")).GetDefinitionVersions(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalNodeTemplateDefinitionVersionsResolver]Error getting DefinitionVersions node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vNodeDefinition.DisplayName()
parentLabels := map[string]interface{}{"nodedefinitions.global.tsm.tanzu.vmware.com":dn}
vType := string(vNodeDefinition.Spec.Type)
vVersion := string(vNodeDefinition.Spec.Version)
vProvider := string(vNodeDefinition.Spec.Provider)
vImageInfo := string(vNodeDefinition.Spec.ImageInfo)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNodeDefinition {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Version: &vVersion,
	Provider: &vProvider,
	ImageInfo: &vImageInfo,
	}
		vGlobalNodeDefinitionList = append(vGlobalNodeDefinitionList, ret)
	}

	log.Debugf("[getGlobalNodeTemplateDefinitionVersionsResolver]Output DefinitionVersions objects %v", vGlobalNodeDefinitionList)

	return vGlobalNodeDefinitionList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Status Node: Node PKG: Global
//////////////////////////////////////
func getGlobalNodeStatusResolver(obj *model.GlobalNode, id *string) (*model.GlobalNodeStatus, error) {
	log.Debugf("[getGlobalNodeStatusResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalNodeStatusResolver]Id %q", *id)
		vNodeStatus, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Nodes(getParentName(obj.ParentLabels, "nodes.global.tsm.tanzu.vmware.com")).GetStatus(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalNodeStatusResolver]Error getting Status node %q : %s", *id, err)
			return &model.GlobalNodeStatus{}, nil
		}
		dn := vNodeStatus.DisplayName()
parentLabels := map[string]interface{}{"nodestatuses.global.tsm.tanzu.vmware.com":dn}
vAddresses := string(vNodeStatus.Spec.Addresses)
vAllocatable := string(vNodeStatus.Spec.Allocatable)
vCapacity := string(vNodeStatus.Spec.Capacity)
vDaemonEndpoints := string(vNodeStatus.Spec.DaemonEndpoints)
vConditions := string(vNodeStatus.Spec.Conditions)
vImages := string(vNodeStatus.Spec.Images)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalNodeStatus {
	Id: &dn,
	ParentLabels: parentLabels,
	Addresses: &vAddresses,
	Allocatable: &vAllocatable,
	Capacity: &vCapacity,
	DaemonEndpoints: &vDaemonEndpoints,
	Conditions: &vConditions,
	Images: &vImages,
	}

		log.Debugf("[getGlobalNodeStatusResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalNodeStatusResolver]Id is empty, process all Statuss")
	vNodeStatusParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).GetNodes(context.TODO(), getParentName(obj.ParentLabels, "nodes.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalNodeStatusResolver]Failed to get parent node %s", err)
        return &model.GlobalNodeStatus{}, nil
    }
	vNodeStatus, err := vNodeStatusParent.GetStatus(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalNodeStatusResolver]Error getting Status node %s", err)
        return &model.GlobalNodeStatus{}, nil
    }
	dn := vNodeStatus.DisplayName()
parentLabels := map[string]interface{}{"nodestatuses.global.tsm.tanzu.vmware.com":dn}
vAddresses := string(vNodeStatus.Spec.Addresses)
vAllocatable := string(vNodeStatus.Spec.Allocatable)
vCapacity := string(vNodeStatus.Spec.Capacity)
vDaemonEndpoints := string(vNodeStatus.Spec.DaemonEndpoints)
vConditions := string(vNodeStatus.Spec.Conditions)
vImages := string(vNodeStatus.Spec.Images)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalNodeStatus {
	Id: &dn,
	ParentLabels: parentLabels,
	Addresses: &vAddresses,
	Allocatable: &vAllocatable,
	Capacity: &vCapacity,
	DaemonEndpoints: &vDaemonEndpoints,
	Conditions: &vConditions,
	Images: &vImages,
	}

	log.Debugf("[getGlobalNodeStatusResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PolicyConfigs Node: AccessControlPolicy PKG: Global
//////////////////////////////////////
func getGlobalAccessControlPolicyPolicyConfigsResolver(obj *model.GlobalAccessControlPolicy, id *string) ([]*model.GlobalACPConfig, error) {
	log.Debugf("[getGlobalAccessControlPolicyPolicyConfigsResolver]Parent Object %+v", obj)
	var vGlobalACPConfigList []*model.GlobalACPConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalAccessControlPolicyPolicyConfigsResolver]Id %q", *id)
		vACPConfig, err := nc.GlobalRoot().Config().Policy(getParentName(obj.ParentLabels, "accesscontrolpolicies.global.tsm.tanzu.vmware.com")).GetPolicyConfigs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalAccessControlPolicyPolicyConfigsResolver]Error getting PolicyConfigs node %q : %s", *id, err)
            return vGlobalACPConfigList, nil
        }
		dn := vACPConfig.DisplayName()
parentLabels := map[string]interface{}{"acpconfigs.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vACPConfig.Spec.DisplayName)
vGns := string(vACPConfig.Spec.Gns)
vDescription := string(vACPConfig.Spec.Description)
Tags, _ := json.Marshal(vACPConfig.Spec.Tags)
TagsData := string(Tags)
vProjectId := string(vACPConfig.Spec.ProjectId)
DestGroups, _ := json.Marshal(vACPConfig.Spec.DestGroups)
DestGroupsData := string(DestGroups)
SourceGroups, _ := json.Marshal(vACPConfig.Spec.SourceGroups)
SourceGroupsData := string(SourceGroups)
Conditions, _ := json.Marshal(vACPConfig.Spec.Conditions)
ConditionsData := string(Conditions)
Actions, _ := json.Marshal(vACPConfig.Spec.Actions)
ActionsData := string(Actions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalACPConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Gns: &vGns,
	Description: &vDescription,
	Tags: &TagsData,
	ProjectId: &vProjectId,
	DestGroups: &DestGroupsData,
	SourceGroups: &SourceGroupsData,
	Conditions: &ConditionsData,
	Actions: &ActionsData,
	}
		vGlobalACPConfigList = append(vGlobalACPConfigList, ret)

		log.Debugf("[getGlobalAccessControlPolicyPolicyConfigsResolver]Output PolicyConfigs objects %v", vGlobalACPConfigList)

		return vGlobalACPConfigList, nil
	}

	log.Debug("[getGlobalAccessControlPolicyPolicyConfigsResolver]Id is empty, process all PolicyConfigss")

	vACPConfigParent, err := nc.GlobalRoot().Config().GetPolicy(context.TODO(), getParentName(obj.ParentLabels, "accesscontrolpolicies.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalAccessControlPolicyPolicyConfigsResolver]Error getting parent node %s", err)
        return vGlobalACPConfigList, nil
    }
	vACPConfigAllObj, err := vACPConfigParent.GetAllPolicyConfigs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalAccessControlPolicyPolicyConfigsResolver]Error getting PolicyConfigs objects %s", err)
        return vGlobalACPConfigList, nil
    }
	for _, i := range vACPConfigAllObj {
		vACPConfig, err := nc.GlobalRoot().Config().Policy(getParentName(obj.ParentLabels, "accesscontrolpolicies.global.tsm.tanzu.vmware.com")).GetPolicyConfigs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalAccessControlPolicyPolicyConfigsResolver]Error getting PolicyConfigs node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vACPConfig.DisplayName()
parentLabels := map[string]interface{}{"acpconfigs.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vACPConfig.Spec.DisplayName)
vGns := string(vACPConfig.Spec.Gns)
vDescription := string(vACPConfig.Spec.Description)
Tags, _ := json.Marshal(vACPConfig.Spec.Tags)
TagsData := string(Tags)
vProjectId := string(vACPConfig.Spec.ProjectId)
DestGroups, _ := json.Marshal(vACPConfig.Spec.DestGroups)
DestGroupsData := string(DestGroups)
SourceGroups, _ := json.Marshal(vACPConfig.Spec.SourceGroups)
SourceGroupsData := string(SourceGroups)
Conditions, _ := json.Marshal(vACPConfig.Spec.Conditions)
ConditionsData := string(Conditions)
Actions, _ := json.Marshal(vACPConfig.Spec.Actions)
ActionsData := string(Actions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalACPConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Gns: &vGns,
	Description: &vDescription,
	Tags: &TagsData,
	ProjectId: &vProjectId,
	DestGroups: &DestGroupsData,
	SourceGroups: &SourceGroupsData,
	Conditions: &ConditionsData,
	Actions: &ActionsData,
	}
		vGlobalACPConfigList = append(vGlobalACPConfigList, ret)
	}

	log.Debugf("[getGlobalAccessControlPolicyPolicyConfigsResolver]Output PolicyConfigs objects %v", vGlobalACPConfigList)

	return vGlobalACPConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Upgrade Node: ProgressiveUpgrade PKG: Global
//////////////////////////////////////
func getGlobalProgressiveUpgradeUpgradeResolver(obj *model.GlobalProgressiveUpgrade, id *string) ([]*model.GlobalProgressiveUpgradeConfig, error) {
	log.Debugf("[getGlobalProgressiveUpgradeUpgradeResolver]Parent Object %+v", obj)
	var vGlobalProgressiveUpgradeConfigList []*model.GlobalProgressiveUpgradeConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProgressiveUpgradeUpgradeResolver]Id %q", *id)
		vProgressiveUpgradeConfig, err := nc.GlobalRoot().Config().ProgressiveUpgrade(getParentName(obj.ParentLabels, "progressiveupgrades.global.tsm.tanzu.vmware.com")).GetUpgrade(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProgressiveUpgradeUpgradeResolver]Error getting Upgrade node %q : %s", *id, err)
            return vGlobalProgressiveUpgradeConfigList, nil
        }
		dn := vProgressiveUpgradeConfig.DisplayName()
parentLabels := map[string]interface{}{"progressiveupgradeconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vProgressiveUpgradeConfig.Spec.Name)
vServices := string(vProgressiveUpgradeConfig.Spec.Services)
vUpgradeStrategy := string(vProgressiveUpgradeConfig.Spec.UpgradeStrategy)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalProgressiveUpgradeConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Services: &vServices,
	UpgradeStrategy: &vUpgradeStrategy,
	}
		vGlobalProgressiveUpgradeConfigList = append(vGlobalProgressiveUpgradeConfigList, ret)

		log.Debugf("[getGlobalProgressiveUpgradeUpgradeResolver]Output Upgrade objects %v", vGlobalProgressiveUpgradeConfigList)

		return vGlobalProgressiveUpgradeConfigList, nil
	}

	log.Debug("[getGlobalProgressiveUpgradeUpgradeResolver]Id is empty, process all Upgrades")

	vProgressiveUpgradeConfigParent, err := nc.GlobalRoot().Config().GetProgressiveUpgrade(context.TODO(), getParentName(obj.ParentLabels, "progressiveupgrades.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProgressiveUpgradeUpgradeResolver]Error getting parent node %s", err)
        return vGlobalProgressiveUpgradeConfigList, nil
    }
	vProgressiveUpgradeConfigAllObj, err := vProgressiveUpgradeConfigParent.GetAllUpgrade(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProgressiveUpgradeUpgradeResolver]Error getting Upgrade objects %s", err)
        return vGlobalProgressiveUpgradeConfigList, nil
    }
	for _, i := range vProgressiveUpgradeConfigAllObj {
		vProgressiveUpgradeConfig, err := nc.GlobalRoot().Config().ProgressiveUpgrade(getParentName(obj.ParentLabels, "progressiveupgrades.global.tsm.tanzu.vmware.com")).GetUpgrade(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProgressiveUpgradeUpgradeResolver]Error getting Upgrade node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vProgressiveUpgradeConfig.DisplayName()
parentLabels := map[string]interface{}{"progressiveupgradeconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vProgressiveUpgradeConfig.Spec.Name)
vServices := string(vProgressiveUpgradeConfig.Spec.Services)
vUpgradeStrategy := string(vProgressiveUpgradeConfig.Spec.UpgradeStrategy)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalProgressiveUpgradeConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Services: &vServices,
	UpgradeStrategy: &vUpgradeStrategy,
	}
		vGlobalProgressiveUpgradeConfigList = append(vGlobalProgressiveUpgradeConfigList, ret)
	}

	log.Debugf("[getGlobalProgressiveUpgradeUpgradeResolver]Output Upgrade objects %v", vGlobalProgressiveUpgradeConfigList)

	return vGlobalProgressiveUpgradeConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Upgrades Node: ProgressiveUpgradeFolder PKG: Global
//////////////////////////////////////
func getGlobalProgressiveUpgradeFolderUpgradesResolver(obj *model.GlobalProgressiveUpgradeFolder, id *string) ([]*model.GlobalProgressiveUpgradeRuntime, error) {
	log.Debugf("[getGlobalProgressiveUpgradeFolderUpgradesResolver]Parent Object %+v", obj)
	var vGlobalProgressiveUpgradeRuntimeList []*model.GlobalProgressiveUpgradeRuntime
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProgressiveUpgradeFolderUpgradesResolver]Id %q", *id)
		vProgressiveUpgradeRuntime, err := nc.GlobalRoot().Runtime().ProgressiveUpgrade().GetUpgrades(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProgressiveUpgradeFolderUpgradesResolver]Error getting Upgrades node %q : %s", *id, err)
            return vGlobalProgressiveUpgradeRuntimeList, nil
        }
		dn := vProgressiveUpgradeRuntime.DisplayName()
parentLabels := map[string]interface{}{"progressiveupgraderuntimes.global.tsm.tanzu.vmware.com":dn}
vUpgradeName := string(vProgressiveUpgradeRuntime.Spec.UpgradeName)
vStatus := string(vProgressiveUpgradeRuntime.Spec.Status)
vStep := string(vProgressiveUpgradeRuntime.Spec.Step)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalProgressiveUpgradeRuntime {
	Id: &dn,
	ParentLabels: parentLabels,
	UpgradeName: &vUpgradeName,
	Status: &vStatus,
	Step: &vStep,
	}
		vGlobalProgressiveUpgradeRuntimeList = append(vGlobalProgressiveUpgradeRuntimeList, ret)

		log.Debugf("[getGlobalProgressiveUpgradeFolderUpgradesResolver]Output Upgrades objects %v", vGlobalProgressiveUpgradeRuntimeList)

		return vGlobalProgressiveUpgradeRuntimeList, nil
	}

	log.Debug("[getGlobalProgressiveUpgradeFolderUpgradesResolver]Id is empty, process all Upgradess")

	vProgressiveUpgradeRuntimeParent, err := nc.GlobalRoot().Runtime().GetProgressiveUpgrade(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProgressiveUpgradeFolderUpgradesResolver]Error getting parent node %s", err)
        return vGlobalProgressiveUpgradeRuntimeList, nil
    }
	vProgressiveUpgradeRuntimeAllObj, err := vProgressiveUpgradeRuntimeParent.GetAllUpgrades(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProgressiveUpgradeFolderUpgradesResolver]Error getting Upgrades objects %s", err)
        return vGlobalProgressiveUpgradeRuntimeList, nil
    }
	for _, i := range vProgressiveUpgradeRuntimeAllObj {
		vProgressiveUpgradeRuntime, err := nc.GlobalRoot().Runtime().ProgressiveUpgrade().GetUpgrades(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProgressiveUpgradeFolderUpgradesResolver]Error getting Upgrades node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vProgressiveUpgradeRuntime.DisplayName()
parentLabels := map[string]interface{}{"progressiveupgraderuntimes.global.tsm.tanzu.vmware.com":dn}
vUpgradeName := string(vProgressiveUpgradeRuntime.Spec.UpgradeName)
vStatus := string(vProgressiveUpgradeRuntime.Spec.Status)
vStep := string(vProgressiveUpgradeRuntime.Spec.Step)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalProgressiveUpgradeRuntime {
	Id: &dn,
	ParentLabels: parentLabels,
	UpgradeName: &vUpgradeName,
	Status: &vStatus,
	Step: &vStep,
	}
		vGlobalProgressiveUpgradeRuntimeList = append(vGlobalProgressiveUpgradeRuntimeList, ret)
	}

	log.Debugf("[getGlobalProgressiveUpgradeFolderUpgradesResolver]Output Upgrades objects %v", vGlobalProgressiveUpgradeRuntimeList)

	return vGlobalProgressiveUpgradeRuntimeList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: CertificateAuthorities Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigCertificateAuthoritiesResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalCertificateAuthorityConfigN, error) {
	log.Debugf("[getGlobalProjectConfigCertificateAuthoritiesResolver]Parent Object %+v", obj)
	var vGlobalCertificateAuthorityConfigNList []*model.GlobalCertificateAuthorityConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigCertificateAuthoritiesResolver]Id %q", *id)
		vCertificateAuthorityConfigN, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).Config(getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com")).GetCertificateAuthorities(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigCertificateAuthoritiesResolver]Error getting CertificateAuthorities node %q : %s", *id, err)
            return vGlobalCertificateAuthorityConfigNList, nil
        }
		dn := vCertificateAuthorityConfigN.DisplayName()
parentLabels := map[string]interface{}{"certificateauthorityconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vCertificateAuthorityConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateAuthorityConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalCertificateAuthorityConfigNList = append(vGlobalCertificateAuthorityConfigNList, ret)

		log.Debugf("[getGlobalProjectConfigCertificateAuthoritiesResolver]Output CertificateAuthorities objects %v", vGlobalCertificateAuthorityConfigNList)

		return vGlobalCertificateAuthorityConfigNList, nil
	}

	log.Debug("[getGlobalProjectConfigCertificateAuthoritiesResolver]Id is empty, process all CertificateAuthoritiess")

	vCertificateAuthorityConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigCertificateAuthoritiesResolver]Error getting parent node %s", err)
        return vGlobalCertificateAuthorityConfigNList, nil
    }
	vCertificateAuthorityConfigNAllObj, err := vCertificateAuthorityConfigNParent.GetAllCertificateAuthorities(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigCertificateAuthoritiesResolver]Error getting CertificateAuthorities objects %s", err)
        return vGlobalCertificateAuthorityConfigNList, nil
    }
	for _, i := range vCertificateAuthorityConfigNAllObj {
		vCertificateAuthorityConfigN, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).Config(getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com")).GetCertificateAuthorities(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigCertificateAuthoritiesResolver]Error getting CertificateAuthorities node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vCertificateAuthorityConfigN.DisplayName()
parentLabels := map[string]interface{}{"certificateauthorityconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vCertificateAuthorityConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateAuthorityConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalCertificateAuthorityConfigNList = append(vGlobalCertificateAuthorityConfigNList, ret)
	}

	log.Debugf("[getGlobalProjectConfigCertificateAuthoritiesResolver]Output CertificateAuthorities objects %v", vGlobalCertificateAuthorityConfigNList)

	return vGlobalCertificateAuthorityConfigNList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: SvcGroups Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigSvcGroupsResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalSvcGroup, error) {
	log.Debugf("[getGlobalProjectConfigSvcGroupsResolver]Parent Object %+v", obj)
	var vGlobalSvcGroupList []*model.GlobalSvcGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigSvcGroupsResolver]Id %q", *id)
		vSvcGroupParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigSvcGroupsResolver]Error getting SvcGroups %q : %s", *id, err)
			return vGlobalSvcGroupList, nil
		}
		vSvcGroup, err := vSvcGroupParent.GetSvcGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigSvcGroupsResolver]Error getting SvcGroups %q : %s", *id, err)
			return vGlobalSvcGroupList, nil
		}
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)

		log.Debugf("[getGlobalProjectConfigSvcGroupsResolver]Output SvcGroups objects %v", vGlobalSvcGroupList)

		return vGlobalSvcGroupList, nil
	}

	log.Debug("[getGlobalProjectConfigSvcGroupsResolver]Id is empty, process all SvcGroupss")

	vSvcGroupParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigSvcGroupsResolver]Error getting parent node %s", err)
        return vGlobalSvcGroupList, nil
    }
	vSvcGroupAllObj, err := vSvcGroupParent.GetAllSvcGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigSvcGroupsResolver]Error getting SvcGroups %s", err)
        return vGlobalSvcGroupList, nil
    }
	for _, i := range vSvcGroupAllObj {
		vSvcGroupParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigSvcGroupsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vSvcGroup, err := vSvcGroupParent.GetSvcGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigSvcGroupsResolver]Error getting SvcGroups node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)
	}
	log.Debugf("[getGlobalProjectConfigSvcGroupsResolver]List of SvcGroups object %v", vGlobalSvcGroupList)
	return vGlobalSvcGroupList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Gns Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigGnsResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalGNS, error) {
	log.Debugf("[getGlobalProjectConfigGnsResolver]Parent Object %+v", obj)
	var vGlobalGNSList []*model.GlobalGNS
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigGnsResolver]Id %q", *id)
		vGNSParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigGnsResolver]Error getting Gns %q : %s", *id, err)
			return vGlobalGNSList, nil
		}
		vGNS, err := vGNSParent.GetGns(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigGnsResolver]Error getting Gns %q : %s", *id, err)
			return vGlobalGNSList, nil
		}
		dn := vGNS.DisplayName()
parentLabels := map[string]interface{}{"gnss.global.tsm.tanzu.vmware.com":dn}
vDomain := string(vGNS.Spec.Domain)
vUseSharedGateway := bool(vGNS.Spec.UseSharedGateway)
vMTLSEnforced := bool(vGNS.Spec.MTLSEnforced)
vMTLSPermissive := bool(vGNS.Spec.MTLSPermissive)
vApiDiscoveryEnabled := bool(vGNS.Spec.ApiDiscoveryEnabled)
vMTLSExceptions := string(vGNS.Spec.MTLSExceptions)
vCaType := string(vGNS.Spec.CaType)
vCa := string(vGNS.Spec.Ca)
vDescription := string(vGNS.Spec.Description)
vColor := string(vGNS.Spec.Color)
vVersion := string(vGNS.Spec.Version)
vProjectId := string(vGNS.Spec.ProjectId)
vMemberDomains := string(vGNS.Spec.MemberDomains)
vMatchingConditions := string(vGNS.Spec.MatchingConditions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGNS {
	Id: &dn,
	ParentLabels: parentLabels,
	Domain: &vDomain,
	UseSharedGateway: &vUseSharedGateway,
	MTLSEnforced: &vMTLSEnforced,
	MTLSPermissive: &vMTLSPermissive,
	ApiDiscoveryEnabled: &vApiDiscoveryEnabled,
	MTLSExceptions: &vMTLSExceptions,
	CaType: &vCaType,
	Ca: &vCa,
	Description: &vDescription,
	Color: &vColor,
	Version: &vVersion,
	ProjectId: &vProjectId,
	MemberDomains: &vMemberDomains,
	MatchingConditions: &vMatchingConditions,
	}
		vGlobalGNSList = append(vGlobalGNSList, ret)

		log.Debugf("[getGlobalProjectConfigGnsResolver]Output Gns objects %v", vGlobalGNSList)

		return vGlobalGNSList, nil
	}

	log.Debug("[getGlobalProjectConfigGnsResolver]Id is empty, process all Gnss")

	vGNSParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigGnsResolver]Error getting parent node %s", err)
        return vGlobalGNSList, nil
    }
	vGNSAllObj, err := vGNSParent.GetAllGns(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigGnsResolver]Error getting Gns %s", err)
        return vGlobalGNSList, nil
    }
	for _, i := range vGNSAllObj {
		vGNSParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigGnsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vGNS, err := vGNSParent.GetGns(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigGnsResolver]Error getting Gns node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vGNS.DisplayName()
parentLabels := map[string]interface{}{"gnss.global.tsm.tanzu.vmware.com":dn}
vDomain := string(vGNS.Spec.Domain)
vUseSharedGateway := bool(vGNS.Spec.UseSharedGateway)
vMTLSEnforced := bool(vGNS.Spec.MTLSEnforced)
vMTLSPermissive := bool(vGNS.Spec.MTLSPermissive)
vApiDiscoveryEnabled := bool(vGNS.Spec.ApiDiscoveryEnabled)
vMTLSExceptions := string(vGNS.Spec.MTLSExceptions)
vCaType := string(vGNS.Spec.CaType)
vCa := string(vGNS.Spec.Ca)
vDescription := string(vGNS.Spec.Description)
vColor := string(vGNS.Spec.Color)
vVersion := string(vGNS.Spec.Version)
vProjectId := string(vGNS.Spec.ProjectId)
vMemberDomains := string(vGNS.Spec.MemberDomains)
vMatchingConditions := string(vGNS.Spec.MatchingConditions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGNS {
	Id: &dn,
	ParentLabels: parentLabels,
	Domain: &vDomain,
	UseSharedGateway: &vUseSharedGateway,
	MTLSEnforced: &vMTLSEnforced,
	MTLSPermissive: &vMTLSPermissive,
	ApiDiscoveryEnabled: &vApiDiscoveryEnabled,
	MTLSExceptions: &vMTLSExceptions,
	CaType: &vCaType,
	Ca: &vCa,
	Description: &vDescription,
	Color: &vColor,
	Version: &vVersion,
	ProjectId: &vProjectId,
	MemberDomains: &vMemberDomains,
	MatchingConditions: &vMatchingConditions,
	}
		vGlobalGNSList = append(vGlobalGNSList, ret)
	}
	log.Debugf("[getGlobalProjectConfigGnsResolver]List of Gns object %v", vGlobalGNSList)
	return vGlobalGNSList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: PolicyConfigs Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigPolicyConfigsResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalACPConfig, error) {
	log.Debugf("[getGlobalProjectConfigPolicyConfigsResolver]Parent Object %+v", obj)
	var vGlobalACPConfigList []*model.GlobalACPConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigPolicyConfigsResolver]Id %q", *id)
		vACPConfigParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigPolicyConfigsResolver]Error getting PolicyConfigs %q : %s", *id, err)
			return vGlobalACPConfigList, nil
		}
		vACPConfig, err := vACPConfigParent.GetPolicyConfigs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigPolicyConfigsResolver]Error getting PolicyConfigs %q : %s", *id, err)
			return vGlobalACPConfigList, nil
		}
		dn := vACPConfig.DisplayName()
parentLabels := map[string]interface{}{"acpconfigs.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vACPConfig.Spec.DisplayName)
vGns := string(vACPConfig.Spec.Gns)
vDescription := string(vACPConfig.Spec.Description)
Tags, _ := json.Marshal(vACPConfig.Spec.Tags)
TagsData := string(Tags)
vProjectId := string(vACPConfig.Spec.ProjectId)
DestGroups, _ := json.Marshal(vACPConfig.Spec.DestGroups)
DestGroupsData := string(DestGroups)
SourceGroups, _ := json.Marshal(vACPConfig.Spec.SourceGroups)
SourceGroupsData := string(SourceGroups)
Conditions, _ := json.Marshal(vACPConfig.Spec.Conditions)
ConditionsData := string(Conditions)
Actions, _ := json.Marshal(vACPConfig.Spec.Actions)
ActionsData := string(Actions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalACPConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Gns: &vGns,
	Description: &vDescription,
	Tags: &TagsData,
	ProjectId: &vProjectId,
	DestGroups: &DestGroupsData,
	SourceGroups: &SourceGroupsData,
	Conditions: &ConditionsData,
	Actions: &ActionsData,
	}
		vGlobalACPConfigList = append(vGlobalACPConfigList, ret)

		log.Debugf("[getGlobalProjectConfigPolicyConfigsResolver]Output PolicyConfigs objects %v", vGlobalACPConfigList)

		return vGlobalACPConfigList, nil
	}

	log.Debug("[getGlobalProjectConfigPolicyConfigsResolver]Id is empty, process all PolicyConfigss")

	vACPConfigParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigPolicyConfigsResolver]Error getting parent node %s", err)
        return vGlobalACPConfigList, nil
    }
	vACPConfigAllObj, err := vACPConfigParent.GetAllPolicyConfigs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigPolicyConfigsResolver]Error getting PolicyConfigs %s", err)
        return vGlobalACPConfigList, nil
    }
	for _, i := range vACPConfigAllObj {
		vACPConfigParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigPolicyConfigsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vACPConfig, err := vACPConfigParent.GetPolicyConfigs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigPolicyConfigsResolver]Error getting PolicyConfigs node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vACPConfig.DisplayName()
parentLabels := map[string]interface{}{"acpconfigs.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vACPConfig.Spec.DisplayName)
vGns := string(vACPConfig.Spec.Gns)
vDescription := string(vACPConfig.Spec.Description)
Tags, _ := json.Marshal(vACPConfig.Spec.Tags)
TagsData := string(Tags)
vProjectId := string(vACPConfig.Spec.ProjectId)
DestGroups, _ := json.Marshal(vACPConfig.Spec.DestGroups)
DestGroupsData := string(DestGroups)
SourceGroups, _ := json.Marshal(vACPConfig.Spec.SourceGroups)
SourceGroupsData := string(SourceGroups)
Conditions, _ := json.Marshal(vACPConfig.Spec.Conditions)
ConditionsData := string(Conditions)
Actions, _ := json.Marshal(vACPConfig.Spec.Actions)
ActionsData := string(Actions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalACPConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Gns: &vGns,
	Description: &vDescription,
	Tags: &TagsData,
	ProjectId: &vProjectId,
	DestGroups: &DestGroupsData,
	SourceGroups: &SourceGroupsData,
	Conditions: &ConditionsData,
	Actions: &ActionsData,
	}
		vGlobalACPConfigList = append(vGlobalACPConfigList, ret)
	}
	log.Debugf("[getGlobalProjectConfigPolicyConfigsResolver]List of PolicyConfigs object %v", vGlobalACPConfigList)
	return vGlobalACPConfigList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: TemplateGroups Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigTemplateGroupsResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalTemplateGroup, error) {
	log.Debugf("[getGlobalProjectConfigTemplateGroupsResolver]Parent Object %+v", obj)
	var vGlobalTemplateGroupList []*model.GlobalTemplateGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigTemplateGroupsResolver]Id %q", *id)
		vTemplateGroupParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigTemplateGroupsResolver]Error getting TemplateGroups %q : %s", *id, err)
			return vGlobalTemplateGroupList, nil
		}
		vTemplateGroup, err := vTemplateGroupParent.GetTemplateGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigTemplateGroupsResolver]Error getting TemplateGroups %q : %s", *id, err)
			return vGlobalTemplateGroupList, nil
		}
		dn := vTemplateGroup.DisplayName()
parentLabels := map[string]interface{}{"templategroups.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vTemplateGroup.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTemplateGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	}
		vGlobalTemplateGroupList = append(vGlobalTemplateGroupList, ret)

		log.Debugf("[getGlobalProjectConfigTemplateGroupsResolver]Output TemplateGroups objects %v", vGlobalTemplateGroupList)

		return vGlobalTemplateGroupList, nil
	}

	log.Debug("[getGlobalProjectConfigTemplateGroupsResolver]Id is empty, process all TemplateGroupss")

	vTemplateGroupParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigTemplateGroupsResolver]Error getting parent node %s", err)
        return vGlobalTemplateGroupList, nil
    }
	vTemplateGroupAllObj, err := vTemplateGroupParent.GetAllTemplateGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigTemplateGroupsResolver]Error getting TemplateGroups %s", err)
        return vGlobalTemplateGroupList, nil
    }
	for _, i := range vTemplateGroupAllObj {
		vTemplateGroupParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigTemplateGroupsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vTemplateGroup, err := vTemplateGroupParent.GetTemplateGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigTemplateGroupsResolver]Error getting TemplateGroups node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vTemplateGroup.DisplayName()
parentLabels := map[string]interface{}{"templategroups.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vTemplateGroup.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTemplateGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	}
		vGlobalTemplateGroupList = append(vGlobalTemplateGroupList, ret)
	}
	log.Debugf("[getGlobalProjectConfigTemplateGroupsResolver]List of TemplateGroups object %v", vGlobalTemplateGroupList)
	return vGlobalTemplateGroupList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Certificates Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigCertificatesResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalCertificateConfigN, error) {
	log.Debugf("[getGlobalProjectConfigCertificatesResolver]Parent Object %+v", obj)
	var vGlobalCertificateConfigNList []*model.GlobalCertificateConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigCertificatesResolver]Id %q", *id)
		vCertificateConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigCertificatesResolver]Error getting Certificates %q : %s", *id, err)
			return vGlobalCertificateConfigNList, nil
		}
		vCertificateConfigN, err := vCertificateConfigNParent.GetCertificates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigCertificatesResolver]Error getting Certificates %q : %s", *id, err)
			return vGlobalCertificateConfigNList, nil
		}
		dn := vCertificateConfigN.DisplayName()
parentLabels := map[string]interface{}{"certificateconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vCertificateConfigN.Spec.ProjectId)
vBeginsOn := string(vCertificateConfigN.Spec.BeginsOn)
vExpiresOn := string(vCertificateConfigN.Spec.ExpiresOn)
vIssuedToCN := string(vCertificateConfigN.Spec.IssuedToCN)
vConfig := string(vCertificateConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	BeginsOn: &vBeginsOn,
	ExpiresOn: &vExpiresOn,
	IssuedToCN: &vIssuedToCN,
	Config: &vConfig,
	}
		vGlobalCertificateConfigNList = append(vGlobalCertificateConfigNList, ret)

		log.Debugf("[getGlobalProjectConfigCertificatesResolver]Output Certificates objects %v", vGlobalCertificateConfigNList)

		return vGlobalCertificateConfigNList, nil
	}

	log.Debug("[getGlobalProjectConfigCertificatesResolver]Id is empty, process all Certificatess")

	vCertificateConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigCertificatesResolver]Error getting parent node %s", err)
        return vGlobalCertificateConfigNList, nil
    }
	vCertificateConfigNAllObj, err := vCertificateConfigNParent.GetAllCertificates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigCertificatesResolver]Error getting Certificates %s", err)
        return vGlobalCertificateConfigNList, nil
    }
	for _, i := range vCertificateConfigNAllObj {
		vCertificateConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigCertificatesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vCertificateConfigN, err := vCertificateConfigNParent.GetCertificates(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigCertificatesResolver]Error getting Certificates node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vCertificateConfigN.DisplayName()
parentLabels := map[string]interface{}{"certificateconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vCertificateConfigN.Spec.ProjectId)
vBeginsOn := string(vCertificateConfigN.Spec.BeginsOn)
vExpiresOn := string(vCertificateConfigN.Spec.ExpiresOn)
vIssuedToCN := string(vCertificateConfigN.Spec.IssuedToCN)
vConfig := string(vCertificateConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCertificateConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	BeginsOn: &vBeginsOn,
	ExpiresOn: &vExpiresOn,
	IssuedToCN: &vIssuedToCN,
	Config: &vConfig,
	}
		vGlobalCertificateConfigNList = append(vGlobalCertificateConfigNList, ret)
	}
	log.Debugf("[getGlobalProjectConfigCertificatesResolver]List of Certificates object %v", vGlobalCertificateConfigNList)
	return vGlobalCertificateConfigNList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ExternalAccounts Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigExternalAccountsResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalExternalAccountConfigN, error) {
	log.Debugf("[getGlobalProjectConfigExternalAccountsResolver]Parent Object %+v", obj)
	var vGlobalExternalAccountConfigNList []*model.GlobalExternalAccountConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigExternalAccountsResolver]Id %q", *id)
		vExternalAccountConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigExternalAccountsResolver]Error getting ExternalAccounts %q : %s", *id, err)
			return vGlobalExternalAccountConfigNList, nil
		}
		vExternalAccountConfigN, err := vExternalAccountConfigNParent.GetExternalAccounts(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigExternalAccountsResolver]Error getting ExternalAccounts %q : %s", *id, err)
			return vGlobalExternalAccountConfigNList, nil
		}
		dn := vExternalAccountConfigN.DisplayName()
parentLabels := map[string]interface{}{"externalaccountconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalAccountConfigN.Spec.Config)
vProxyConfig := string(vExternalAccountConfigN.Spec.ProxyConfig)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalAccountConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	ProxyConfig: &vProxyConfig,
	}
		vGlobalExternalAccountConfigNList = append(vGlobalExternalAccountConfigNList, ret)

		log.Debugf("[getGlobalProjectConfigExternalAccountsResolver]Output ExternalAccounts objects %v", vGlobalExternalAccountConfigNList)

		return vGlobalExternalAccountConfigNList, nil
	}

	log.Debug("[getGlobalProjectConfigExternalAccountsResolver]Id is empty, process all ExternalAccountss")

	vExternalAccountConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigExternalAccountsResolver]Error getting parent node %s", err)
        return vGlobalExternalAccountConfigNList, nil
    }
	vExternalAccountConfigNAllObj, err := vExternalAccountConfigNParent.GetAllExternalAccounts(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigExternalAccountsResolver]Error getting ExternalAccounts %s", err)
        return vGlobalExternalAccountConfigNList, nil
    }
	for _, i := range vExternalAccountConfigNAllObj {
		vExternalAccountConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigExternalAccountsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vExternalAccountConfigN, err := vExternalAccountConfigNParent.GetExternalAccounts(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigExternalAccountsResolver]Error getting ExternalAccounts node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vExternalAccountConfigN.DisplayName()
parentLabels := map[string]interface{}{"externalaccountconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalAccountConfigN.Spec.Config)
vProxyConfig := string(vExternalAccountConfigN.Spec.ProxyConfig)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalAccountConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	ProxyConfig: &vProxyConfig,
	}
		vGlobalExternalAccountConfigNList = append(vGlobalExternalAccountConfigNList, ret)
	}
	log.Debugf("[getGlobalProjectConfigExternalAccountsResolver]List of ExternalAccounts object %v", vGlobalExternalAccountConfigNList)
	return vGlobalExternalAccountConfigNList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ExternalDNS Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigExternalDNSResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalExternalDNSConfigN, error) {
	log.Debugf("[getGlobalProjectConfigExternalDNSResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSConfigNList []*model.GlobalExternalDNSConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigExternalDNSResolver]Id %q", *id)
		vExternalDNSConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigExternalDNSResolver]Error getting ExternalDNS %q : %s", *id, err)
			return vGlobalExternalDNSConfigNList, nil
		}
		vExternalDNSConfigN, err := vExternalDNSConfigNParent.GetExternalDNS(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigExternalDNSResolver]Error getting ExternalDNS %q : %s", *id, err)
			return vGlobalExternalDNSConfigNList, nil
		}
		dn := vExternalDNSConfigN.DisplayName()
parentLabels := map[string]interface{}{"externaldnsconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalDNSConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalExternalDNSConfigNList = append(vGlobalExternalDNSConfigNList, ret)

		log.Debugf("[getGlobalProjectConfigExternalDNSResolver]Output ExternalDNS objects %v", vGlobalExternalDNSConfigNList)

		return vGlobalExternalDNSConfigNList, nil
	}

	log.Debug("[getGlobalProjectConfigExternalDNSResolver]Id is empty, process all ExternalDNSs")

	vExternalDNSConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigExternalDNSResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSConfigNList, nil
    }
	vExternalDNSConfigNAllObj, err := vExternalDNSConfigNParent.GetAllExternalDNS(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigExternalDNSResolver]Error getting ExternalDNS %s", err)
        return vGlobalExternalDNSConfigNList, nil
    }
	for _, i := range vExternalDNSConfigNAllObj {
		vExternalDNSConfigNParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigExternalDNSResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vExternalDNSConfigN, err := vExternalDNSConfigNParent.GetExternalDNS(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigExternalDNSResolver]Error getting ExternalDNS node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vExternalDNSConfigN.DisplayName()
parentLabels := map[string]interface{}{"externaldnsconfigns.global.tsm.tanzu.vmware.com":dn}
vConfig := string(vExternalDNSConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	Config: &vConfig,
	}
		vGlobalExternalDNSConfigNList = append(vGlobalExternalDNSConfigNList, ret)
	}
	log.Debugf("[getGlobalProjectConfigExternalDNSResolver]List of ExternalDNS object %v", vGlobalExternalDNSConfigNList)
	return vGlobalExternalDNSConfigNList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Autoscalers Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigAutoscalersResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalAutoscaler, error) {
	log.Debugf("[getGlobalProjectConfigAutoscalersResolver]Parent Object %+v", obj)
	var vGlobalAutoscalerList []*model.GlobalAutoscaler
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigAutoscalersResolver]Id %q", *id)
		vAutoscalerParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigAutoscalersResolver]Error getting Autoscalers %q : %s", *id, err)
			return vGlobalAutoscalerList, nil
		}
		vAutoscaler, err := vAutoscalerParent.GetAutoscalers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigAutoscalersResolver]Error getting Autoscalers %q : %s", *id, err)
			return vGlobalAutoscalerList, nil
		}
		dn := vAutoscaler.DisplayName()
parentLabels := map[string]interface{}{"autoscalers.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscaler.Spec.Name)
vProjectId := string(vAutoscaler.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscaler {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ProjectId: &vProjectId,
	}
		vGlobalAutoscalerList = append(vGlobalAutoscalerList, ret)

		log.Debugf("[getGlobalProjectConfigAutoscalersResolver]Output Autoscalers objects %v", vGlobalAutoscalerList)

		return vGlobalAutoscalerList, nil
	}

	log.Debug("[getGlobalProjectConfigAutoscalersResolver]Id is empty, process all Autoscalerss")

	vAutoscalerParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigAutoscalersResolver]Error getting parent node %s", err)
        return vGlobalAutoscalerList, nil
    }
	vAutoscalerAllObj, err := vAutoscalerParent.GetAllAutoscalers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigAutoscalersResolver]Error getting Autoscalers %s", err)
        return vGlobalAutoscalerList, nil
    }
	for _, i := range vAutoscalerAllObj {
		vAutoscalerParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigAutoscalersResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vAutoscaler, err := vAutoscalerParent.GetAutoscalers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigAutoscalersResolver]Error getting Autoscalers node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vAutoscaler.DisplayName()
parentLabels := map[string]interface{}{"autoscalers.global.tsm.tanzu.vmware.com":dn}
vName := string(vAutoscaler.Spec.Name)
vProjectId := string(vAutoscaler.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAutoscaler {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ProjectId: &vProjectId,
	}
		vGlobalAutoscalerList = append(vGlobalAutoscalerList, ret)
	}
	log.Debugf("[getGlobalProjectConfigAutoscalersResolver]List of Autoscalers object %v", vGlobalAutoscalerList)
	return vGlobalAutoscalerList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Clusters Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigClustersResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalClusterSettings, error) {
	log.Debugf("[getGlobalProjectConfigClustersResolver]Parent Object %+v", obj)
	var vGlobalClusterSettingsList []*model.GlobalClusterSettings
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigClustersResolver]Id %q", *id)
		vClusterSettingsParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigClustersResolver]Error getting Clusters %q : %s", *id, err)
			return vGlobalClusterSettingsList, nil
		}
		vClusterSettings, err := vClusterSettingsParent.GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigClustersResolver]Error getting Clusters %q : %s", *id, err)
			return vGlobalClusterSettingsList, nil
		}
		dn := vClusterSettings.DisplayName()
parentLabels := map[string]interface{}{"clustersettingses.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vClusterSettings.Spec.ProjectId)
vDisplayName := string(vClusterSettings.Spec.DisplayName)
vDescription := string(vClusterSettings.Spec.Description)
vTags := string(vClusterSettings.Spec.Tags)
vLabels := string(vClusterSettings.Spec.Labels)
vAutoInstallServiceMesh := bool(vClusterSettings.Spec.AutoInstallServiceMesh)
vEnableNamespaceExclusions := bool(vClusterSettings.Spec.EnableNamespaceExclusions)
vNamespaceExclusions := string(vClusterSettings.Spec.NamespaceExclusions)
vSystemNamespaceExclusions := string(vClusterSettings.Spec.SystemNamespaceExclusions)
vAgentDomain := string(vClusterSettings.Spec.AgentDomain)
vProxyConfig := string(vClusterSettings.Spec.ProxyConfig)
vAutoInstallServiceMeshConfig := string(vClusterSettings.Spec.AutoInstallServiceMeshConfig)
vRegistryAccount := string(vClusterSettings.Spec.RegistryAccount)
vCaLabels := string(vClusterSettings.Spec.CaLabels)
vEnableInternalGateway := bool(vClusterSettings.Spec.EnableInternalGateway)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalClusterSettings {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Tags: &vTags,
	Labels: &vLabels,
	AutoInstallServiceMesh: &vAutoInstallServiceMesh,
	EnableNamespaceExclusions: &vEnableNamespaceExclusions,
	NamespaceExclusions: &vNamespaceExclusions,
	SystemNamespaceExclusions: &vSystemNamespaceExclusions,
	AgentDomain: &vAgentDomain,
	ProxyConfig: &vProxyConfig,
	AutoInstallServiceMeshConfig: &vAutoInstallServiceMeshConfig,
	RegistryAccount: &vRegistryAccount,
	CaLabels: &vCaLabels,
	EnableInternalGateway: &vEnableInternalGateway,
	}
		vGlobalClusterSettingsList = append(vGlobalClusterSettingsList, ret)

		log.Debugf("[getGlobalProjectConfigClustersResolver]Output Clusters objects %v", vGlobalClusterSettingsList)

		return vGlobalClusterSettingsList, nil
	}

	log.Debug("[getGlobalProjectConfigClustersResolver]Id is empty, process all Clusterss")

	vClusterSettingsParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigClustersResolver]Error getting parent node %s", err)
        return vGlobalClusterSettingsList, nil
    }
	vClusterSettingsAllObj, err := vClusterSettingsParent.GetAllClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigClustersResolver]Error getting Clusters %s", err)
        return vGlobalClusterSettingsList, nil
    }
	for _, i := range vClusterSettingsAllObj {
		vClusterSettingsParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigClustersResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vClusterSettings, err := vClusterSettingsParent.GetClusters(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigClustersResolver]Error getting Clusters node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vClusterSettings.DisplayName()
parentLabels := map[string]interface{}{"clustersettingses.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vClusterSettings.Spec.ProjectId)
vDisplayName := string(vClusterSettings.Spec.DisplayName)
vDescription := string(vClusterSettings.Spec.Description)
vTags := string(vClusterSettings.Spec.Tags)
vLabels := string(vClusterSettings.Spec.Labels)
vAutoInstallServiceMesh := bool(vClusterSettings.Spec.AutoInstallServiceMesh)
vEnableNamespaceExclusions := bool(vClusterSettings.Spec.EnableNamespaceExclusions)
vNamespaceExclusions := string(vClusterSettings.Spec.NamespaceExclusions)
vSystemNamespaceExclusions := string(vClusterSettings.Spec.SystemNamespaceExclusions)
vAgentDomain := string(vClusterSettings.Spec.AgentDomain)
vProxyConfig := string(vClusterSettings.Spec.ProxyConfig)
vAutoInstallServiceMeshConfig := string(vClusterSettings.Spec.AutoInstallServiceMeshConfig)
vRegistryAccount := string(vClusterSettings.Spec.RegistryAccount)
vCaLabels := string(vClusterSettings.Spec.CaLabels)
vEnableInternalGateway := bool(vClusterSettings.Spec.EnableInternalGateway)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalClusterSettings {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Tags: &vTags,
	Labels: &vLabels,
	AutoInstallServiceMesh: &vAutoInstallServiceMesh,
	EnableNamespaceExclusions: &vEnableNamespaceExclusions,
	NamespaceExclusions: &vNamespaceExclusions,
	SystemNamespaceExclusions: &vSystemNamespaceExclusions,
	AgentDomain: &vAgentDomain,
	ProxyConfig: &vProxyConfig,
	AutoInstallServiceMeshConfig: &vAutoInstallServiceMeshConfig,
	RegistryAccount: &vRegistryAccount,
	CaLabels: &vCaLabels,
	EnableInternalGateway: &vEnableInternalGateway,
	}
		vGlobalClusterSettingsList = append(vGlobalClusterSettingsList, ret)
	}
	log.Debugf("[getGlobalProjectConfigClustersResolver]List of Clusters object %v", vGlobalClusterSettingsList)
	return vGlobalClusterSettingsList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceLevelObjectives Node: ProjectConfig PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigServiceLevelObjectivesResolver(obj *model.GlobalProjectConfig, id *string) ([]*model.GlobalServiceLevelObjective, error) {
	log.Debugf("[getGlobalProjectConfigServiceLevelObjectivesResolver]Parent Object %+v", obj)
	var vGlobalServiceLevelObjectiveList []*model.GlobalServiceLevelObjective
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectConfigServiceLevelObjectivesResolver]Id %q", *id)
		vServiceLevelObjectiveParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigServiceLevelObjectivesResolver]Error getting ServiceLevelObjectives %q : %s", *id, err)
			return vGlobalServiceLevelObjectiveList, nil
		}
		vServiceLevelObjective, err := vServiceLevelObjectiveParent.GetServiceLevelObjectives(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigServiceLevelObjectivesResolver]Error getting ServiceLevelObjectives %q : %s", *id, err)
			return vGlobalServiceLevelObjectiveList, nil
		}
		dn := vServiceLevelObjective.DisplayName()
parentLabels := map[string]interface{}{"servicelevelobjectives.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vServiceLevelObjective.Spec.ProjectId)
vDisabled := bool(vServiceLevelObjective.Spec.Disabled)
vDescription := string(vServiceLevelObjective.Spec.Description)
vLabels := string(vServiceLevelObjective.Spec.Labels)
vSlis := string(vServiceLevelObjective.Spec.Slis)
vSloServices := string(vServiceLevelObjective.Spec.SloServices)
vSloTargetValue := string(vServiceLevelObjective.Spec.SloTargetValue)
vSloPeriod := string(vServiceLevelObjective.Spec.SloPeriod)
vSloCreationTime := string(vServiceLevelObjective.Spec.SloCreationTime)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceLevelObjective {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	Disabled: &vDisabled,
	Description: &vDescription,
	Labels: &vLabels,
	Slis: &vSlis,
	SloServices: &vSloServices,
	SloTargetValue: &vSloTargetValue,
	SloPeriod: &vSloPeriod,
	SloCreationTime: &vSloCreationTime,
	}
		vGlobalServiceLevelObjectiveList = append(vGlobalServiceLevelObjectiveList, ret)

		log.Debugf("[getGlobalProjectConfigServiceLevelObjectivesResolver]Output ServiceLevelObjectives objects %v", vGlobalServiceLevelObjectiveList)

		return vGlobalServiceLevelObjectiveList, nil
	}

	log.Debug("[getGlobalProjectConfigServiceLevelObjectivesResolver]Id is empty, process all ServiceLevelObjectivess")

	vServiceLevelObjectiveParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigServiceLevelObjectivesResolver]Error getting parent node %s", err)
        return vGlobalServiceLevelObjectiveList, nil
    }
	vServiceLevelObjectiveAllObj, err := vServiceLevelObjectiveParent.GetAllServiceLevelObjectives(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigServiceLevelObjectivesResolver]Error getting ServiceLevelObjectives %s", err)
        return vGlobalServiceLevelObjectiveList, nil
    }
	for _, i := range vServiceLevelObjectiveAllObj {
		vServiceLevelObjectiveParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), getParentName(obj.ParentLabels, "projectconfigs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectConfigServiceLevelObjectivesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceLevelObjective, err := vServiceLevelObjectiveParent.GetServiceLevelObjectives(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectConfigServiceLevelObjectivesResolver]Error getting ServiceLevelObjectives node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceLevelObjective.DisplayName()
parentLabels := map[string]interface{}{"servicelevelobjectives.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vServiceLevelObjective.Spec.ProjectId)
vDisabled := bool(vServiceLevelObjective.Spec.Disabled)
vDescription := string(vServiceLevelObjective.Spec.Description)
vLabels := string(vServiceLevelObjective.Spec.Labels)
vSlis := string(vServiceLevelObjective.Spec.Slis)
vSloServices := string(vServiceLevelObjective.Spec.SloServices)
vSloTargetValue := string(vServiceLevelObjective.Spec.SloTargetValue)
vSloPeriod := string(vServiceLevelObjective.Spec.SloPeriod)
vSloCreationTime := string(vServiceLevelObjective.Spec.SloCreationTime)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceLevelObjective {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	Disabled: &vDisabled,
	Description: &vDescription,
	Labels: &vLabels,
	Slis: &vSlis,
	SloServices: &vSloServices,
	SloTargetValue: &vSloTargetValue,
	SloPeriod: &vSloPeriod,
	SloCreationTime: &vSloCreationTime,
	}
		vGlobalServiceLevelObjectiveList = append(vGlobalServiceLevelObjectiveList, ret)
	}
	log.Debugf("[getGlobalProjectConfigServiceLevelObjectivesResolver]List of ServiceLevelObjectives object %v", vGlobalServiceLevelObjectiveList)
	return vGlobalServiceLevelObjectiveList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Clusters Node: ProjectInventory PKG: Global
//////////////////////////////////////
func getGlobalProjectInventoryClustersResolver(obj *model.GlobalProjectInventory, id *string) ([]*model.GlobalCluster, error) {
	log.Debugf("[getGlobalProjectInventoryClustersResolver]Parent Object %+v", obj)
	var vGlobalClusterList []*model.GlobalCluster
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectInventoryClustersResolver]Id %q", *id)
		vClusterParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), getParentName(obj.ParentLabels, "projectinventories.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryClustersResolver]Error getting Clusters %q : %s", *id, err)
			return vGlobalClusterList, nil
		}
		vCluster, err := vClusterParent.GetClusters(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryClustersResolver]Error getting Clusters %q : %s", *id, err)
			return vGlobalClusterList, nil
		}
		dn := vCluster.DisplayName()
parentLabels := map[string]interface{}{"clusters.global.tsm.tanzu.vmware.com":dn}
vName := string(vCluster.Spec.Name)
vUuid := string(vCluster.Spec.Uuid)
vConnected := bool(vCluster.Spec.Connected)
vIstioState := string(vCluster.Spec.IstioState)
vStatus := string(vCluster.Spec.Status)
vStatusHistory := string(vCluster.Spec.StatusHistory)
vCastatus := string(vCluster.Spec.Castatus)
vCaStatusHistory := string(vCluster.Spec.CaStatusHistory)
vComponentStatuses := string(vCluster.Spec.ComponentStatuses)
vComponentStatusesHistory := string(vCluster.Spec.ComponentStatusesHistory)
vType := string(vCluster.Spec.Type)
vProjectId := string(vCluster.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Uuid: &vUuid,
	Connected: &vConnected,
	IstioState: &vIstioState,
	Status: &vStatus,
	StatusHistory: &vStatusHistory,
	Castatus: &vCastatus,
	CaStatusHistory: &vCaStatusHistory,
	ComponentStatuses: &vComponentStatuses,
	ComponentStatusesHistory: &vComponentStatusesHistory,
	Type: &vType,
	ProjectId: &vProjectId,
	}
		vGlobalClusterList = append(vGlobalClusterList, ret)

		log.Debugf("[getGlobalProjectInventoryClustersResolver]Output Clusters objects %v", vGlobalClusterList)

		return vGlobalClusterList, nil
	}

	log.Debug("[getGlobalProjectInventoryClustersResolver]Id is empty, process all Clusterss")

	vClusterParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), getParentName(obj.ParentLabels, "projectinventories.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectInventoryClustersResolver]Error getting parent node %s", err)
        return vGlobalClusterList, nil
    }
	vClusterAllObj, err := vClusterParent.GetAllClusters(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectInventoryClustersResolver]Error getting Clusters %s", err)
        return vGlobalClusterList, nil
    }
	for _, i := range vClusterAllObj {
		vClusterParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), getParentName(obj.ParentLabels, "projectinventories.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryClustersResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vCluster, err := vClusterParent.GetClusters(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectInventoryClustersResolver]Error getting Clusters node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vCluster.DisplayName()
parentLabels := map[string]interface{}{"clusters.global.tsm.tanzu.vmware.com":dn}
vName := string(vCluster.Spec.Name)
vUuid := string(vCluster.Spec.Uuid)
vConnected := bool(vCluster.Spec.Connected)
vIstioState := string(vCluster.Spec.IstioState)
vStatus := string(vCluster.Spec.Status)
vStatusHistory := string(vCluster.Spec.StatusHistory)
vCastatus := string(vCluster.Spec.Castatus)
vCaStatusHistory := string(vCluster.Spec.CaStatusHistory)
vComponentStatuses := string(vCluster.Spec.ComponentStatuses)
vComponentStatusesHistory := string(vCluster.Spec.ComponentStatusesHistory)
vType := string(vCluster.Spec.Type)
vProjectId := string(vCluster.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalCluster {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Uuid: &vUuid,
	Connected: &vConnected,
	IstioState: &vIstioState,
	Status: &vStatus,
	StatusHistory: &vStatusHistory,
	Castatus: &vCastatus,
	CaStatusHistory: &vCaStatusHistory,
	ComponentStatuses: &vComponentStatuses,
	ComponentStatusesHistory: &vComponentStatusesHistory,
	Type: &vType,
	ProjectId: &vProjectId,
	}
		vGlobalClusterList = append(vGlobalClusterList, ret)
	}
	log.Debugf("[getGlobalProjectInventoryClustersResolver]List of Clusters object %v", vGlobalClusterList)
	return vGlobalClusterList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ExternalDNS Node: ProjectInventory PKG: Global
//////////////////////////////////////
func getGlobalProjectInventoryExternalDNSResolver(obj *model.GlobalProjectInventory, id *string) ([]*model.GlobalExternalDNSInventory, error) {
	log.Debugf("[getGlobalProjectInventoryExternalDNSResolver]Parent Object %+v", obj)
	var vGlobalExternalDNSInventoryList []*model.GlobalExternalDNSInventory
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectInventoryExternalDNSResolver]Id %q", *id)
		vExternalDNSInventoryParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), getParentName(obj.ParentLabels, "projectinventories.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryExternalDNSResolver]Error getting ExternalDNS %q : %s", *id, err)
			return vGlobalExternalDNSInventoryList, nil
		}
		vExternalDNSInventory, err := vExternalDNSInventoryParent.GetExternalDNS(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryExternalDNSResolver]Error getting ExternalDNS %q : %s", *id, err)
			return vGlobalExternalDNSInventoryList, nil
		}
		dn := vExternalDNSInventory.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventories.global.tsm.tanzu.vmware.com":dn}
EnabledForProjects, _ := json.Marshal(vExternalDNSInventory.Spec.EnabledForProjects)
EnabledForProjectsData := string(EnabledForProjects)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	EnabledForProjects: &EnabledForProjectsData,
	}
		vGlobalExternalDNSInventoryList = append(vGlobalExternalDNSInventoryList, ret)

		log.Debugf("[getGlobalProjectInventoryExternalDNSResolver]Output ExternalDNS objects %v", vGlobalExternalDNSInventoryList)

		return vGlobalExternalDNSInventoryList, nil
	}

	log.Debug("[getGlobalProjectInventoryExternalDNSResolver]Id is empty, process all ExternalDNSs")

	vExternalDNSInventoryParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), getParentName(obj.ParentLabels, "projectinventories.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectInventoryExternalDNSResolver]Error getting parent node %s", err)
        return vGlobalExternalDNSInventoryList, nil
    }
	vExternalDNSInventoryAllObj, err := vExternalDNSInventoryParent.GetAllExternalDNS(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectInventoryExternalDNSResolver]Error getting ExternalDNS %s", err)
        return vGlobalExternalDNSInventoryList, nil
    }
	for _, i := range vExternalDNSInventoryAllObj {
		vExternalDNSInventoryParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), getParentName(obj.ParentLabels, "projectinventories.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryExternalDNSResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vExternalDNSInventory, err := vExternalDNSInventoryParent.GetExternalDNS(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectInventoryExternalDNSResolver]Error getting ExternalDNS node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vExternalDNSInventory.DisplayName()
parentLabels := map[string]interface{}{"externaldnsinventories.global.tsm.tanzu.vmware.com":dn}
EnabledForProjects, _ := json.Marshal(vExternalDNSInventory.Spec.EnabledForProjects)
EnabledForProjectsData := string(EnabledForProjects)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalExternalDNSInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	EnabledForProjects: &EnabledForProjectsData,
	}
		vGlobalExternalDNSInventoryList = append(vGlobalExternalDNSInventoryList, ret)
	}
	log.Debugf("[getGlobalProjectInventoryExternalDNSResolver]List of ExternalDNS object %v", vGlobalExternalDNSInventoryList)
	return vGlobalExternalDNSInventoryList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Jobs Node: ProjectInventory PKG: Global
//////////////////////////////////////
func getGlobalProjectInventoryJobsResolver(obj *model.GlobalProjectInventory, id *string) ([]*model.GlobalJob, error) {
	log.Debugf("[getGlobalProjectInventoryJobsResolver]Parent Object %+v", obj)
	var vGlobalJobList []*model.GlobalJob
	if id != nil && *id != "" {
		log.Debugf("[getGlobalProjectInventoryJobsResolver]Id %q", *id)
		vJobParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), getParentName(obj.ParentLabels, "projectinventories.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryJobsResolver]Error getting Jobs %q : %s", *id, err)
			return vGlobalJobList, nil
		}
		vJob, err := vJobParent.GetJobs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryJobsResolver]Error getting Jobs %q : %s", *id, err)
			return vGlobalJobList, nil
		}
		dn := vJob.DisplayName()
parentLabels := map[string]interface{}{"jobs.global.tsm.tanzu.vmware.com":dn}
vStatus := string(vJob.Spec.Status)
vProjectId := string(vJob.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Status: &vStatus,
	ProjectId: &vProjectId,
	}
		vGlobalJobList = append(vGlobalJobList, ret)

		log.Debugf("[getGlobalProjectInventoryJobsResolver]Output Jobs objects %v", vGlobalJobList)

		return vGlobalJobList, nil
	}

	log.Debug("[getGlobalProjectInventoryJobsResolver]Id is empty, process all Jobss")

	vJobParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), getParentName(obj.ParentLabels, "projectinventories.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectInventoryJobsResolver]Error getting parent node %s", err)
        return vGlobalJobList, nil
    }
	vJobAllObj, err := vJobParent.GetAllJobs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectInventoryJobsResolver]Error getting Jobs %s", err)
        return vGlobalJobList, nil
    }
	for _, i := range vJobAllObj {
		vJobParent, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), getParentName(obj.ParentLabels, "projectinventories.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryJobsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vJob, err := vJobParent.GetJobs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalProjectInventoryJobsResolver]Error getting Jobs node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vJob.DisplayName()
parentLabels := map[string]interface{}{"jobs.global.tsm.tanzu.vmware.com":dn}
vStatus := string(vJob.Spec.Status)
vProjectId := string(vJob.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Status: &vStatus,
	ProjectId: &vProjectId,
	}
		vGlobalJobList = append(vGlobalJobList, ret)
	}
	log.Debugf("[getGlobalProjectInventoryJobsResolver]List of Jobs object %v", vGlobalJobList)
	return vGlobalJobList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Config Node: Project PKG: Global
//////////////////////////////////////
func getGlobalProjectConfigResolver(obj *model.GlobalProject, id *string) (*model.GlobalProjectConfig, error) {
	log.Debugf("[getGlobalProjectConfigResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalProjectConfigResolver]Id %q", *id)
		vProjectConfig, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetConfig(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectConfigResolver]Error getting Config node %q : %s", *id, err)
			return &model.GlobalProjectConfig{}, nil
		}
		dn := vProjectConfig.DisplayName()
parentLabels := map[string]interface{}{"projectconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vProjectConfig.Spec.Name)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalProjectConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}

		log.Debugf("[getGlobalProjectConfigResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalProjectConfigResolver]Id is empty, process all Configs")
	vProjectConfigParent, err := nc.GlobalRoot().Config().GetProjects(context.TODO(), getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigResolver]Failed to get parent node %s", err)
        return &model.GlobalProjectConfig{}, nil
    }
	vProjectConfig, err := vProjectConfigParent.GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectConfigResolver]Error getting Config node %s", err)
        return &model.GlobalProjectConfig{}, nil
    }
	dn := vProjectConfig.DisplayName()
parentLabels := map[string]interface{}{"projectconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vProjectConfig.Spec.Name)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalProjectConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}

	log.Debugf("[getGlobalProjectConfigResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Inventory Node: Project PKG: Global
//////////////////////////////////////
func getGlobalProjectInventoryResolver(obj *model.GlobalProject, id *string) (*model.GlobalProjectInventory, error) {
	log.Debugf("[getGlobalProjectInventoryResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalProjectInventoryResolver]Id %q", *id)
		vProjectInventory, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetInventory(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectInventoryResolver]Error getting Inventory node %q : %s", *id, err)
			return &model.GlobalProjectInventory{}, nil
		}
		dn := vProjectInventory.DisplayName()
parentLabels := map[string]interface{}{"projectinventories.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalProjectInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalProjectInventoryResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalProjectInventoryResolver]Id is empty, process all Inventorys")
	vProjectInventoryParent, err := nc.GlobalRoot().Config().GetProjects(context.TODO(), getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectInventoryResolver]Failed to get parent node %s", err)
        return &model.GlobalProjectInventory{}, nil
    }
	vProjectInventory, err := vProjectInventoryParent.GetInventory(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectInventoryResolver]Error getting Inventory node %s", err)
        return &model.GlobalProjectInventory{}, nil
    }
	dn := vProjectInventory.DisplayName()
parentLabels := map[string]interface{}{"projectinventories.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalProjectInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalProjectInventoryResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: Query Node: Project PKG: Global
//////////////////////////////////////
func getGlobalProjectQueryResolver(obj *model.GlobalProject, id *string) (*model.GlobalProjectQuery, error) {
	log.Debugf("[getGlobalProjectQueryResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalProjectQueryResolver]Id %q", *id)
		vProjectQuery, err := nc.GlobalRoot().Config().Projects(getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com")).GetQuery(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalProjectQueryResolver]Error getting Query node %q : %s", *id, err)
			return &model.GlobalProjectQuery{}, nil
		}
		dn := vProjectQuery.DisplayName()
parentLabels := map[string]interface{}{"projectqueries.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalProjectQuery {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalProjectQueryResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalProjectQueryResolver]Id is empty, process all Querys")
	vProjectQueryParent, err := nc.GlobalRoot().Config().GetProjects(context.TODO(), getParentName(obj.ParentLabels, "projects.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalProjectQueryResolver]Failed to get parent node %s", err)
        return &model.GlobalProjectQuery{}, nil
    }
	vProjectQuery, err := vProjectQueryParent.GetQuery(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalProjectQueryResolver]Error getting Query node %s", err)
        return &model.GlobalProjectQuery{}, nil
    }
	dn := vProjectQuery.DisplayName()
parentLabels := map[string]interface{}{"projectqueries.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalProjectQuery {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalProjectQueryResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: SvcGroupRT Node: ResourceGroupRT PKG: Global
//////////////////////////////////////
func getGlobalResourceGroupRTSvcGroupRTResolver(obj *model.GlobalResourceGroupRT, id *string) ([]*model.GlobalSvcGroupRT, error) {
	log.Debugf("[getGlobalResourceGroupRTSvcGroupRTResolver]Parent Object %+v", obj)
	var vGlobalSvcGroupRTList []*model.GlobalSvcGroupRT
	if id != nil && *id != "" {
		log.Debugf("[getGlobalResourceGroupRTSvcGroupRTResolver]Id %q", *id)
		vSvcGroupRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).ResourceGroup(getParentName(obj.ParentLabels, "resourcegrouprts.global.tsm.tanzu.vmware.com")).GetSvcGroupRT(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalResourceGroupRTSvcGroupRTResolver]Error getting SvcGroupRT node %q : %s", *id, err)
            return vGlobalSvcGroupRTList, nil
        }
		dn := vSvcGroupRT.DisplayName()
parentLabels := map[string]interface{}{"svcgrouprts.global.tsm.tanzu.vmware.com":dn}
vName := string(vSvcGroupRT.Spec.Name)
vDisplayName := string(vSvcGroupRT.Spec.DisplayName)
vDescription := string(vSvcGroupRT.Spec.Description)
vServices := string(vSvcGroupRT.Spec.Services)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroupRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Services: &vServices,
	}
		vGlobalSvcGroupRTList = append(vGlobalSvcGroupRTList, ret)

		log.Debugf("[getGlobalResourceGroupRTSvcGroupRTResolver]Output SvcGroupRT objects %v", vGlobalSvcGroupRTList)

		return vGlobalSvcGroupRTList, nil
	}

	log.Debug("[getGlobalResourceGroupRTSvcGroupRTResolver]Id is empty, process all SvcGroupRTs")

	vSvcGroupRTParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).GetResourceGroup(context.TODO(), getParentName(obj.ParentLabels, "resourcegrouprts.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupRTSvcGroupRTResolver]Error getting parent node %s", err)
        return vGlobalSvcGroupRTList, nil
    }
	vSvcGroupRTAllObj, err := vSvcGroupRTParent.GetAllSvcGroupRT(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupRTSvcGroupRTResolver]Error getting SvcGroupRT objects %s", err)
        return vGlobalSvcGroupRTList, nil
    }
	for _, i := range vSvcGroupRTAllObj {
		vSvcGroupRT, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).ResourceGroup(getParentName(obj.ParentLabels, "resourcegrouprts.global.tsm.tanzu.vmware.com")).GetSvcGroupRT(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalResourceGroupRTSvcGroupRTResolver]Error getting SvcGroupRT node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSvcGroupRT.DisplayName()
parentLabels := map[string]interface{}{"svcgrouprts.global.tsm.tanzu.vmware.com":dn}
vName := string(vSvcGroupRT.Spec.Name)
vDisplayName := string(vSvcGroupRT.Spec.DisplayName)
vDescription := string(vSvcGroupRT.Spec.Description)
vServices := string(vSvcGroupRT.Spec.Services)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroupRT {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Services: &vServices,
	}
		vGlobalSvcGroupRTList = append(vGlobalSvcGroupRTList, ret)
	}

	log.Debugf("[getGlobalResourceGroupRTSvcGroupRTResolver]Output SvcGroupRT objects %v", vGlobalSvcGroupRTList)

	return vGlobalSvcGroupRTList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AppGroups Node: ResourceGroup PKG: Global
//////////////////////////////////////
func getGlobalResourceGroupAppGroupsResolver(obj *model.GlobalResourceGroup, id *string) ([]*model.GlobalAppGroup, error) {
	log.Debugf("[getGlobalResourceGroupAppGroupsResolver]Parent Object %+v", obj)
	var vGlobalAppGroupList []*model.GlobalAppGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalResourceGroupAppGroupsResolver]Id %q", *id)
		vAppGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetAppGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalResourceGroupAppGroupsResolver]Error getting AppGroups node %q : %s", *id, err)
            return vGlobalAppGroupList, nil
        }
		dn := vAppGroup.DisplayName()
parentLabels := map[string]interface{}{"appgroups.global.tsm.tanzu.vmware.com":dn}
vRules := string(vAppGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAppGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	Rules: &vRules,
	}
		vGlobalAppGroupList = append(vGlobalAppGroupList, ret)

		log.Debugf("[getGlobalResourceGroupAppGroupsResolver]Output AppGroups objects %v", vGlobalAppGroupList)

		return vGlobalAppGroupList, nil
	}

	log.Debug("[getGlobalResourceGroupAppGroupsResolver]Id is empty, process all AppGroupss")

	vAppGroupParent, err := nc.GlobalRoot().Config().GetResourceGroups(context.TODO(), getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupAppGroupsResolver]Error getting parent node %s", err)
        return vGlobalAppGroupList, nil
    }
	vAppGroupAllObj, err := vAppGroupParent.GetAllAppGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupAppGroupsResolver]Error getting AppGroups objects %s", err)
        return vGlobalAppGroupList, nil
    }
	for _, i := range vAppGroupAllObj {
		vAppGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetAppGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalResourceGroupAppGroupsResolver]Error getting AppGroups node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAppGroup.DisplayName()
parentLabels := map[string]interface{}{"appgroups.global.tsm.tanzu.vmware.com":dn}
vRules := string(vAppGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAppGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	Rules: &vRules,
	}
		vGlobalAppGroupList = append(vGlobalAppGroupList, ret)
	}

	log.Debugf("[getGlobalResourceGroupAppGroupsResolver]Output AppGroups objects %v", vGlobalAppGroupList)

	return vGlobalAppGroupList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: SvcGroups Node: ResourceGroup PKG: Global
//////////////////////////////////////
func getGlobalResourceGroupSvcGroupsResolver(obj *model.GlobalResourceGroup, id *string) ([]*model.GlobalSvcGroup, error) {
	log.Debugf("[getGlobalResourceGroupSvcGroupsResolver]Parent Object %+v", obj)
	var vGlobalSvcGroupList []*model.GlobalSvcGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalResourceGroupSvcGroupsResolver]Id %q", *id)
		vSvcGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalResourceGroupSvcGroupsResolver]Error getting SvcGroups node %q : %s", *id, err)
            return vGlobalSvcGroupList, nil
        }
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)

		log.Debugf("[getGlobalResourceGroupSvcGroupsResolver]Output SvcGroups objects %v", vGlobalSvcGroupList)

		return vGlobalSvcGroupList, nil
	}

	log.Debug("[getGlobalResourceGroupSvcGroupsResolver]Id is empty, process all SvcGroupss")

	vSvcGroupParent, err := nc.GlobalRoot().Config().GetResourceGroups(context.TODO(), getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupSvcGroupsResolver]Error getting parent node %s", err)
        return vGlobalSvcGroupList, nil
    }
	vSvcGroupAllObj, err := vSvcGroupParent.GetAllSvcGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupSvcGroupsResolver]Error getting SvcGroups objects %s", err)
        return vGlobalSvcGroupList, nil
    }
	for _, i := range vSvcGroupAllObj {
		vSvcGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalResourceGroupSvcGroupsResolver]Error getting SvcGroups node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSvcGroup.DisplayName()
parentLabels := map[string]interface{}{"svcgroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vSvcGroup.Spec.DisplayName)
vInternalPredefinedGroup := bool(vSvcGroup.Spec.InternalPredefinedGroup)
vDescription := string(vSvcGroup.Spec.Description)
vColor := string(vSvcGroup.Spec.Color)
vProjectId := string(vSvcGroup.Spec.ProjectId)
vRules := string(vSvcGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSvcGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	InternalPredefinedGroup: &vInternalPredefinedGroup,
	Description: &vDescription,
	Color: &vColor,
	ProjectId: &vProjectId,
	Rules: &vRules,
	}
		vGlobalSvcGroupList = append(vGlobalSvcGroupList, ret)
	}

	log.Debugf("[getGlobalResourceGroupSvcGroupsResolver]Output SvcGroups objects %v", vGlobalSvcGroupList)

	return vGlobalSvcGroupList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: NodeGroups Node: ResourceGroup PKG: Global
//////////////////////////////////////
func getGlobalResourceGroupNodeGroupsResolver(obj *model.GlobalResourceGroup, id *string) ([]*model.GlobalNodeGroup, error) {
	log.Debugf("[getGlobalResourceGroupNodeGroupsResolver]Parent Object %+v", obj)
	var vGlobalNodeGroupList []*model.GlobalNodeGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalResourceGroupNodeGroupsResolver]Id %q", *id)
		vNodeGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetNodeGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalResourceGroupNodeGroupsResolver]Error getting NodeGroups node %q : %s", *id, err)
            return vGlobalNodeGroupList, nil
        }
		dn := vNodeGroup.DisplayName()
parentLabels := map[string]interface{}{"nodegroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vNodeGroup.Spec.DisplayName)
vDescription := string(vNodeGroup.Spec.Description)
vScope := string(vNodeGroup.Spec.Scope)
vColor := string(vNodeGroup.Spec.Color)
vRules := string(vNodeGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNodeGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Scope: &vScope,
	Color: &vColor,
	Rules: &vRules,
	}
		vGlobalNodeGroupList = append(vGlobalNodeGroupList, ret)

		log.Debugf("[getGlobalResourceGroupNodeGroupsResolver]Output NodeGroups objects %v", vGlobalNodeGroupList)

		return vGlobalNodeGroupList, nil
	}

	log.Debug("[getGlobalResourceGroupNodeGroupsResolver]Id is empty, process all NodeGroupss")

	vNodeGroupParent, err := nc.GlobalRoot().Config().GetResourceGroups(context.TODO(), getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupNodeGroupsResolver]Error getting parent node %s", err)
        return vGlobalNodeGroupList, nil
    }
	vNodeGroupAllObj, err := vNodeGroupParent.GetAllNodeGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupNodeGroupsResolver]Error getting NodeGroups objects %s", err)
        return vGlobalNodeGroupList, nil
    }
	for _, i := range vNodeGroupAllObj {
		vNodeGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetNodeGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalResourceGroupNodeGroupsResolver]Error getting NodeGroups node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vNodeGroup.DisplayName()
parentLabels := map[string]interface{}{"nodegroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vNodeGroup.Spec.DisplayName)
vDescription := string(vNodeGroup.Spec.Description)
vScope := string(vNodeGroup.Spec.Scope)
vColor := string(vNodeGroup.Spec.Color)
vRules := string(vNodeGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNodeGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Scope: &vScope,
	Color: &vColor,
	Rules: &vRules,
	}
		vGlobalNodeGroupList = append(vGlobalNodeGroupList, ret)
	}

	log.Debugf("[getGlobalResourceGroupNodeGroupsResolver]Output NodeGroups objects %v", vGlobalNodeGroupList)

	return vGlobalNodeGroupList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: DataGroups Node: ResourceGroup PKG: Global
//////////////////////////////////////
func getGlobalResourceGroupDataGroupsResolver(obj *model.GlobalResourceGroup, id *string) ([]*model.GlobalDataGroup, error) {
	log.Debugf("[getGlobalResourceGroupDataGroupsResolver]Parent Object %+v", obj)
	var vGlobalDataGroupList []*model.GlobalDataGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalResourceGroupDataGroupsResolver]Id %q", *id)
		vDataGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetDataGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalResourceGroupDataGroupsResolver]Error getting DataGroups node %q : %s", *id, err)
            return vGlobalDataGroupList, nil
        }
		dn := vDataGroup.DisplayName()
parentLabels := map[string]interface{}{"datagroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vDataGroup.Spec.DisplayName)
vDescription := string(vDataGroup.Spec.Description)
vScope := string(vDataGroup.Spec.Scope)
vColor := string(vDataGroup.Spec.Color)
vRules := string(vDataGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDataGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Scope: &vScope,
	Color: &vColor,
	Rules: &vRules,
	}
		vGlobalDataGroupList = append(vGlobalDataGroupList, ret)

		log.Debugf("[getGlobalResourceGroupDataGroupsResolver]Output DataGroups objects %v", vGlobalDataGroupList)

		return vGlobalDataGroupList, nil
	}

	log.Debug("[getGlobalResourceGroupDataGroupsResolver]Id is empty, process all DataGroupss")

	vDataGroupParent, err := nc.GlobalRoot().Config().GetResourceGroups(context.TODO(), getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupDataGroupsResolver]Error getting parent node %s", err)
        return vGlobalDataGroupList, nil
    }
	vDataGroupAllObj, err := vDataGroupParent.GetAllDataGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupDataGroupsResolver]Error getting DataGroups objects %s", err)
        return vGlobalDataGroupList, nil
    }
	for _, i := range vDataGroupAllObj {
		vDataGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetDataGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalResourceGroupDataGroupsResolver]Error getting DataGroups node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDataGroup.DisplayName()
parentLabels := map[string]interface{}{"datagroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vDataGroup.Spec.DisplayName)
vDescription := string(vDataGroup.Spec.Description)
vScope := string(vDataGroup.Spec.Scope)
vColor := string(vDataGroup.Spec.Color)
vRules := string(vDataGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDataGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Scope: &vScope,
	Color: &vColor,
	Rules: &vRules,
	}
		vGlobalDataGroupList = append(vGlobalDataGroupList, ret)
	}

	log.Debugf("[getGlobalResourceGroupDataGroupsResolver]Output DataGroups objects %v", vGlobalDataGroupList)

	return vGlobalDataGroupList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: UserGroups Node: ResourceGroup PKG: Global
//////////////////////////////////////
func getGlobalResourceGroupUserGroupsResolver(obj *model.GlobalResourceGroup, id *string) ([]*model.GlobalUserGroup, error) {
	log.Debugf("[getGlobalResourceGroupUserGroupsResolver]Parent Object %+v", obj)
	var vGlobalUserGroupList []*model.GlobalUserGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalResourceGroupUserGroupsResolver]Id %q", *id)
		vUserGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetUserGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalResourceGroupUserGroupsResolver]Error getting UserGroups node %q : %s", *id, err)
            return vGlobalUserGroupList, nil
        }
		dn := vUserGroup.DisplayName()
parentLabels := map[string]interface{}{"usergroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vUserGroup.Spec.DisplayName)
vDescription := string(vUserGroup.Spec.Description)
vScope := string(vUserGroup.Spec.Scope)
vColor := string(vUserGroup.Spec.Color)
vRules := string(vUserGroup.Spec.Rules)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUserGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Scope: &vScope,
	Color: &vColor,
	Rules: &vRules,
	}
		vGlobalUserGroupList = append(vGlobalUserGroupList, ret)

		log.Debugf("[getGlobalResourceGroupUserGroupsResolver]Output UserGroups objects %v", vGlobalUserGroupList)

		return vGlobalUserGroupList, nil
	}

	log.Debug("[getGlobalResourceGroupUserGroupsResolver]Id is empty, process all UserGroupss")

	vUserGroupParent, err := nc.GlobalRoot().Config().GetResourceGroups(context.TODO(), getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupUserGroupsResolver]Error getting parent node %s", err)
        return vGlobalUserGroupList, nil
    }
	vUserGroupAllObj, err := vUserGroupParent.GetAllUserGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalResourceGroupUserGroupsResolver]Error getting UserGroups objects %s", err)
        return vGlobalUserGroupList, nil
    }
	for _, i := range vUserGroupAllObj {
		vUserGroup, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetUserGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalResourceGroupUserGroupsResolver]Error getting UserGroups node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vUserGroup.DisplayName()
parentLabels := map[string]interface{}{"usergroups.global.tsm.tanzu.vmware.com":dn}
vDisplayName := string(vUserGroup.Spec.DisplayName)
vDescription := string(vUserGroup.Spec.Description)
vScope := string(vUserGroup.Spec.Scope)
vColor := string(vUserGroup.Spec.Color)
vRules := string(vUserGroup.Spec.Rules)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUserGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	DisplayName: &vDisplayName,
	Description: &vDescription,
	Scope: &vScope,
	Color: &vColor,
	Rules: &vRules,
	}
		vGlobalUserGroupList = append(vGlobalUserGroupList, ret)
	}

	log.Debugf("[getGlobalResourceGroupUserGroupsResolver]Output UserGroups objects %v", vGlobalUserGroupList)

	return vGlobalUserGroupList, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: Config Node: Root PKG: Global
//////////////////////////////////////
func getGlobalRootConfigResolver(obj *model.GlobalRoot) (*model.GlobalConfig, error) {
	log.Debugf("[getGlobalRootConfigResolver]Parent Object %+v", obj)
	vConfig, err := nc.GlobalRoot().GetConfig(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRootConfigResolver]Error getting Root node %s", err)
        return &model.GlobalConfig{}, nil
    }
	dn := vConfig.DisplayName()
parentLabels := map[string]interface{}{"configs.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRootConfigResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: Inventory Node: Root PKG: Global
//////////////////////////////////////
func getGlobalRootInventoryResolver(obj *model.GlobalRoot) (*model.GlobalInventory, error) {
	log.Debugf("[getGlobalRootInventoryResolver]Parent Object %+v", obj)
	vInventory, err := nc.GlobalRoot().GetInventory(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRootInventoryResolver]Error getting Root node %s", err)
        return &model.GlobalInventory{}, nil
    }
	dn := vInventory.DisplayName()
parentLabels := map[string]interface{}{"inventories.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRootInventoryResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: Runtime Node: Root PKG: Global
//////////////////////////////////////
func getGlobalRootRuntimeResolver(obj *model.GlobalRoot) (*model.GlobalRuntime, error) {
	log.Debugf("[getGlobalRootRuntimeResolver]Parent Object %+v", obj)
	vRuntime, err := nc.GlobalRoot().GetRuntime(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRootRuntimeResolver]Error getting Root node %s", err)
        return &model.GlobalRuntime{}, nil
    }
	dn := vRuntime.DisplayName()
parentLabels := map[string]interface{}{"runtimes.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalRuntime {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRootRuntimeResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: AllsparkServices Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeAllsparkServicesResolver(obj *model.GlobalRuntime) (*model.GlobalAllSparkServices, error) {
	log.Debugf("[getGlobalRuntimeAllsparkServicesResolver]Parent Object %+v", obj)
	vAllSparkServices, err := nc.GlobalRoot().Runtime().GetAllsparkServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeAllsparkServicesResolver]Error getting Runtime node %s", err)
        return &model.GlobalAllSparkServices{}, nil
    }
	dn := vAllSparkServices.DisplayName()
parentLabels := map[string]interface{}{"allsparkserviceses.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalAllSparkServices {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRuntimeAllsparkServicesResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: UserFolder Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeUserFolderResolver(obj *model.GlobalRuntime) (*model.GlobalUserFolder, error) {
	log.Debugf("[getGlobalRuntimeUserFolderResolver]Parent Object %+v", obj)
	vUserFolder, err := nc.GlobalRoot().Runtime().GetUserFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeUserFolderResolver]Error getting Runtime node %s", err)
        return &model.GlobalUserFolder{}, nil
    }
	dn := vUserFolder.DisplayName()
parentLabels := map[string]interface{}{"userfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalUserFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRuntimeUserFolderResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: DataFolder Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeDataFolderResolver(obj *model.GlobalRuntime) (*model.GlobalDataFolder, error) {
	log.Debugf("[getGlobalRuntimeDataFolderResolver]Parent Object %+v", obj)
	vDataFolder, err := nc.GlobalRoot().Runtime().GetDataFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeDataFolderResolver]Error getting Runtime node %s", err)
        return &model.GlobalDataFolder{}, nil
    }
	dn := vDataFolder.DisplayName()
parentLabels := map[string]interface{}{"datafolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalDataFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRuntimeDataFolderResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: AppFolder Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeAppFolderResolver(obj *model.GlobalRuntime, id *string) (*model.GlobalAppFolder, error) {
	log.Debugf("[getGlobalRuntimeAppFolderResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalRuntimeAppFolderResolver]Id %q", *id)
		vAppFolder, err := nc.GlobalRoot().Runtime().GetAppFolder(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalRuntimeAppFolderResolver]Error getting AppFolder node %q : %s", *id, err)
			return &model.GlobalAppFolder{}, nil
		}
		dn := vAppFolder.DisplayName()
parentLabels := map[string]interface{}{"appfolders.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalAppFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalRuntimeAppFolderResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalRuntimeAppFolderResolver]Id is empty, process all AppFolders")
	vAppFolderParent, err := nc.GlobalRoot().GetRuntime(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeAppFolderResolver]Failed to get parent node %s", err)
        return &model.GlobalAppFolder{}, nil
    }
	vAppFolder, err := vAppFolderParent.GetAppFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeAppFolderResolver]Error getting AppFolder node %s", err)
        return &model.GlobalAppFolder{}, nil
    }
	dn := vAppFolder.DisplayName()
parentLabels := map[string]interface{}{"appfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalAppFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalRuntimeAppFolderResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: NodeFolder Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeNodeFolderResolver(obj *model.GlobalRuntime) (*model.GlobalNodeFolder, error) {
	log.Debugf("[getGlobalRuntimeNodeFolderResolver]Parent Object %+v", obj)
	vNodeFolder, err := nc.GlobalRoot().Runtime().GetNodeFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeNodeFolderResolver]Error getting Runtime node %s", err)
        return &model.GlobalNodeFolder{}, nil
    }
	dn := vNodeFolder.DisplayName()
parentLabels := map[string]interface{}{"nodefolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalNodeFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRuntimeNodeFolderResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: ClusterFolder Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeClusterFolderResolver(obj *model.GlobalRuntime, id *string) (*model.GlobalClusterFolder, error) {
	log.Debugf("[getGlobalRuntimeClusterFolderResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalRuntimeClusterFolderResolver]Id %q", *id)
		vClusterFolder, err := nc.GlobalRoot().Runtime().GetClusterFolder(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalRuntimeClusterFolderResolver]Error getting ClusterFolder node %q : %s", *id, err)
			return &model.GlobalClusterFolder{}, nil
		}
		dn := vClusterFolder.DisplayName()
parentLabels := map[string]interface{}{"clusterfolders.global.tsm.tanzu.vmware.com":dn}
vName := string(vClusterFolder.Spec.Name)

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalClusterFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}

		log.Debugf("[getGlobalRuntimeClusterFolderResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalRuntimeClusterFolderResolver]Id is empty, process all ClusterFolders")
	vClusterFolderParent, err := nc.GlobalRoot().GetRuntime(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeClusterFolderResolver]Failed to get parent node %s", err)
        return &model.GlobalClusterFolder{}, nil
    }
	vClusterFolder, err := vClusterFolderParent.GetClusterFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeClusterFolderResolver]Error getting ClusterFolder node %s", err)
        return &model.GlobalClusterFolder{}, nil
    }
	dn := vClusterFolder.DisplayName()
parentLabels := map[string]interface{}{"clusterfolders.global.tsm.tanzu.vmware.com":dn}
vName := string(vClusterFolder.Spec.Name)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalClusterFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}

	log.Debugf("[getGlobalRuntimeClusterFolderResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: ProgressiveUpgrade Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeProgressiveUpgradeResolver(obj *model.GlobalRuntime) (*model.GlobalProgressiveUpgradeFolder, error) {
	log.Debugf("[getGlobalRuntimeProgressiveUpgradeResolver]Parent Object %+v", obj)
	vProgressiveUpgradeFolder, err := nc.GlobalRoot().Runtime().GetProgressiveUpgrade(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeProgressiveUpgradeResolver]Error getting Runtime node %s", err)
        return &model.GlobalProgressiveUpgradeFolder{}, nil
    }
	dn := vProgressiveUpgradeFolder.DisplayName()
parentLabels := map[string]interface{}{"progressiveupgradefolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalProgressiveUpgradeFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRuntimeProgressiveUpgradeResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: JobConfigFolder Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeJobConfigFolderResolver(obj *model.GlobalRuntime) (*model.GlobalJobConfigFolder, error) {
	log.Debugf("[getGlobalRuntimeJobConfigFolderResolver]Parent Object %+v", obj)
	vJobConfigFolder, err := nc.GlobalRoot().Runtime().GetJobConfigFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeJobConfigFolderResolver]Error getting Runtime node %s", err)
        return &model.GlobalJobConfigFolder{}, nil
    }
	dn := vJobConfigFolder.DisplayName()
parentLabels := map[string]interface{}{"jobconfigfolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalJobConfigFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRuntimeJobConfigFolderResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: ExternalDNS Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeExternalDNSResolver(obj *model.GlobalRuntime) (*model.GlobalExternalDNSRuntime, error) {
	log.Debugf("[getGlobalRuntimeExternalDNSResolver]Parent Object %+v", obj)
	vExternalDNSRuntime, err := nc.GlobalRoot().Runtime().GetExternalDNS(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeExternalDNSResolver]Error getting Runtime node %s", err)
        return &model.GlobalExternalDNSRuntime{}, nil
    }
	dn := vExternalDNSRuntime.DisplayName()
parentLabels := map[string]interface{}{"externaldnsruntimes.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalExternalDNSRuntime {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRuntimeExternalDNSResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: SloFolder Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeSloFolderResolver(obj *model.GlobalRuntime, id *string) (*model.GlobalSLOFolder, error) {
	log.Debugf("[getGlobalRuntimeSloFolderResolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[getGlobalRuntimeSloFolderResolver]Id %q", *id)
		vSLOFolder, err := nc.GlobalRoot().Runtime().GetSloFolder(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalRuntimeSloFolderResolver]Error getting SloFolder node %q : %s", *id, err)
			return &model.GlobalSLOFolder{}, nil
		}
		dn := vSLOFolder.DisplayName()
parentLabels := map[string]interface{}{"slofolders.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		ret := &model.GlobalSLOFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

		log.Debugf("[getGlobalRuntimeSloFolderResolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[getGlobalRuntimeSloFolderResolver]Id is empty, process all SloFolders")
	vSLOFolderParent, err := nc.GlobalRoot().GetRuntime(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeSloFolderResolver]Failed to get parent node %s", err)
        return &model.GlobalSLOFolder{}, nil
    }
	vSLOFolder, err := vSLOFolderParent.GetSloFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeSloFolderResolver]Error getting SloFolder node %s", err)
        return &model.GlobalSLOFolder{}, nil
    }
	dn := vSLOFolder.DisplayName()
parentLabels := map[string]interface{}{"slofolders.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalSLOFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	}

	log.Debugf("[getGlobalRuntimeSloFolderResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: ServiceDirectoryRT Node: Runtime PKG: Global
//////////////////////////////////////
func getGlobalRuntimeServiceDirectoryRTResolver(obj *model.GlobalRuntime) (*model.GlobalServiceDirectoryRT, error) {
	log.Debugf("[getGlobalRuntimeServiceDirectoryRTResolver]Parent Object %+v", obj)
	vServiceDirectoryRT, err := nc.GlobalRoot().Runtime().GetServiceDirectoryRT(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalRuntimeServiceDirectoryRTResolver]Error getting Runtime node %s", err)
        return &model.GlobalServiceDirectoryRT{}, nil
    }
	dn := vServiceDirectoryRT.DisplayName()
parentLabels := map[string]interface{}{"servicedirectoryrts.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalServiceDirectoryRT {
	Id: &dn,
	ParentLabels: parentLabels,
	}

    log.Debugf("[getGlobalRuntimeServiceDirectoryRTResolver]Output object %+v", ret)
	return ret, nil
}
//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceVersion Node: ServiceConfig PKG: Global
//////////////////////////////////////
func getGlobalServiceConfigServiceVersionResolver(obj *model.GlobalServiceConfig, id *string) ([]*model.GlobalServiceVersionConfig, error) {
	log.Debugf("[getGlobalServiceConfigServiceVersionResolver]Parent Object %+v", obj)
	var vGlobalServiceVersionConfigList []*model.GlobalServiceVersionConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceConfigServiceVersionResolver]Id %q", *id)
		vServiceVersionConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "serviceconfigs.global.tsm.tanzu.vmware.com")).GetServiceVersion(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceConfigServiceVersionResolver]Error getting ServiceVersion node %q : %s", *id, err)
            return vGlobalServiceVersionConfigList, nil
        }
		dn := vServiceVersionConfig.DisplayName()
parentLabels := map[string]interface{}{"serviceversionconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceVersionConfig.Spec.Name)
vVersion := string(vServiceVersionConfig.Spec.Version)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceVersionConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Version: &vVersion,
	}
		vGlobalServiceVersionConfigList = append(vGlobalServiceVersionConfigList, ret)

		log.Debugf("[getGlobalServiceConfigServiceVersionResolver]Output ServiceVersion objects %v", vGlobalServiceVersionConfigList)

		return vGlobalServiceVersionConfigList, nil
	}

	log.Debug("[getGlobalServiceConfigServiceVersionResolver]Id is empty, process all ServiceVersions")

	vServiceVersionConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "serviceconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceConfigServiceVersionResolver]Error getting parent node %s", err)
        return vGlobalServiceVersionConfigList, nil
    }
	vServiceVersionConfigAllObj, err := vServiceVersionConfigParent.GetAllServiceVersion(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceConfigServiceVersionResolver]Error getting ServiceVersion objects %s", err)
        return vGlobalServiceVersionConfigList, nil
    }
	for _, i := range vServiceVersionConfigAllObj {
		vServiceVersionConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "serviceconfigs.global.tsm.tanzu.vmware.com")).GetServiceVersion(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceConfigServiceVersionResolver]Error getting ServiceVersion node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceVersionConfig.DisplayName()
parentLabels := map[string]interface{}{"serviceversionconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceVersionConfig.Spec.Name)
vVersion := string(vServiceVersionConfig.Spec.Version)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceVersionConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Version: &vVersion,
	}
		vGlobalServiceVersionConfigList = append(vGlobalServiceVersionConfigList, ret)
	}

	log.Debugf("[getGlobalServiceConfigServiceVersionResolver]Output ServiceVersion objects %v", vGlobalServiceVersionConfigList)

	return vGlobalServiceVersionConfigList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceInstances Node: ServiceCronJob PKG: Global
//////////////////////////////////////
func getGlobalServiceCronJobServiceInstancesResolver(obj *model.GlobalServiceCronJob, id *string) ([]*model.GlobalServiceInstance, error) {
	log.Debugf("[getGlobalServiceCronJobServiceInstancesResolver]Parent Object %+v", obj)
	var vGlobalServiceInstanceList []*model.GlobalServiceInstance
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceCronJobServiceInstancesResolver]Id %q", *id)
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceCronJobs(context.TODO(), getParentName(obj.ParentLabels, "servicecronjobs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceCronJobServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceCronJobServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)

		log.Debugf("[getGlobalServiceCronJobServiceInstancesResolver]Output ServiceInstances objects %v", vGlobalServiceInstanceList)

		return vGlobalServiceInstanceList, nil
	}

	log.Debug("[getGlobalServiceCronJobServiceInstancesResolver]Id is empty, process all ServiceInstancess")

	vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceCronJobs(context.TODO(), getParentName(obj.ParentLabels, "servicecronjobs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceCronJobServiceInstancesResolver]Error getting parent node %s", err)
        return vGlobalServiceInstanceList, nil
    }
	vServiceInstanceAllObj, err := vServiceInstanceParent.GetAllServiceInstances(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceCronJobServiceInstancesResolver]Error getting ServiceInstances %s", err)
        return vGlobalServiceInstanceList, nil
    }
	for _, i := range vServiceInstanceAllObj {
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceCronJobs(context.TODO(), getParentName(obj.ParentLabels, "servicecronjobs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceCronJobServiceInstancesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceCronJobServiceInstancesResolver]Error getting ServiceInstances node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)
	}
	log.Debugf("[getGlobalServiceCronJobServiceInstancesResolver]List of ServiceInstances object %v", vGlobalServiceInstanceList)
	return vGlobalServiceInstanceList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceJobs Node: ServiceCronJob PKG: Global
//////////////////////////////////////
func getGlobalServiceCronJobServiceJobsResolver(obj *model.GlobalServiceCronJob, id *string) ([]*model.GlobalServiceJob, error) {
	log.Debugf("[getGlobalServiceCronJobServiceJobsResolver]Parent Object %+v", obj)
	var vGlobalServiceJobList []*model.GlobalServiceJob
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceCronJobServiceJobsResolver]Id %q", *id)
		vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceCronJobs(context.TODO(), getParentName(obj.ParentLabels, "servicecronjobs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceCronJobServiceJobsResolver]Error getting ServiceJobs %q : %s", *id, err)
			return vGlobalServiceJobList, nil
		}
		vServiceJob, err := vServiceJobParent.GetServiceJobs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceCronJobServiceJobsResolver]Error getting ServiceJobs %q : %s", *id, err)
			return vGlobalServiceJobList, nil
		}
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)

		log.Debugf("[getGlobalServiceCronJobServiceJobsResolver]Output ServiceJobs objects %v", vGlobalServiceJobList)

		return vGlobalServiceJobList, nil
	}

	log.Debug("[getGlobalServiceCronJobServiceJobsResolver]Id is empty, process all ServiceJobss")

	vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceCronJobs(context.TODO(), getParentName(obj.ParentLabels, "servicecronjobs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceCronJobServiceJobsResolver]Error getting parent node %s", err)
        return vGlobalServiceJobList, nil
    }
	vServiceJobAllObj, err := vServiceJobParent.GetAllServiceJobs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceCronJobServiceJobsResolver]Error getting ServiceJobs %s", err)
        return vGlobalServiceJobList, nil
    }
	for _, i := range vServiceJobAllObj {
		vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceCronJobs(context.TODO(), getParentName(obj.ParentLabels, "servicecronjobs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceCronJobServiceJobsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceJob, err := vServiceJobParent.GetServiceJobs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceCronJobServiceJobsResolver]Error getting ServiceJobs node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)
	}
	log.Debugf("[getGlobalServiceCronJobServiceJobsResolver]List of ServiceJobs object %v", vGlobalServiceJobList)
	return vGlobalServiceJobList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceInstances Node: ServiceDaemonSet PKG: Global
//////////////////////////////////////
func getGlobalServiceDaemonSetServiceInstancesResolver(obj *model.GlobalServiceDaemonSet, id *string) ([]*model.GlobalServiceInstance, error) {
	log.Debugf("[getGlobalServiceDaemonSetServiceInstancesResolver]Parent Object %+v", obj)
	var vGlobalServiceInstanceList []*model.GlobalServiceInstance
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceDaemonSetServiceInstancesResolver]Id %q", *id)
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDaemonSets(context.TODO(), getParentName(obj.ParentLabels, "servicedaemonsets.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceDaemonSetServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceDaemonSetServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)

		log.Debugf("[getGlobalServiceDaemonSetServiceInstancesResolver]Output ServiceInstances objects %v", vGlobalServiceInstanceList)

		return vGlobalServiceInstanceList, nil
	}

	log.Debug("[getGlobalServiceDaemonSetServiceInstancesResolver]Id is empty, process all ServiceInstancess")

	vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDaemonSets(context.TODO(), getParentName(obj.ParentLabels, "servicedaemonsets.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceDaemonSetServiceInstancesResolver]Error getting parent node %s", err)
        return vGlobalServiceInstanceList, nil
    }
	vServiceInstanceAllObj, err := vServiceInstanceParent.GetAllServiceInstances(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceDaemonSetServiceInstancesResolver]Error getting ServiceInstances %s", err)
        return vGlobalServiceInstanceList, nil
    }
	for _, i := range vServiceInstanceAllObj {
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDaemonSets(context.TODO(), getParentName(obj.ParentLabels, "servicedaemonsets.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceDaemonSetServiceInstancesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceDaemonSetServiceInstancesResolver]Error getting ServiceInstances node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)
	}
	log.Debugf("[getGlobalServiceDaemonSetServiceInstancesResolver]List of ServiceInstances object %v", vGlobalServiceInstanceList)
	return vGlobalServiceInstanceList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Containers Node: ServiceDeployment PKG: Global
//////////////////////////////////////
func getGlobalServiceDeploymentContainersResolver(obj *model.GlobalServiceDeployment, id *string) ([]*model.GlobalServiceDeploymentContainer, error) {
	log.Debugf("[getGlobalServiceDeploymentContainersResolver]Parent Object %+v", obj)
	var vGlobalServiceDeploymentContainerList []*model.GlobalServiceDeploymentContainer
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceDeploymentContainersResolver]Id %q", *id)
		vServiceDeploymentContainer, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).ServiceDeployments(getParentName(obj.ParentLabels, "servicedeployments.global.tsm.tanzu.vmware.com")).GetContainers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceDeploymentContainersResolver]Error getting Containers node %q : %s", *id, err)
            return vGlobalServiceDeploymentContainerList, nil
        }
		dn := vServiceDeploymentContainer.DisplayName()
parentLabels := map[string]interface{}{"servicedeploymentcontainers.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDeploymentContainer.Spec.Name)
vImage := string(vServiceDeploymentContainer.Spec.Image)
vImagePullPolicy := string(vServiceDeploymentContainer.Spec.ImagePullPolicy)
vTerminationMessagePath := string(vServiceDeploymentContainer.Spec.TerminationMessagePath)
vTerminationMessagePolicy := string(vServiceDeploymentContainer.Spec.TerminationMessagePolicy)
vArgs := string(vServiceDeploymentContainer.Spec.Args)
vEnv := string(vServiceDeploymentContainer.Spec.Env)
vLivenessProbe := string(vServiceDeploymentContainer.Spec.LivenessProbe)
vReadinessProbe := string(vServiceDeploymentContainer.Spec.ReadinessProbe)
vPorts := string(vServiceDeploymentContainer.Spec.Ports)
vResources := string(vServiceDeploymentContainer.Spec.Resources)
vVolumeMounts := string(vServiceDeploymentContainer.Spec.VolumeMounts)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeploymentContainer {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Image: &vImage,
	ImagePullPolicy: &vImagePullPolicy,
	TerminationMessagePath: &vTerminationMessagePath,
	TerminationMessagePolicy: &vTerminationMessagePolicy,
	Args: &vArgs,
	Env: &vEnv,
	LivenessProbe: &vLivenessProbe,
	ReadinessProbe: &vReadinessProbe,
	Ports: &vPorts,
	Resources: &vResources,
	VolumeMounts: &vVolumeMounts,
	}
		vGlobalServiceDeploymentContainerList = append(vGlobalServiceDeploymentContainerList, ret)

		log.Debugf("[getGlobalServiceDeploymentContainersResolver]Output Containers objects %v", vGlobalServiceDeploymentContainerList)

		return vGlobalServiceDeploymentContainerList, nil
	}

	log.Debug("[getGlobalServiceDeploymentContainersResolver]Id is empty, process all Containerss")

	vServiceDeploymentContainerParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDeployments(context.TODO(), getParentName(obj.ParentLabels, "servicedeployments.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceDeploymentContainersResolver]Error getting parent node %s", err)
        return vGlobalServiceDeploymentContainerList, nil
    }
	vServiceDeploymentContainerAllObj, err := vServiceDeploymentContainerParent.GetAllContainers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceDeploymentContainersResolver]Error getting Containers objects %s", err)
        return vGlobalServiceDeploymentContainerList, nil
    }
	for _, i := range vServiceDeploymentContainerAllObj {
		vServiceDeploymentContainer, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).ServiceDeployments(getParentName(obj.ParentLabels, "servicedeployments.global.tsm.tanzu.vmware.com")).GetContainers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceDeploymentContainersResolver]Error getting Containers node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceDeploymentContainer.DisplayName()
parentLabels := map[string]interface{}{"servicedeploymentcontainers.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDeploymentContainer.Spec.Name)
vImage := string(vServiceDeploymentContainer.Spec.Image)
vImagePullPolicy := string(vServiceDeploymentContainer.Spec.ImagePullPolicy)
vTerminationMessagePath := string(vServiceDeploymentContainer.Spec.TerminationMessagePath)
vTerminationMessagePolicy := string(vServiceDeploymentContainer.Spec.TerminationMessagePolicy)
vArgs := string(vServiceDeploymentContainer.Spec.Args)
vEnv := string(vServiceDeploymentContainer.Spec.Env)
vLivenessProbe := string(vServiceDeploymentContainer.Spec.LivenessProbe)
vReadinessProbe := string(vServiceDeploymentContainer.Spec.ReadinessProbe)
vPorts := string(vServiceDeploymentContainer.Spec.Ports)
vResources := string(vServiceDeploymentContainer.Spec.Resources)
vVolumeMounts := string(vServiceDeploymentContainer.Spec.VolumeMounts)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeploymentContainer {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Image: &vImage,
	ImagePullPolicy: &vImagePullPolicy,
	TerminationMessagePath: &vTerminationMessagePath,
	TerminationMessagePolicy: &vTerminationMessagePolicy,
	Args: &vArgs,
	Env: &vEnv,
	LivenessProbe: &vLivenessProbe,
	ReadinessProbe: &vReadinessProbe,
	Ports: &vPorts,
	Resources: &vResources,
	VolumeMounts: &vVolumeMounts,
	}
		vGlobalServiceDeploymentContainerList = append(vGlobalServiceDeploymentContainerList, ret)
	}

	log.Debugf("[getGlobalServiceDeploymentContainersResolver]Output Containers objects %v", vGlobalServiceDeploymentContainerList)

	return vGlobalServiceDeploymentContainerList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceInstances Node: ServiceDeployment PKG: Global
//////////////////////////////////////
func getGlobalServiceDeploymentServiceInstancesResolver(obj *model.GlobalServiceDeployment, id *string) ([]*model.GlobalServiceInstance, error) {
	log.Debugf("[getGlobalServiceDeploymentServiceInstancesResolver]Parent Object %+v", obj)
	var vGlobalServiceInstanceList []*model.GlobalServiceInstance
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceDeploymentServiceInstancesResolver]Id %q", *id)
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDeployments(context.TODO(), getParentName(obj.ParentLabels, "servicedeployments.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceDeploymentServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceDeploymentServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)

		log.Debugf("[getGlobalServiceDeploymentServiceInstancesResolver]Output ServiceInstances objects %v", vGlobalServiceInstanceList)

		return vGlobalServiceInstanceList, nil
	}

	log.Debug("[getGlobalServiceDeploymentServiceInstancesResolver]Id is empty, process all ServiceInstancess")

	vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDeployments(context.TODO(), getParentName(obj.ParentLabels, "servicedeployments.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceDeploymentServiceInstancesResolver]Error getting parent node %s", err)
        return vGlobalServiceInstanceList, nil
    }
	vServiceInstanceAllObj, err := vServiceInstanceParent.GetAllServiceInstances(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceDeploymentServiceInstancesResolver]Error getting ServiceInstances %s", err)
        return vGlobalServiceInstanceList, nil
    }
	for _, i := range vServiceInstanceAllObj {
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDeployments(context.TODO(), getParentName(obj.ParentLabels, "servicedeployments.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceDeploymentServiceInstancesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceDeploymentServiceInstancesResolver]Error getting ServiceInstances node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)
	}
	log.Debugf("[getGlobalServiceDeploymentServiceInstancesResolver]List of ServiceInstances object %v", vGlobalServiceInstanceList)
	return vGlobalServiceInstanceList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceReplicaSet Node: ServiceDeployment PKG: Global
//////////////////////////////////////
func getGlobalServiceDeploymentServiceReplicaSetResolver(obj *model.GlobalServiceDeployment, id *string) ([]*model.GlobalServiceReplicaSet, error) {
	log.Debugf("[getGlobalServiceDeploymentServiceReplicaSetResolver]Parent Object %+v", obj)
	var vGlobalServiceReplicaSetList []*model.GlobalServiceReplicaSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceDeploymentServiceReplicaSetResolver]Id %q", *id)
		vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDeployments(context.TODO(), getParentName(obj.ParentLabels, "servicedeployments.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceDeploymentServiceReplicaSetResolver]Error getting ServiceReplicaSet %q : %s", *id, err)
			return vGlobalServiceReplicaSetList, nil
		}
		vServiceReplicaSet, err := vServiceReplicaSetParent.GetServiceReplicaSet(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceDeploymentServiceReplicaSetResolver]Error getting ServiceReplicaSet %q : %s", *id, err)
			return vGlobalServiceReplicaSetList, nil
		}
		dn := vServiceReplicaSet.DisplayName()
parentLabels := map[string]interface{}{"servicereplicasets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceReplicaSet.Spec.Name)
vMetadata := string(vServiceReplicaSet.Spec.Metadata)
vSpec := string(vServiceReplicaSet.Spec.Spec)
vStatus := string(vServiceReplicaSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceReplicaSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceReplicaSetList = append(vGlobalServiceReplicaSetList, ret)

		log.Debugf("[getGlobalServiceDeploymentServiceReplicaSetResolver]Output ServiceReplicaSet objects %v", vGlobalServiceReplicaSetList)

		return vGlobalServiceReplicaSetList, nil
	}

	log.Debug("[getGlobalServiceDeploymentServiceReplicaSetResolver]Id is empty, process all ServiceReplicaSets")

	vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDeployments(context.TODO(), getParentName(obj.ParentLabels, "servicedeployments.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceDeploymentServiceReplicaSetResolver]Error getting parent node %s", err)
        return vGlobalServiceReplicaSetList, nil
    }
	vServiceReplicaSetAllObj, err := vServiceReplicaSetParent.GetAllServiceReplicaSet(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceDeploymentServiceReplicaSetResolver]Error getting ServiceReplicaSet %s", err)
        return vGlobalServiceReplicaSetList, nil
    }
	for _, i := range vServiceReplicaSetAllObj {
		vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceDeployments(context.TODO(), getParentName(obj.ParentLabels, "servicedeployments.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceDeploymentServiceReplicaSetResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceReplicaSet, err := vServiceReplicaSetParent.GetServiceReplicaSet(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceDeploymentServiceReplicaSetResolver]Error getting ServiceReplicaSet node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceReplicaSet.DisplayName()
parentLabels := map[string]interface{}{"servicereplicasets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceReplicaSet.Spec.Name)
vMetadata := string(vServiceReplicaSet.Spec.Metadata)
vSpec := string(vServiceReplicaSet.Spec.Spec)
vStatus := string(vServiceReplicaSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceReplicaSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceReplicaSetList = append(vGlobalServiceReplicaSetList, ret)
	}
	log.Debugf("[getGlobalServiceDeploymentServiceReplicaSetResolver]List of ServiceReplicaSet object %v", vGlobalServiceReplicaSetList)
	return vGlobalServiceReplicaSetList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceDirectoryRTFolderEntry Node: ServiceDirectoryRTFolder PKG: Global
//////////////////////////////////////
func getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver(obj *model.GlobalServiceDirectoryRTFolder, id *string) ([]*model.GlobalServiceDirectoryRTFolderEntry, error) {
	log.Debugf("[getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver]Parent Object %+v", obj)
	var vGlobalServiceDirectoryRTFolderEntryList []*model.GlobalServiceDirectoryRTFolderEntry
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver]Id %q", *id)
		vServiceDirectoryRTFolderEntry, err := nc.GlobalRoot().Runtime().ServiceDirectoryRT().ServiceDirectoryRTFolder(getParentName(obj.ParentLabels, "servicedirectoryrtfolders.global.tsm.tanzu.vmware.com")).GetServiceDirectoryRTFolderEntry(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver]Error getting ServiceDirectoryRTFolderEntry node %q : %s", *id, err)
            return vGlobalServiceDirectoryRTFolderEntryList, nil
        }
		dn := vServiceDirectoryRTFolderEntry.DisplayName()
parentLabels := map[string]interface{}{"servicedirectoryrtfolderentries.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vServiceDirectoryRTFolderEntry.Spec.Spec)
vSpec_type := string(vServiceDirectoryRTFolderEntry.Spec.Spec_type)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDirectoryRTFolderEntry {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	Spec_type: &vSpec_type,
	}
		vGlobalServiceDirectoryRTFolderEntryList = append(vGlobalServiceDirectoryRTFolderEntryList, ret)

		log.Debugf("[getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver]Output ServiceDirectoryRTFolderEntry objects %v", vGlobalServiceDirectoryRTFolderEntryList)

		return vGlobalServiceDirectoryRTFolderEntryList, nil
	}

	log.Debug("[getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver]Id is empty, process all ServiceDirectoryRTFolderEntrys")

	vServiceDirectoryRTFolderEntryParent, err := nc.GlobalRoot().Runtime().ServiceDirectoryRT().GetServiceDirectoryRTFolder(context.TODO(), getParentName(obj.ParentLabels, "servicedirectoryrtfolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver]Error getting parent node %s", err)
        return vGlobalServiceDirectoryRTFolderEntryList, nil
    }
	vServiceDirectoryRTFolderEntryAllObj, err := vServiceDirectoryRTFolderEntryParent.GetAllServiceDirectoryRTFolderEntry(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver]Error getting ServiceDirectoryRTFolderEntry objects %s", err)
        return vGlobalServiceDirectoryRTFolderEntryList, nil
    }
	for _, i := range vServiceDirectoryRTFolderEntryAllObj {
		vServiceDirectoryRTFolderEntry, err := nc.GlobalRoot().Runtime().ServiceDirectoryRT().ServiceDirectoryRTFolder(getParentName(obj.ParentLabels, "servicedirectoryrtfolders.global.tsm.tanzu.vmware.com")).GetServiceDirectoryRTFolderEntry(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver]Error getting ServiceDirectoryRTFolderEntry node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceDirectoryRTFolderEntry.DisplayName()
parentLabels := map[string]interface{}{"servicedirectoryrtfolderentries.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vServiceDirectoryRTFolderEntry.Spec.Spec)
vSpec_type := string(vServiceDirectoryRTFolderEntry.Spec.Spec_type)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDirectoryRTFolderEntry {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	Spec_type: &vSpec_type,
	}
		vGlobalServiceDirectoryRTFolderEntryList = append(vGlobalServiceDirectoryRTFolderEntryList, ret)
	}

	log.Debugf("[getGlobalServiceDirectoryRTFolderServiceDirectoryRTFolderEntryResolver]Output ServiceDirectoryRTFolderEntry objects %v", vGlobalServiceDirectoryRTFolderEntryList)

	return vGlobalServiceDirectoryRTFolderEntryList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceDirectoryRTFolder Node: ServiceDirectoryRT PKG: Global
//////////////////////////////////////
func getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver(obj *model.GlobalServiceDirectoryRT, id *string) ([]*model.GlobalServiceDirectoryRTFolder, error) {
	log.Debugf("[getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver]Parent Object %+v", obj)
	var vGlobalServiceDirectoryRTFolderList []*model.GlobalServiceDirectoryRTFolder
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver]Id %q", *id)
		vServiceDirectoryRTFolder, err := nc.GlobalRoot().Runtime().ServiceDirectoryRT().GetServiceDirectoryRTFolder(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver]Error getting ServiceDirectoryRTFolder node %q : %s", *id, err)
            return vGlobalServiceDirectoryRTFolderList, nil
        }
		dn := vServiceDirectoryRTFolder.DisplayName()
parentLabels := map[string]interface{}{"servicedirectoryrtfolders.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDirectoryRTFolder.Spec.Name)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDirectoryRTFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalServiceDirectoryRTFolderList = append(vGlobalServiceDirectoryRTFolderList, ret)

		log.Debugf("[getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver]Output ServiceDirectoryRTFolder objects %v", vGlobalServiceDirectoryRTFolderList)

		return vGlobalServiceDirectoryRTFolderList, nil
	}

	log.Debug("[getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver]Id is empty, process all ServiceDirectoryRTFolders")

	vServiceDirectoryRTFolderParent, err := nc.GlobalRoot().Runtime().GetServiceDirectoryRT(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver]Error getting parent node %s", err)
        return vGlobalServiceDirectoryRTFolderList, nil
    }
	vServiceDirectoryRTFolderAllObj, err := vServiceDirectoryRTFolderParent.GetAllServiceDirectoryRTFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver]Error getting ServiceDirectoryRTFolder objects %s", err)
        return vGlobalServiceDirectoryRTFolderList, nil
    }
	for _, i := range vServiceDirectoryRTFolderAllObj {
		vServiceDirectoryRTFolder, err := nc.GlobalRoot().Runtime().ServiceDirectoryRT().GetServiceDirectoryRTFolder(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver]Error getting ServiceDirectoryRTFolder node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceDirectoryRTFolder.DisplayName()
parentLabels := map[string]interface{}{"servicedirectoryrtfolders.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDirectoryRTFolder.Spec.Name)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDirectoryRTFolder {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalServiceDirectoryRTFolderList = append(vGlobalServiceDirectoryRTFolderList, ret)
	}

	log.Debugf("[getGlobalServiceDirectoryRTServiceDirectoryRTFolderResolver]Output ServiceDirectoryRTFolder objects %v", vGlobalServiceDirectoryRTFolderList)

	return vGlobalServiceDirectoryRTFolderList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Entries Node: ServiceDirectoryN PKG: Global
//////////////////////////////////////
func getGlobalServiceDirectoryNEntriesResolver(obj *model.GlobalServiceDirectoryN, id *string) ([]*model.GlobalServiceDirectoryEntryConfig, error) {
	log.Debugf("[getGlobalServiceDirectoryNEntriesResolver]Parent Object %+v", obj)
	var vGlobalServiceDirectoryEntryConfigList []*model.GlobalServiceDirectoryEntryConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceDirectoryNEntriesResolver]Id %q", *id)
		vServiceDirectoryEntryConfig, err := nc.GlobalRoot().Config().ServiceDirectory(getParentName(obj.ParentLabels, "servicedirectoryns.global.tsm.tanzu.vmware.com")).GetEntries(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceDirectoryNEntriesResolver]Error getting Entries node %q : %s", *id, err)
            return vGlobalServiceDirectoryEntryConfigList, nil
        }
		dn := vServiceDirectoryEntryConfig.DisplayName()
parentLabels := map[string]interface{}{"servicedirectoryentryconfigs.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vServiceDirectoryEntryConfig.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDirectoryEntryConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	}
		vGlobalServiceDirectoryEntryConfigList = append(vGlobalServiceDirectoryEntryConfigList, ret)

		log.Debugf("[getGlobalServiceDirectoryNEntriesResolver]Output Entries objects %v", vGlobalServiceDirectoryEntryConfigList)

		return vGlobalServiceDirectoryEntryConfigList, nil
	}

	log.Debug("[getGlobalServiceDirectoryNEntriesResolver]Id is empty, process all Entriess")

	vServiceDirectoryEntryConfigParent, err := nc.GlobalRoot().Config().GetServiceDirectory(context.TODO(), getParentName(obj.ParentLabels, "servicedirectoryns.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceDirectoryNEntriesResolver]Error getting parent node %s", err)
        return vGlobalServiceDirectoryEntryConfigList, nil
    }
	vServiceDirectoryEntryConfigAllObj, err := vServiceDirectoryEntryConfigParent.GetAllEntries(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceDirectoryNEntriesResolver]Error getting Entries objects %s", err)
        return vGlobalServiceDirectoryEntryConfigList, nil
    }
	for _, i := range vServiceDirectoryEntryConfigAllObj {
		vServiceDirectoryEntryConfig, err := nc.GlobalRoot().Config().ServiceDirectory(getParentName(obj.ParentLabels, "servicedirectoryns.global.tsm.tanzu.vmware.com")).GetEntries(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceDirectoryNEntriesResolver]Error getting Entries node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceDirectoryEntryConfig.DisplayName()
parentLabels := map[string]interface{}{"servicedirectoryentryconfigs.global.tsm.tanzu.vmware.com":dn}
vSpec := string(vServiceDirectoryEntryConfig.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDirectoryEntryConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Spec: &vSpec,
	}
		vGlobalServiceDirectoryEntryConfigList = append(vGlobalServiceDirectoryEntryConfigList, ret)
	}

	log.Debugf("[getGlobalServiceDirectoryNEntriesResolver]Output Entries objects %v", vGlobalServiceDirectoryEntryConfigList)

	return vGlobalServiceDirectoryEntryConfigList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Node Node: ServiceInstance PKG: Global
//////////////////////////////////////
func getGlobalServiceInstanceNodeResolver(obj *model.GlobalServiceInstance) (*model.GlobalNode, error) {
    log.Debugf("[getGlobalServiceInstanceNodeResolver]Parent Object %+v", obj)
	vNodeParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceInstances(context.TODO(), getParentName(obj.ParentLabels, "serviceinstances.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceInstanceNodeResolver]Error getting parent node %s", err)
        return &model.GlobalNode{}, nil
    }
	vNode, err := vNodeParent.GetNode(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalServiceInstanceNodeResolver]Error getting Node object %s", err)
        return &model.GlobalNode{}, nil
    }
	dn := vNode.DisplayName()
parentLabels := map[string]interface{}{"nodes.global.tsm.tanzu.vmware.com":dn}
vName := string(vNode.Spec.Name)
vExternalID := string(vNode.Spec.ExternalID)
vProviderID := string(vNode.Spec.ProviderID)
vArchitecture := string(vNode.Spec.Architecture)
vContainerRuntimeVersion := string(vNode.Spec.ContainerRuntimeVersion)
vKernelVersion := string(vNode.Spec.KernelVersion)
vOperatingSystem := string(vNode.Spec.OperatingSystem)
vOsImage := string(vNode.Spec.OsImage)
vSystemUUID := string(vNode.Spec.SystemUUID)
vHostName := string(vNode.Spec.HostName)
vApiLink := string(vNode.Spec.ApiLink)
vBootID := string(vNode.Spec.BootID)
vKubeletVersion := string(vNode.Spec.KubeletVersion)
vMachineID := string(vNode.Spec.MachineID)
vCreationTimestamp := string(vNode.Spec.CreationTimestamp)
vAnnotations := string(vNode.Spec.Annotations)
vLabels := string(vNode.Spec.Labels)
vUid := string(vNode.Spec.Uid)
vSpec := string(vNode.Spec.Spec)
vKStatus := string(vNode.Spec.KStatus)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalNode {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	ExternalID: &vExternalID,
	ProviderID: &vProviderID,
	Architecture: &vArchitecture,
	ContainerRuntimeVersion: &vContainerRuntimeVersion,
	KernelVersion: &vKernelVersion,
	OperatingSystem: &vOperatingSystem,
	OsImage: &vOsImage,
	SystemUUID: &vSystemUUID,
	HostName: &vHostName,
	ApiLink: &vApiLink,
	BootID: &vBootID,
	KubeletVersion: &vKubeletVersion,
	MachineID: &vMachineID,
	CreationTimestamp: &vCreationTimestamp,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	Uid: &vUid,
	Spec: &vSpec,
	KStatus: &vKStatus,
	}
	log.Debugf("[getGlobalServiceInstanceNodeResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Containers Node: ServiceInstance PKG: Global
//////////////////////////////////////
func getGlobalServiceInstanceContainersResolver(obj *model.GlobalServiceInstance, id *string) ([]*model.GlobalServiceInstanceContainer, error) {
	log.Debugf("[getGlobalServiceInstanceContainersResolver]Parent Object %+v", obj)
	var vGlobalServiceInstanceContainerList []*model.GlobalServiceInstanceContainer
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceInstanceContainersResolver]Id %q", *id)
		vServiceInstanceContainer, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).ServiceInstances(getParentName(obj.ParentLabels, "serviceinstances.global.tsm.tanzu.vmware.com")).GetContainers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceInstanceContainersResolver]Error getting Containers node %q : %s", *id, err)
            return vGlobalServiceInstanceContainerList, nil
        }
		dn := vServiceInstanceContainer.DisplayName()
parentLabels := map[string]interface{}{"serviceinstancecontainers.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceInstanceContainer.Spec.Name)
vImage := string(vServiceInstanceContainer.Spec.Image)
vImagePullPolicy := string(vServiceInstanceContainer.Spec.ImagePullPolicy)
vTerminationMessagePath := string(vServiceInstanceContainer.Spec.TerminationMessagePath)
vTerminationMessagePolicy := string(vServiceInstanceContainer.Spec.TerminationMessagePolicy)
vResources := string(vServiceInstanceContainer.Spec.Resources)
vVolumeMounts := string(vServiceInstanceContainer.Spec.VolumeMounts)
vCommand := string(vServiceInstanceContainer.Spec.Command)
vSecurityContext := string(vServiceInstanceContainer.Spec.SecurityContext)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstanceContainer {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Image: &vImage,
	ImagePullPolicy: &vImagePullPolicy,
	TerminationMessagePath: &vTerminationMessagePath,
	TerminationMessagePolicy: &vTerminationMessagePolicy,
	Resources: &vResources,
	VolumeMounts: &vVolumeMounts,
	Command: &vCommand,
	SecurityContext: &vSecurityContext,
	}
		vGlobalServiceInstanceContainerList = append(vGlobalServiceInstanceContainerList, ret)

		log.Debugf("[getGlobalServiceInstanceContainersResolver]Output Containers objects %v", vGlobalServiceInstanceContainerList)

		return vGlobalServiceInstanceContainerList, nil
	}

	log.Debug("[getGlobalServiceInstanceContainersResolver]Id is empty, process all Containerss")

	vServiceInstanceContainerParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceInstances(context.TODO(), getParentName(obj.ParentLabels, "serviceinstances.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceInstanceContainersResolver]Error getting parent node %s", err)
        return vGlobalServiceInstanceContainerList, nil
    }
	vServiceInstanceContainerAllObj, err := vServiceInstanceContainerParent.GetAllContainers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceInstanceContainersResolver]Error getting Containers objects %s", err)
        return vGlobalServiceInstanceContainerList, nil
    }
	for _, i := range vServiceInstanceContainerAllObj {
		vServiceInstanceContainer, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).ServiceInstances(getParentName(obj.ParentLabels, "serviceinstances.global.tsm.tanzu.vmware.com")).GetContainers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceInstanceContainersResolver]Error getting Containers node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceInstanceContainer.DisplayName()
parentLabels := map[string]interface{}{"serviceinstancecontainers.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceInstanceContainer.Spec.Name)
vImage := string(vServiceInstanceContainer.Spec.Image)
vImagePullPolicy := string(vServiceInstanceContainer.Spec.ImagePullPolicy)
vTerminationMessagePath := string(vServiceInstanceContainer.Spec.TerminationMessagePath)
vTerminationMessagePolicy := string(vServiceInstanceContainer.Spec.TerminationMessagePolicy)
vResources := string(vServiceInstanceContainer.Spec.Resources)
vVolumeMounts := string(vServiceInstanceContainer.Spec.VolumeMounts)
vCommand := string(vServiceInstanceContainer.Spec.Command)
vSecurityContext := string(vServiceInstanceContainer.Spec.SecurityContext)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstanceContainer {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Image: &vImage,
	ImagePullPolicy: &vImagePullPolicy,
	TerminationMessagePath: &vTerminationMessagePath,
	TerminationMessagePolicy: &vTerminationMessagePolicy,
	Resources: &vResources,
	VolumeMounts: &vVolumeMounts,
	Command: &vCommand,
	SecurityContext: &vSecurityContext,
	}
		vGlobalServiceInstanceContainerList = append(vGlobalServiceInstanceContainerList, ret)
	}

	log.Debugf("[getGlobalServiceInstanceContainersResolver]Output Containers objects %v", vGlobalServiceInstanceContainerList)

	return vGlobalServiceInstanceContainerList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceInstances Node: ServiceJob PKG: Global
//////////////////////////////////////
func getGlobalServiceJobServiceInstancesResolver(obj *model.GlobalServiceJob, id *string) ([]*model.GlobalServiceInstance, error) {
	log.Debugf("[getGlobalServiceJobServiceInstancesResolver]Parent Object %+v", obj)
	var vGlobalServiceInstanceList []*model.GlobalServiceInstance
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceJobServiceInstancesResolver]Id %q", *id)
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceJobs(context.TODO(), getParentName(obj.ParentLabels, "servicejobs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceJobServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceJobServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)

		log.Debugf("[getGlobalServiceJobServiceInstancesResolver]Output ServiceInstances objects %v", vGlobalServiceInstanceList)

		return vGlobalServiceInstanceList, nil
	}

	log.Debug("[getGlobalServiceJobServiceInstancesResolver]Id is empty, process all ServiceInstancess")

	vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceJobs(context.TODO(), getParentName(obj.ParentLabels, "servicejobs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceJobServiceInstancesResolver]Error getting parent node %s", err)
        return vGlobalServiceInstanceList, nil
    }
	vServiceInstanceAllObj, err := vServiceInstanceParent.GetAllServiceInstances(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceJobServiceInstancesResolver]Error getting ServiceInstances %s", err)
        return vGlobalServiceInstanceList, nil
    }
	for _, i := range vServiceInstanceAllObj {
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceJobs(context.TODO(), getParentName(obj.ParentLabels, "servicejobs.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceJobServiceInstancesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceJobServiceInstancesResolver]Error getting ServiceInstances node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)
	}
	log.Debugf("[getGlobalServiceJobServiceInstancesResolver]List of ServiceInstances object %v", vGlobalServiceInstanceList)
	return vGlobalServiceInstanceList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceLevelObjectives Node: ServiceLevelObjectiveFolder PKG: Global
//////////////////////////////////////
func getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver(obj *model.GlobalServiceLevelObjectiveFolder, id *string) ([]*model.GlobalServiceLevelObjective, error) {
	log.Debugf("[getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver]Parent Object %+v", obj)
	var vGlobalServiceLevelObjectiveList []*model.GlobalServiceLevelObjective
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver]Id %q", *id)
		vServiceLevelObjective, err := nc.GlobalRoot().Config().ServiceLevelObjective(getParentName(obj.ParentLabels, "servicelevelobjectivefolders.global.tsm.tanzu.vmware.com")).GetServiceLevelObjectives(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver]Error getting ServiceLevelObjectives node %q : %s", *id, err)
            return vGlobalServiceLevelObjectiveList, nil
        }
		dn := vServiceLevelObjective.DisplayName()
parentLabels := map[string]interface{}{"servicelevelobjectives.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vServiceLevelObjective.Spec.ProjectId)
vDisabled := bool(vServiceLevelObjective.Spec.Disabled)
vDescription := string(vServiceLevelObjective.Spec.Description)
vLabels := string(vServiceLevelObjective.Spec.Labels)
vSlis := string(vServiceLevelObjective.Spec.Slis)
vSloServices := string(vServiceLevelObjective.Spec.SloServices)
vSloTargetValue := string(vServiceLevelObjective.Spec.SloTargetValue)
vSloPeriod := string(vServiceLevelObjective.Spec.SloPeriod)
vSloCreationTime := string(vServiceLevelObjective.Spec.SloCreationTime)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceLevelObjective {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	Disabled: &vDisabled,
	Description: &vDescription,
	Labels: &vLabels,
	Slis: &vSlis,
	SloServices: &vSloServices,
	SloTargetValue: &vSloTargetValue,
	SloPeriod: &vSloPeriod,
	SloCreationTime: &vSloCreationTime,
	}
		vGlobalServiceLevelObjectiveList = append(vGlobalServiceLevelObjectiveList, ret)

		log.Debugf("[getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver]Output ServiceLevelObjectives objects %v", vGlobalServiceLevelObjectiveList)

		return vGlobalServiceLevelObjectiveList, nil
	}

	log.Debug("[getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver]Id is empty, process all ServiceLevelObjectivess")

	vServiceLevelObjectiveParent, err := nc.GlobalRoot().Config().GetServiceLevelObjective(context.TODO(), getParentName(obj.ParentLabels, "servicelevelobjectivefolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver]Error getting parent node %s", err)
        return vGlobalServiceLevelObjectiveList, nil
    }
	vServiceLevelObjectiveAllObj, err := vServiceLevelObjectiveParent.GetAllServiceLevelObjectives(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver]Error getting ServiceLevelObjectives objects %s", err)
        return vGlobalServiceLevelObjectiveList, nil
    }
	for _, i := range vServiceLevelObjectiveAllObj {
		vServiceLevelObjective, err := nc.GlobalRoot().Config().ServiceLevelObjective(getParentName(obj.ParentLabels, "servicelevelobjectivefolders.global.tsm.tanzu.vmware.com")).GetServiceLevelObjectives(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver]Error getting ServiceLevelObjectives node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceLevelObjective.DisplayName()
parentLabels := map[string]interface{}{"servicelevelobjectives.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vServiceLevelObjective.Spec.ProjectId)
vDisabled := bool(vServiceLevelObjective.Spec.Disabled)
vDescription := string(vServiceLevelObjective.Spec.Description)
vLabels := string(vServiceLevelObjective.Spec.Labels)
vSlis := string(vServiceLevelObjective.Spec.Slis)
vSloServices := string(vServiceLevelObjective.Spec.SloServices)
vSloTargetValue := string(vServiceLevelObjective.Spec.SloTargetValue)
vSloPeriod := string(vServiceLevelObjective.Spec.SloPeriod)
vSloCreationTime := string(vServiceLevelObjective.Spec.SloCreationTime)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceLevelObjective {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	Disabled: &vDisabled,
	Description: &vDescription,
	Labels: &vLabels,
	Slis: &vSlis,
	SloServices: &vSloServices,
	SloTargetValue: &vSloTargetValue,
	SloPeriod: &vSloPeriod,
	SloCreationTime: &vSloCreationTime,
	}
		vGlobalServiceLevelObjectiveList = append(vGlobalServiceLevelObjectiveList, ret)
	}

	log.Debugf("[getGlobalServiceLevelObjectiveFolderServiceLevelObjectivesResolver]Output ServiceLevelObjectives objects %v", vGlobalServiceLevelObjectiveList)

	return vGlobalServiceLevelObjectiveList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceInstances Node: ServiceReplicaSet PKG: Global
//////////////////////////////////////
func getGlobalServiceReplicaSetServiceInstancesResolver(obj *model.GlobalServiceReplicaSet, id *string) ([]*model.GlobalServiceInstance, error) {
	log.Debugf("[getGlobalServiceReplicaSetServiceInstancesResolver]Parent Object %+v", obj)
	var vGlobalServiceInstanceList []*model.GlobalServiceInstance
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceReplicaSetServiceInstancesResolver]Id %q", *id)
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceReplicaSets(context.TODO(), getParentName(obj.ParentLabels, "servicereplicasets.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceReplicaSetServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceReplicaSetServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)

		log.Debugf("[getGlobalServiceReplicaSetServiceInstancesResolver]Output ServiceInstances objects %v", vGlobalServiceInstanceList)

		return vGlobalServiceInstanceList, nil
	}

	log.Debug("[getGlobalServiceReplicaSetServiceInstancesResolver]Id is empty, process all ServiceInstancess")

	vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceReplicaSets(context.TODO(), getParentName(obj.ParentLabels, "servicereplicasets.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceReplicaSetServiceInstancesResolver]Error getting parent node %s", err)
        return vGlobalServiceInstanceList, nil
    }
	vServiceInstanceAllObj, err := vServiceInstanceParent.GetAllServiceInstances(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceReplicaSetServiceInstancesResolver]Error getting ServiceInstances %s", err)
        return vGlobalServiceInstanceList, nil
    }
	for _, i := range vServiceInstanceAllObj {
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceReplicaSets(context.TODO(), getParentName(obj.ParentLabels, "servicereplicasets.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceReplicaSetServiceInstancesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceReplicaSetServiceInstancesResolver]Error getting ServiceInstances node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)
	}
	log.Debugf("[getGlobalServiceReplicaSetServiceInstancesResolver]List of ServiceInstances object %v", vGlobalServiceInstanceList)
	return vGlobalServiceInstanceList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceInstances Node: ServiceStatefulSet PKG: Global
//////////////////////////////////////
func getGlobalServiceStatefulSetServiceInstancesResolver(obj *model.GlobalServiceStatefulSet, id *string) ([]*model.GlobalServiceInstance, error) {
	log.Debugf("[getGlobalServiceStatefulSetServiceInstancesResolver]Parent Object %+v", obj)
	var vGlobalServiceInstanceList []*model.GlobalServiceInstance
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceStatefulSetServiceInstancesResolver]Id %q", *id)
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceStatefulSets(context.TODO(), getParentName(obj.ParentLabels, "servicestatefulsets.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceStatefulSetServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceStatefulSetServiceInstancesResolver]Error getting ServiceInstances %q : %s", *id, err)
			return vGlobalServiceInstanceList, nil
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)

		log.Debugf("[getGlobalServiceStatefulSetServiceInstancesResolver]Output ServiceInstances objects %v", vGlobalServiceInstanceList)

		return vGlobalServiceInstanceList, nil
	}

	log.Debug("[getGlobalServiceStatefulSetServiceInstancesResolver]Id is empty, process all ServiceInstancess")

	vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceStatefulSets(context.TODO(), getParentName(obj.ParentLabels, "servicestatefulsets.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceStatefulSetServiceInstancesResolver]Error getting parent node %s", err)
        return vGlobalServiceInstanceList, nil
    }
	vServiceInstanceAllObj, err := vServiceInstanceParent.GetAllServiceInstances(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceStatefulSetServiceInstancesResolver]Error getting ServiceInstances %s", err)
        return vGlobalServiceInstanceList, nil
    }
	for _, i := range vServiceInstanceAllObj {
		vServiceInstanceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServiceStatefulSets(context.TODO(), getParentName(obj.ParentLabels, "servicestatefulsets.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceStatefulSetServiceInstancesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceInstance, err := vServiceInstanceParent.GetServiceInstances(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceStatefulSetServiceInstancesResolver]Error getting ServiceInstances node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceInstance.DisplayName()
parentLabels := map[string]interface{}{"serviceinstances.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceInstance.Spec.Metadata)
vSpec := string(vServiceInstance.Spec.Spec)
vStatus := string(vServiceInstance.Spec.Status)
vName := string(vServiceInstance.Spec.Name)
vNamespace := string(vServiceInstance.Spec.Namespace)
vAnnotations := string(vServiceInstance.Spec.Annotations)
vLabels := string(vServiceInstance.Spec.Labels)
vApiLink := string(vServiceInstance.Spec.ApiLink)
vUid := string(vServiceInstance.Spec.Uid)
vRestartPolicy := string(vServiceInstance.Spec.RestartPolicy)
vDnsPolicy := string(vServiceInstance.Spec.DnsPolicy)
vHostNetwork := bool(vServiceInstance.Spec.HostNetwork)
vSecurityContext := string(vServiceInstance.Spec.SecurityContext)
vTerminationGracePeriodSeconds := int(vServiceInstance.Spec.TerminationGracePeriodSeconds)
vTolerations := string(vServiceInstance.Spec.Tolerations)
vStatusConditions := string(vServiceInstance.Spec.StatusConditions)
vStatusContainer := string(vServiceInstance.Spec.StatusContainer)
vPodIP := string(vServiceInstance.Spec.PodIP)
vQosClass := string(vServiceInstance.Spec.QosClass)
vPhase := string(vServiceInstance.Spec.Phase)
vStartTime := string(vServiceInstance.Spec.StartTime)
vNodeName := string(vServiceInstance.Spec.NodeName)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceInstance {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Name: &vName,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	ApiLink: &vApiLink,
	Uid: &vUid,
	RestartPolicy: &vRestartPolicy,
	DnsPolicy: &vDnsPolicy,
	HostNetwork: &vHostNetwork,
	SecurityContext: &vSecurityContext,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Tolerations: &vTolerations,
	StatusConditions: &vStatusConditions,
	StatusContainer: &vStatusContainer,
	PodIP: &vPodIP,
	QosClass: &vQosClass,
	Phase: &vPhase,
	StartTime: &vStartTime,
	NodeName: &vNodeName,
	}
		vGlobalServiceInstanceList = append(vGlobalServiceInstanceList, ret)
	}
	log.Debugf("[getGlobalServiceStatefulSetServiceInstancesResolver]List of ServiceInstances object %v", vGlobalServiceInstanceList)
	return vGlobalServiceInstanceList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceDefinitions Node: ServiceTemplate PKG: Global
//////////////////////////////////////
func getGlobalServiceTemplateServiceDefinitionsResolver(obj *model.GlobalServiceTemplate, id *string) ([]*model.GlobalServiceTemplateServiceDefinition, error) {
	log.Debugf("[getGlobalServiceTemplateServiceDefinitionsResolver]Parent Object %+v", obj)
	var vGlobalServiceTemplateServiceDefinitionList []*model.GlobalServiceTemplateServiceDefinition
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceTemplateServiceDefinitionsResolver]Id %q", *id)
		vServiceTemplateServiceDefinition, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).ServiceTemplates(getParentName(obj.ParentLabels, "servicetemplates.global.tsm.tanzu.vmware.com")).GetServiceDefinitions(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceTemplateServiceDefinitionsResolver]Error getting ServiceDefinitions node %q : %s", *id, err)
            return vGlobalServiceTemplateServiceDefinitionList, nil
        }
		dn := vServiceTemplateServiceDefinition.DisplayName()
parentLabels := map[string]interface{}{"servicetemplateservicedefinitions.global.tsm.tanzu.vmware.com":dn}
vType := string(vServiceTemplateServiceDefinition.Spec.Type)
vVersion := string(vServiceTemplateServiceDefinition.Spec.Version)
vTemplate := string(vServiceTemplateServiceDefinition.Spec.Template)
TemplateArgs, _ := json.Marshal(vServiceTemplateServiceDefinition.Spec.TemplateArgs)
TemplateArgsData := string(TemplateArgs)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceTemplateServiceDefinition {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Version: &vVersion,
	Template: &vTemplate,
	TemplateArgs: &TemplateArgsData,
	}
		vGlobalServiceTemplateServiceDefinitionList = append(vGlobalServiceTemplateServiceDefinitionList, ret)

		log.Debugf("[getGlobalServiceTemplateServiceDefinitionsResolver]Output ServiceDefinitions objects %v", vGlobalServiceTemplateServiceDefinitionList)

		return vGlobalServiceTemplateServiceDefinitionList, nil
	}

	log.Debug("[getGlobalServiceTemplateServiceDefinitionsResolver]Id is empty, process all ServiceDefinitionss")

	vServiceTemplateServiceDefinitionParent, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetServiceTemplates(context.TODO(), getParentName(obj.ParentLabels, "servicetemplates.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceTemplateServiceDefinitionsResolver]Error getting parent node %s", err)
        return vGlobalServiceTemplateServiceDefinitionList, nil
    }
	vServiceTemplateServiceDefinitionAllObj, err := vServiceTemplateServiceDefinitionParent.GetAllServiceDefinitions(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceTemplateServiceDefinitionsResolver]Error getting ServiceDefinitions objects %s", err)
        return vGlobalServiceTemplateServiceDefinitionList, nil
    }
	for _, i := range vServiceTemplateServiceDefinitionAllObj {
		vServiceTemplateServiceDefinition, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).ServiceTemplates(getParentName(obj.ParentLabels, "servicetemplates.global.tsm.tanzu.vmware.com")).GetServiceDefinitions(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceTemplateServiceDefinitionsResolver]Error getting ServiceDefinitions node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceTemplateServiceDefinition.DisplayName()
parentLabels := map[string]interface{}{"servicetemplateservicedefinitions.global.tsm.tanzu.vmware.com":dn}
vType := string(vServiceTemplateServiceDefinition.Spec.Type)
vVersion := string(vServiceTemplateServiceDefinition.Spec.Version)
vTemplate := string(vServiceTemplateServiceDefinition.Spec.Template)
TemplateArgs, _ := json.Marshal(vServiceTemplateServiceDefinition.Spec.TemplateArgs)
TemplateArgsData := string(TemplateArgs)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceTemplateServiceDefinition {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Version: &vVersion,
	Template: &vTemplate,
	TemplateArgs: &TemplateArgsData,
	}
		vGlobalServiceTemplateServiceDefinitionList = append(vGlobalServiceTemplateServiceDefinitionList, ret)
	}

	log.Debugf("[getGlobalServiceTemplateServiceDefinitionsResolver]Output ServiceDefinitions objects %v", vGlobalServiceTemplateServiceDefinitionList)

	return vGlobalServiceTemplateServiceDefinitionList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: MetricMonitors Node: ServiceVersionConfig PKG: Global
//////////////////////////////////////
func getGlobalServiceVersionConfigMetricMonitorsResolver(obj *model.GlobalServiceVersionConfig, id *string) ([]*model.GlobalMetricMonitor, error) {
	log.Debugf("[getGlobalServiceVersionConfigMetricMonitorsResolver]Parent Object %+v", obj)
	var vGlobalMetricMonitorList []*model.GlobalMetricMonitor
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceVersionConfigMetricMonitorsResolver]Id %q", *id)
		vMetricMonitor, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "serviceconfigs.global.tsm.tanzu.vmware.com")).ServiceVersion(getParentName(obj.ParentLabels, "serviceversionconfigs.global.tsm.tanzu.vmware.com")).GetMetricMonitors(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceVersionConfigMetricMonitorsResolver]Error getting MetricMonitors node %q : %s", *id, err)
            return vGlobalMetricMonitorList, nil
        }
		dn := vMetricMonitor.DisplayName()
parentLabels := map[string]interface{}{"metricmonitors.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vMetricMonitor.Spec.OwnedBy)
vSvcMetric := string(vMetricMonitor.Spec.SvcMetric)
vFunctionType := string(vMetricMonitor.Spec.FunctionType)
vFunctionArgs := string(vMetricMonitor.Spec.FunctionArgs)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalMetricMonitor {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	SvcMetric: &vSvcMetric,
	FunctionType: &vFunctionType,
	FunctionArgs: &vFunctionArgs,
	}
		vGlobalMetricMonitorList = append(vGlobalMetricMonitorList, ret)

		log.Debugf("[getGlobalServiceVersionConfigMetricMonitorsResolver]Output MetricMonitors objects %v", vGlobalMetricMonitorList)

		return vGlobalMetricMonitorList, nil
	}

	log.Debug("[getGlobalServiceVersionConfigMetricMonitorsResolver]Id is empty, process all MetricMonitorss")

	vMetricMonitorParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "serviceconfigs.global.tsm.tanzu.vmware.com")).GetServiceVersion(context.TODO(), getParentName(obj.ParentLabels, "serviceversionconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceVersionConfigMetricMonitorsResolver]Error getting parent node %s", err)
        return vGlobalMetricMonitorList, nil
    }
	vMetricMonitorAllObj, err := vMetricMonitorParent.GetAllMetricMonitors(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceVersionConfigMetricMonitorsResolver]Error getting MetricMonitors objects %s", err)
        return vGlobalMetricMonitorList, nil
    }
	for _, i := range vMetricMonitorAllObj {
		vMetricMonitor, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "serviceconfigs.global.tsm.tanzu.vmware.com")).ServiceVersion(getParentName(obj.ParentLabels, "serviceversionconfigs.global.tsm.tanzu.vmware.com")).GetMetricMonitors(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceVersionConfigMetricMonitorsResolver]Error getting MetricMonitors node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vMetricMonitor.DisplayName()
parentLabels := map[string]interface{}{"metricmonitors.global.tsm.tanzu.vmware.com":dn}
vOwnedBy := string(vMetricMonitor.Spec.OwnedBy)
vSvcMetric := string(vMetricMonitor.Spec.SvcMetric)
vFunctionType := string(vMetricMonitor.Spec.FunctionType)
vFunctionArgs := string(vMetricMonitor.Spec.FunctionArgs)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalMetricMonitor {
	Id: &dn,
	ParentLabels: parentLabels,
	OwnedBy: &vOwnedBy,
	SvcMetric: &vSvcMetric,
	FunctionType: &vFunctionType,
	FunctionArgs: &vFunctionArgs,
	}
		vGlobalMetricMonitorList = append(vGlobalMetricMonitorList, ret)
	}

	log.Debugf("[getGlobalServiceVersionConfigMetricMonitorsResolver]Output MetricMonitors objects %v", vGlobalMetricMonitorList)

	return vGlobalMetricMonitorList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceDeployments Node: ServiceVersion PKG: Global
//////////////////////////////////////
func getGlobalServiceVersionServiceDeploymentsResolver(obj *model.GlobalServiceVersion, id *string) ([]*model.GlobalServiceDeployment, error) {
	log.Debugf("[getGlobalServiceVersionServiceDeploymentsResolver]Parent Object %+v", obj)
	var vGlobalServiceDeploymentList []*model.GlobalServiceDeployment
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceVersionServiceDeploymentsResolver]Id %q", *id)
		vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), getParentName(obj.ParentLabels, "serviceversions.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceVersionServiceDeploymentsResolver]Error getting ServiceDeployments %q : %s", *id, err)
			return vGlobalServiceDeploymentList, nil
		}
		vServiceDeployment, err := vServiceDeploymentParent.GetServiceDeployments(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceVersionServiceDeploymentsResolver]Error getting ServiceDeployments %q : %s", *id, err)
			return vGlobalServiceDeploymentList, nil
		}
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)

		log.Debugf("[getGlobalServiceVersionServiceDeploymentsResolver]Output ServiceDeployments objects %v", vGlobalServiceDeploymentList)

		return vGlobalServiceDeploymentList, nil
	}

	log.Debug("[getGlobalServiceVersionServiceDeploymentsResolver]Id is empty, process all ServiceDeploymentss")

	vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), getParentName(obj.ParentLabels, "serviceversions.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceVersionServiceDeploymentsResolver]Error getting parent node %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	vServiceDeploymentAllObj, err := vServiceDeploymentParent.GetAllServiceDeployments(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceVersionServiceDeploymentsResolver]Error getting ServiceDeployments %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	for _, i := range vServiceDeploymentAllObj {
		vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), getParentName(obj.ParentLabels, "serviceversions.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceVersionServiceDeploymentsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceDeployment, err := vServiceDeploymentParent.GetServiceDeployments(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceVersionServiceDeploymentsResolver]Error getting ServiceDeployments node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)
	}
	log.Debugf("[getGlobalServiceVersionServiceDeploymentsResolver]List of ServiceDeployments object %v", vGlobalServiceDeploymentList)
	return vGlobalServiceDeploymentList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceDaemonSets Node: ServiceVersion PKG: Global
//////////////////////////////////////
func getGlobalServiceVersionServiceDaemonSetsResolver(obj *model.GlobalServiceVersion, id *string) ([]*model.GlobalServiceDaemonSet, error) {
	log.Debugf("[getGlobalServiceVersionServiceDaemonSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceDaemonSetList []*model.GlobalServiceDaemonSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceVersionServiceDaemonSetsResolver]Id %q", *id)
		vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), getParentName(obj.ParentLabels, "serviceversions.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceVersionServiceDaemonSetsResolver]Error getting ServiceDaemonSets %q : %s", *id, err)
			return vGlobalServiceDaemonSetList, nil
		}
		vServiceDaemonSet, err := vServiceDaemonSetParent.GetServiceDaemonSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceVersionServiceDaemonSetsResolver]Error getting ServiceDaemonSets %q : %s", *id, err)
			return vGlobalServiceDaemonSetList, nil
		}
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)

		log.Debugf("[getGlobalServiceVersionServiceDaemonSetsResolver]Output ServiceDaemonSets objects %v", vGlobalServiceDaemonSetList)

		return vGlobalServiceDaemonSetList, nil
	}

	log.Debug("[getGlobalServiceVersionServiceDaemonSetsResolver]Id is empty, process all ServiceDaemonSetss")

	vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), getParentName(obj.ParentLabels, "serviceversions.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceVersionServiceDaemonSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	vServiceDaemonSetAllObj, err := vServiceDaemonSetParent.GetAllServiceDaemonSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceVersionServiceDaemonSetsResolver]Error getting ServiceDaemonSets %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	for _, i := range vServiceDaemonSetAllObj {
		vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), getParentName(obj.ParentLabels, "serviceversions.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceVersionServiceDaemonSetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceDaemonSet, err := vServiceDaemonSetParent.GetServiceDaemonSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceVersionServiceDaemonSetsResolver]Error getting ServiceDaemonSets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)
	}
	log.Debugf("[getGlobalServiceVersionServiceDaemonSetsResolver]List of ServiceDaemonSets object %v", vGlobalServiceDaemonSetList)
	return vGlobalServiceDaemonSetList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceStatefulSets Node: ServiceVersion PKG: Global
//////////////////////////////////////
func getGlobalServiceVersionServiceStatefulSetsResolver(obj *model.GlobalServiceVersion, id *string) ([]*model.GlobalServiceStatefulSet, error) {
	log.Debugf("[getGlobalServiceVersionServiceStatefulSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceStatefulSetList []*model.GlobalServiceStatefulSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceVersionServiceStatefulSetsResolver]Id %q", *id)
		vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), getParentName(obj.ParentLabels, "serviceversions.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceVersionServiceStatefulSetsResolver]Error getting ServiceStatefulSets %q : %s", *id, err)
			return vGlobalServiceStatefulSetList, nil
		}
		vServiceStatefulSet, err := vServiceStatefulSetParent.GetServiceStatefulSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceVersionServiceStatefulSetsResolver]Error getting ServiceStatefulSets %q : %s", *id, err)
			return vGlobalServiceStatefulSetList, nil
		}
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)

		log.Debugf("[getGlobalServiceVersionServiceStatefulSetsResolver]Output ServiceStatefulSets objects %v", vGlobalServiceStatefulSetList)

		return vGlobalServiceStatefulSetList, nil
	}

	log.Debug("[getGlobalServiceVersionServiceStatefulSetsResolver]Id is empty, process all ServiceStatefulSetss")

	vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), getParentName(obj.ParentLabels, "serviceversions.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceVersionServiceStatefulSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	vServiceStatefulSetAllObj, err := vServiceStatefulSetParent.GetAllServiceStatefulSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceVersionServiceStatefulSetsResolver]Error getting ServiceStatefulSets %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	for _, i := range vServiceStatefulSetAllObj {
		vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), getParentName(obj.ParentLabels, "serviceversions.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceVersionServiceStatefulSetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceStatefulSet, err := vServiceStatefulSetParent.GetServiceStatefulSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceVersionServiceStatefulSetsResolver]Error getting ServiceStatefulSets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)
	}
	log.Debugf("[getGlobalServiceVersionServiceStatefulSetsResolver]List of ServiceStatefulSets object %v", vGlobalServiceStatefulSetList)
	return vGlobalServiceStatefulSetList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AdditionalAttributes Node: Service PKG: Global
//////////////////////////////////////
func getGlobalServiceAdditionalAttributesResolver(obj *model.GlobalService, id *string) ([]*model.GlobalAdditionalAttributes, error) {
	log.Debugf("[getGlobalServiceAdditionalAttributesResolver]Parent Object %+v", obj)
	var vGlobalAdditionalAttributesList []*model.GlobalAdditionalAttributes
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceAdditionalAttributesResolver]Id %q", *id)
		vAdditionalAttributes, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetAdditionalAttributes(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceAdditionalAttributesResolver]Error getting AdditionalAttributes node %q : %s", *id, err)
            return vGlobalAdditionalAttributesList, nil
        }
		dn := vAdditionalAttributes.DisplayName()
parentLabels := map[string]interface{}{"additionalattributeses.global.tsm.tanzu.vmware.com":dn}
vName := string(vAdditionalAttributes.Spec.Name)
Value, _ := json.Marshal(vAdditionalAttributes.Spec.Value)
ValueData := string(Value)
vContext := string(vAdditionalAttributes.Spec.Context)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAdditionalAttributes {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Value: &ValueData,
	Context: &vContext,
	}
		vGlobalAdditionalAttributesList = append(vGlobalAdditionalAttributesList, ret)

		log.Debugf("[getGlobalServiceAdditionalAttributesResolver]Output AdditionalAttributes objects %v", vGlobalAdditionalAttributesList)

		return vGlobalAdditionalAttributesList, nil
	}

	log.Debug("[getGlobalServiceAdditionalAttributesResolver]Id is empty, process all AdditionalAttributess")

	vAdditionalAttributesParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceAdditionalAttributesResolver]Error getting parent node %s", err)
        return vGlobalAdditionalAttributesList, nil
    }
	vAdditionalAttributesAllObj, err := vAdditionalAttributesParent.GetAllAdditionalAttributes(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceAdditionalAttributesResolver]Error getting AdditionalAttributes objects %s", err)
        return vGlobalAdditionalAttributesList, nil
    }
	for _, i := range vAdditionalAttributesAllObj {
		vAdditionalAttributes, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetAdditionalAttributes(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceAdditionalAttributesResolver]Error getting AdditionalAttributes node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAdditionalAttributes.DisplayName()
parentLabels := map[string]interface{}{"additionalattributeses.global.tsm.tanzu.vmware.com":dn}
vName := string(vAdditionalAttributes.Spec.Name)
Value, _ := json.Marshal(vAdditionalAttributes.Spec.Value)
ValueData := string(Value)
vContext := string(vAdditionalAttributes.Spec.Context)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAdditionalAttributes {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Value: &ValueData,
	Context: &vContext,
	}
		vGlobalAdditionalAttributesList = append(vGlobalAdditionalAttributesList, ret)
	}

	log.Debugf("[getGlobalServiceAdditionalAttributesResolver]Output AdditionalAttributes objects %v", vGlobalAdditionalAttributesList)

	return vGlobalAdditionalAttributesList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceVersions Node: Service PKG: Global
//////////////////////////////////////
func getGlobalServiceServiceVersionsResolver(obj *model.GlobalService, id *string) ([]*model.GlobalServiceVersion, error) {
	log.Debugf("[getGlobalServiceServiceVersionsResolver]Parent Object %+v", obj)
	var vGlobalServiceVersionList []*model.GlobalServiceVersion
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceServiceVersionsResolver]Id %q", *id)
		vServiceVersion, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceServiceVersionsResolver]Error getting ServiceVersions node %q : %s", *id, err)
            return vGlobalServiceVersionList, nil
        }
		dn := vServiceVersion.DisplayName()
parentLabels := map[string]interface{}{"serviceversions.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceVersion.Spec.Name)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceVersion {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalServiceVersionList = append(vGlobalServiceVersionList, ret)

		log.Debugf("[getGlobalServiceServiceVersionsResolver]Output ServiceVersions objects %v", vGlobalServiceVersionList)

		return vGlobalServiceVersionList, nil
	}

	log.Debug("[getGlobalServiceServiceVersionsResolver]Id is empty, process all ServiceVersionss")

	vServiceVersionParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceVersionsResolver]Error getting parent node %s", err)
        return vGlobalServiceVersionList, nil
    }
	vServiceVersionAllObj, err := vServiceVersionParent.GetAllServiceVersions(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceVersionsResolver]Error getting ServiceVersions objects %s", err)
        return vGlobalServiceVersionList, nil
    }
	for _, i := range vServiceVersionAllObj {
		vServiceVersion, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).Services(getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com")).GetServiceVersions(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceServiceVersionsResolver]Error getting ServiceVersions node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceVersion.DisplayName()
parentLabels := map[string]interface{}{"serviceversions.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceVersion.Spec.Name)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceVersion {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalServiceVersionList = append(vGlobalServiceVersionList, ret)
	}

	log.Debugf("[getGlobalServiceServiceVersionsResolver]Output ServiceVersions objects %v", vGlobalServiceVersionList)

	return vGlobalServiceVersionList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceDeployments Node: Service PKG: Global
//////////////////////////////////////
func getGlobalServiceServiceDeploymentsResolver(obj *model.GlobalService, id *string) ([]*model.GlobalServiceDeployment, error) {
	log.Debugf("[getGlobalServiceServiceDeploymentsResolver]Parent Object %+v", obj)
	var vGlobalServiceDeploymentList []*model.GlobalServiceDeployment
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceServiceDeploymentsResolver]Id %q", *id)
		vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceDeploymentsResolver]Error getting ServiceDeployments %q : %s", *id, err)
			return vGlobalServiceDeploymentList, nil
		}
		vServiceDeployment, err := vServiceDeploymentParent.GetServiceDeployments(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceServiceDeploymentsResolver]Error getting ServiceDeployments %q : %s", *id, err)
			return vGlobalServiceDeploymentList, nil
		}
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)

		log.Debugf("[getGlobalServiceServiceDeploymentsResolver]Output ServiceDeployments objects %v", vGlobalServiceDeploymentList)

		return vGlobalServiceDeploymentList, nil
	}

	log.Debug("[getGlobalServiceServiceDeploymentsResolver]Id is empty, process all ServiceDeploymentss")

	vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceDeploymentsResolver]Error getting parent node %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	vServiceDeploymentAllObj, err := vServiceDeploymentParent.GetAllServiceDeployments(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceDeploymentsResolver]Error getting ServiceDeployments %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	for _, i := range vServiceDeploymentAllObj {
		vServiceDeploymentParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceDeploymentsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceDeployment, err := vServiceDeploymentParent.GetServiceDeployments(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceServiceDeploymentsResolver]Error getting ServiceDeployments node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)
	}
	log.Debugf("[getGlobalServiceServiceDeploymentsResolver]List of ServiceDeployments object %v", vGlobalServiceDeploymentList)
	return vGlobalServiceDeploymentList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceStatefulSets Node: Service PKG: Global
//////////////////////////////////////
func getGlobalServiceServiceStatefulSetsResolver(obj *model.GlobalService, id *string) ([]*model.GlobalServiceStatefulSet, error) {
	log.Debugf("[getGlobalServiceServiceStatefulSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceStatefulSetList []*model.GlobalServiceStatefulSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceServiceStatefulSetsResolver]Id %q", *id)
		vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceStatefulSetsResolver]Error getting ServiceStatefulSets %q : %s", *id, err)
			return vGlobalServiceStatefulSetList, nil
		}
		vServiceStatefulSet, err := vServiceStatefulSetParent.GetServiceStatefulSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceServiceStatefulSetsResolver]Error getting ServiceStatefulSets %q : %s", *id, err)
			return vGlobalServiceStatefulSetList, nil
		}
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)

		log.Debugf("[getGlobalServiceServiceStatefulSetsResolver]Output ServiceStatefulSets objects %v", vGlobalServiceStatefulSetList)

		return vGlobalServiceStatefulSetList, nil
	}

	log.Debug("[getGlobalServiceServiceStatefulSetsResolver]Id is empty, process all ServiceStatefulSetss")

	vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceStatefulSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	vServiceStatefulSetAllObj, err := vServiceStatefulSetParent.GetAllServiceStatefulSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceStatefulSetsResolver]Error getting ServiceStatefulSets %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	for _, i := range vServiceStatefulSetAllObj {
		vServiceStatefulSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceStatefulSetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceStatefulSet, err := vServiceStatefulSetParent.GetServiceStatefulSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceServiceStatefulSetsResolver]Error getting ServiceStatefulSets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)
	}
	log.Debugf("[getGlobalServiceServiceStatefulSetsResolver]List of ServiceStatefulSets object %v", vGlobalServiceStatefulSetList)
	return vGlobalServiceStatefulSetList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceDaemonSets Node: Service PKG: Global
//////////////////////////////////////
func getGlobalServiceServiceDaemonSetsResolver(obj *model.GlobalService, id *string) ([]*model.GlobalServiceDaemonSet, error) {
	log.Debugf("[getGlobalServiceServiceDaemonSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceDaemonSetList []*model.GlobalServiceDaemonSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceServiceDaemonSetsResolver]Id %q", *id)
		vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceDaemonSetsResolver]Error getting ServiceDaemonSets %q : %s", *id, err)
			return vGlobalServiceDaemonSetList, nil
		}
		vServiceDaemonSet, err := vServiceDaemonSetParent.GetServiceDaemonSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceServiceDaemonSetsResolver]Error getting ServiceDaemonSets %q : %s", *id, err)
			return vGlobalServiceDaemonSetList, nil
		}
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)

		log.Debugf("[getGlobalServiceServiceDaemonSetsResolver]Output ServiceDaemonSets objects %v", vGlobalServiceDaemonSetList)

		return vGlobalServiceDaemonSetList, nil
	}

	log.Debug("[getGlobalServiceServiceDaemonSetsResolver]Id is empty, process all ServiceDaemonSetss")

	vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceDaemonSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	vServiceDaemonSetAllObj, err := vServiceDaemonSetParent.GetAllServiceDaemonSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceDaemonSetsResolver]Error getting ServiceDaemonSets %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	for _, i := range vServiceDaemonSetAllObj {
		vServiceDaemonSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceDaemonSetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceDaemonSet, err := vServiceDaemonSetParent.GetServiceDaemonSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceServiceDaemonSetsResolver]Error getting ServiceDaemonSets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)
	}
	log.Debugf("[getGlobalServiceServiceDaemonSetsResolver]List of ServiceDaemonSets object %v", vGlobalServiceDaemonSetList)
	return vGlobalServiceDaemonSetList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Endpoints Node: Service PKG: Global
//////////////////////////////////////
func getGlobalServiceEndpointsResolver(obj *model.GlobalService, id *string) ([]*model.GlobalEndpoints, error) {
	log.Debugf("[getGlobalServiceEndpointsResolver]Parent Object %+v", obj)
	var vGlobalEndpointsList []*model.GlobalEndpoints
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceEndpointsResolver]Id %q", *id)
		vEndpointsParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceEndpointsResolver]Error getting Endpoints %q : %s", *id, err)
			return vGlobalEndpointsList, nil
		}
		vEndpoints, err := vEndpointsParent.GetEndpoints(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceEndpointsResolver]Error getting Endpoints %q : %s", *id, err)
			return vGlobalEndpointsList, nil
		}
		dn := vEndpoints.DisplayName()
parentLabels := map[string]interface{}{"endpoints.global.tsm.tanzu.vmware.com":dn}
vName := string(vEndpoints.Spec.Name)
vMetadata := string(vEndpoints.Spec.Metadata)
vSubsets := string(vEndpoints.Spec.Subsets)
vGnsId := string(vEndpoints.Spec.GnsId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalEndpoints {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Subsets: &vSubsets,
	GnsId: &vGnsId,
	}
		vGlobalEndpointsList = append(vGlobalEndpointsList, ret)

		log.Debugf("[getGlobalServiceEndpointsResolver]Output Endpoints objects %v", vGlobalEndpointsList)

		return vGlobalEndpointsList, nil
	}

	log.Debug("[getGlobalServiceEndpointsResolver]Id is empty, process all Endpointss")

	vEndpointsParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceEndpointsResolver]Error getting parent node %s", err)
        return vGlobalEndpointsList, nil
    }
	vEndpointsAllObj, err := vEndpointsParent.GetAllEndpoints(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceEndpointsResolver]Error getting Endpoints %s", err)
        return vGlobalEndpointsList, nil
    }
	for _, i := range vEndpointsAllObj {
		vEndpointsParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceEndpointsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vEndpoints, err := vEndpointsParent.GetEndpoints(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceEndpointsResolver]Error getting Endpoints node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vEndpoints.DisplayName()
parentLabels := map[string]interface{}{"endpoints.global.tsm.tanzu.vmware.com":dn}
vName := string(vEndpoints.Spec.Name)
vMetadata := string(vEndpoints.Spec.Metadata)
vSubsets := string(vEndpoints.Spec.Subsets)
vGnsId := string(vEndpoints.Spec.GnsId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalEndpoints {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Subsets: &vSubsets,
	GnsId: &vGnsId,
	}
		vGlobalEndpointsList = append(vGlobalEndpointsList, ret)
	}
	log.Debugf("[getGlobalServiceEndpointsResolver]List of Endpoints object %v", vGlobalEndpointsList)
	return vGlobalEndpointsList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceReplicaSets Node: Service PKG: Global
//////////////////////////////////////
func getGlobalServiceServiceReplicaSetsResolver(obj *model.GlobalService, id *string) ([]*model.GlobalServiceReplicaSet, error) {
	log.Debugf("[getGlobalServiceServiceReplicaSetsResolver]Parent Object %+v", obj)
	var vGlobalServiceReplicaSetList []*model.GlobalServiceReplicaSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceServiceReplicaSetsResolver]Id %q", *id)
		vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceReplicaSetsResolver]Error getting ServiceReplicaSets %q : %s", *id, err)
			return vGlobalServiceReplicaSetList, nil
		}
		vServiceReplicaSet, err := vServiceReplicaSetParent.GetServiceReplicaSets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceServiceReplicaSetsResolver]Error getting ServiceReplicaSets %q : %s", *id, err)
			return vGlobalServiceReplicaSetList, nil
		}
		dn := vServiceReplicaSet.DisplayName()
parentLabels := map[string]interface{}{"servicereplicasets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceReplicaSet.Spec.Name)
vMetadata := string(vServiceReplicaSet.Spec.Metadata)
vSpec := string(vServiceReplicaSet.Spec.Spec)
vStatus := string(vServiceReplicaSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceReplicaSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceReplicaSetList = append(vGlobalServiceReplicaSetList, ret)

		log.Debugf("[getGlobalServiceServiceReplicaSetsResolver]Output ServiceReplicaSets objects %v", vGlobalServiceReplicaSetList)

		return vGlobalServiceReplicaSetList, nil
	}

	log.Debug("[getGlobalServiceServiceReplicaSetsResolver]Id is empty, process all ServiceReplicaSetss")

	vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceReplicaSetsResolver]Error getting parent node %s", err)
        return vGlobalServiceReplicaSetList, nil
    }
	vServiceReplicaSetAllObj, err := vServiceReplicaSetParent.GetAllServiceReplicaSets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceReplicaSetsResolver]Error getting ServiceReplicaSets %s", err)
        return vGlobalServiceReplicaSetList, nil
    }
	for _, i := range vServiceReplicaSetAllObj {
		vServiceReplicaSetParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceReplicaSetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceReplicaSet, err := vServiceReplicaSetParent.GetServiceReplicaSets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceServiceReplicaSetsResolver]Error getting ServiceReplicaSets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceReplicaSet.DisplayName()
parentLabels := map[string]interface{}{"servicereplicasets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceReplicaSet.Spec.Name)
vMetadata := string(vServiceReplicaSet.Spec.Metadata)
vSpec := string(vServiceReplicaSet.Spec.Spec)
vStatus := string(vServiceReplicaSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceReplicaSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceReplicaSetList = append(vGlobalServiceReplicaSetList, ret)
	}
	log.Debugf("[getGlobalServiceServiceReplicaSetsResolver]List of ServiceReplicaSets object %v", vGlobalServiceReplicaSetList)
	return vGlobalServiceReplicaSetList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: ServiceJobs Node: Service PKG: Global
//////////////////////////////////////
func getGlobalServiceServiceJobsResolver(obj *model.GlobalService, id *string) ([]*model.GlobalServiceJob, error) {
	log.Debugf("[getGlobalServiceServiceJobsResolver]Parent Object %+v", obj)
	var vGlobalServiceJobList []*model.GlobalServiceJob
	if id != nil && *id != "" {
		log.Debugf("[getGlobalServiceServiceJobsResolver]Id %q", *id)
		vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceJobsResolver]Error getting ServiceJobs %q : %s", *id, err)
			return vGlobalServiceJobList, nil
		}
		vServiceJob, err := vServiceJobParent.GetServiceJobs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalServiceServiceJobsResolver]Error getting ServiceJobs %q : %s", *id, err)
			return vGlobalServiceJobList, nil
		}
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)

		log.Debugf("[getGlobalServiceServiceJobsResolver]Output ServiceJobs objects %v", vGlobalServiceJobList)

		return vGlobalServiceJobList, nil
	}

	log.Debug("[getGlobalServiceServiceJobsResolver]Id is empty, process all ServiceJobss")

	vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceJobsResolver]Error getting parent node %s", err)
        return vGlobalServiceJobList, nil
    }
	vServiceJobAllObj, err := vServiceJobParent.GetAllServiceJobs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalServiceServiceJobsResolver]Error getting ServiceJobs %s", err)
        return vGlobalServiceJobList, nil
    }
	for _, i := range vServiceJobAllObj {
		vServiceJobParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetServices(context.TODO(), getParentName(obj.ParentLabels, "services.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalServiceServiceJobsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceJob, err := vServiceJobParent.GetServiceJobs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalServiceServiceJobsResolver]Error getting ServiceJobs node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)
	}
	log.Debugf("[getGlobalServiceServiceJobsResolver]List of ServiceJobs object %v", vGlobalServiceJobList)
	return vGlobalServiceJobList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: SloServices Node: SloConfig PKG: Global
//////////////////////////////////////
func getGlobalSloConfigSloServicesResolver(obj *model.GlobalSloConfig, id *string) ([]*model.GlobalSloServiceConfig, error) {
	log.Debugf("[getGlobalSloConfigSloServicesResolver]Parent Object %+v", obj)
	var vGlobalSloServiceConfigList []*model.GlobalSloServiceConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalSloConfigSloServicesResolver]Id %q", *id)
		vSloServiceConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).Slos(getParentName(obj.ParentLabels, "sloconfigs.global.tsm.tanzu.vmware.com")).GetSloServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalSloConfigSloServicesResolver]Error getting SloServices node %q : %s", *id, err)
            return vGlobalSloServiceConfigList, nil
        }
		dn := vSloServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"sloserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vSloServiceConfig.Spec.Name)
vRemainingBudget := int(vSloServiceConfig.Spec.RemainingBudget)
vLastUpdateTime := string(vSloServiceConfig.Spec.LastUpdateTime)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSloServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	RemainingBudget: &vRemainingBudget,
	LastUpdateTime: &vLastUpdateTime,
	}
		vGlobalSloServiceConfigList = append(vGlobalSloServiceConfigList, ret)

		log.Debugf("[getGlobalSloConfigSloServicesResolver]Output SloServices objects %v", vGlobalSloServiceConfigList)

		return vGlobalSloServiceConfigList, nil
	}

	log.Debug("[getGlobalSloConfigSloServicesResolver]Id is empty, process all SloServicess")

	vSloServiceConfigParent, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).GetSlos(context.TODO(), getParentName(obj.ParentLabels, "sloconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalSloConfigSloServicesResolver]Error getting parent node %s", err)
        return vGlobalSloServiceConfigList, nil
    }
	vSloServiceConfigAllObj, err := vSloServiceConfigParent.GetAllSloServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalSloConfigSloServicesResolver]Error getting SloServices objects %s", err)
        return vGlobalSloServiceConfigList, nil
    }
	for _, i := range vSloServiceConfigAllObj {
		vSloServiceConfig, err := nc.GlobalRoot().Runtime().ClusterFolder(getParentName(obj.ParentLabels, "clusterfolders.global.tsm.tanzu.vmware.com")).Clusters(getParentName(obj.ParentLabels, "clusterconfigs.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domainconfigs.global.tsm.tanzu.vmware.com")).Slos(getParentName(obj.ParentLabels, "sloconfigs.global.tsm.tanzu.vmware.com")).GetSloServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalSloConfigSloServicesResolver]Error getting SloServices node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vSloServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"sloserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vSloServiceConfig.Spec.Name)
vRemainingBudget := int(vSloServiceConfig.Spec.RemainingBudget)
vLastUpdateTime := string(vSloServiceConfig.Spec.LastUpdateTime)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalSloServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	RemainingBudget: &vRemainingBudget,
	LastUpdateTime: &vLastUpdateTime,
	}
		vGlobalSloServiceConfigList = append(vGlobalSloServiceConfigList, ret)
	}

	log.Debugf("[getGlobalSloConfigSloServicesResolver]Output SloServices objects %v", vGlobalSloServiceConfigList)

	return vGlobalSloServiceConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Slos Node: SLOFolder PKG: Global
//////////////////////////////////////
func getGlobalSLOFolderSlosResolver(obj *model.GlobalSLOFolder, id *string) ([]*model.GlobalFederatedSloConfig, error) {
	log.Debugf("[getGlobalSLOFolderSlosResolver]Parent Object %+v", obj)
	var vGlobalFederatedSloConfigList []*model.GlobalFederatedSloConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalSLOFolderSlosResolver]Id %q", *id)
		vFederatedSloConfig, err := nc.GlobalRoot().Runtime().SloFolder(getParentName(obj.ParentLabels, "slofolders.global.tsm.tanzu.vmware.com")).GetSlos(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalSLOFolderSlosResolver]Error getting Slos node %q : %s", *id, err)
            return vGlobalFederatedSloConfigList, nil
        }
		dn := vFederatedSloConfig.DisplayName()
parentLabels := map[string]interface{}{"federatedsloconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vFederatedSloConfig.Spec.Name)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalFederatedSloConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalFederatedSloConfigList = append(vGlobalFederatedSloConfigList, ret)

		log.Debugf("[getGlobalSLOFolderSlosResolver]Output Slos objects %v", vGlobalFederatedSloConfigList)

		return vGlobalFederatedSloConfigList, nil
	}

	log.Debug("[getGlobalSLOFolderSlosResolver]Id is empty, process all Sloss")

	vFederatedSloConfigParent, err := nc.GlobalRoot().Runtime().GetSloFolder(context.TODO(), getParentName(obj.ParentLabels, "slofolders.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalSLOFolderSlosResolver]Error getting parent node %s", err)
        return vGlobalFederatedSloConfigList, nil
    }
	vFederatedSloConfigAllObj, err := vFederatedSloConfigParent.GetAllSlos(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalSLOFolderSlosResolver]Error getting Slos objects %s", err)
        return vGlobalFederatedSloConfigList, nil
    }
	for _, i := range vFederatedSloConfigAllObj {
		vFederatedSloConfig, err := nc.GlobalRoot().Runtime().SloFolder(getParentName(obj.ParentLabels, "slofolders.global.tsm.tanzu.vmware.com")).GetSlos(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalSLOFolderSlosResolver]Error getting Slos node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vFederatedSloConfig.DisplayName()
parentLabels := map[string]interface{}{"federatedsloconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vFederatedSloConfig.Spec.Name)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalFederatedSloConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	}
		vGlobalFederatedSloConfigList = append(vGlobalFederatedSloConfigList, ret)
	}

	log.Debugf("[getGlobalSLOFolderSlosResolver]Output Slos objects %v", vGlobalFederatedSloConfigList)

	return vGlobalFederatedSloConfigList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: SloServices Node: FederatedSloConfig PKG: Global
//////////////////////////////////////
func getGlobalFederatedSloConfigSloServicesResolver(obj *model.GlobalFederatedSloConfig, id *string) ([]*model.GlobalFederatedSloServiceConfig, error) {
	log.Debugf("[getGlobalFederatedSloConfigSloServicesResolver]Parent Object %+v", obj)
	var vGlobalFederatedSloServiceConfigList []*model.GlobalFederatedSloServiceConfig
	if id != nil && *id != "" {
		log.Debugf("[getGlobalFederatedSloConfigSloServicesResolver]Id %q", *id)
		vFederatedSloServiceConfig, err := nc.GlobalRoot().Runtime().SloFolder(getParentName(obj.ParentLabels, "slofolders.global.tsm.tanzu.vmware.com")).Slos(getParentName(obj.ParentLabels, "federatedsloconfigs.global.tsm.tanzu.vmware.com")).GetSloServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalFederatedSloConfigSloServicesResolver]Error getting SloServices node %q : %s", *id, err)
            return vGlobalFederatedSloServiceConfigList, nil
        }
		dn := vFederatedSloServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"federatedsloserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vFederatedSloServiceConfig.Spec.Name)
vRemainingBudget := int(vFederatedSloServiceConfig.Spec.RemainingBudget)
vLastUpdateTime := string(vFederatedSloServiceConfig.Spec.LastUpdateTime)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalFederatedSloServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	RemainingBudget: &vRemainingBudget,
	LastUpdateTime: &vLastUpdateTime,
	}
		vGlobalFederatedSloServiceConfigList = append(vGlobalFederatedSloServiceConfigList, ret)

		log.Debugf("[getGlobalFederatedSloConfigSloServicesResolver]Output SloServices objects %v", vGlobalFederatedSloServiceConfigList)

		return vGlobalFederatedSloServiceConfigList, nil
	}

	log.Debug("[getGlobalFederatedSloConfigSloServicesResolver]Id is empty, process all SloServicess")

	vFederatedSloServiceConfigParent, err := nc.GlobalRoot().Runtime().SloFolder(getParentName(obj.ParentLabels, "slofolders.global.tsm.tanzu.vmware.com")).GetSlos(context.TODO(), getParentName(obj.ParentLabels, "federatedsloconfigs.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalFederatedSloConfigSloServicesResolver]Error getting parent node %s", err)
        return vGlobalFederatedSloServiceConfigList, nil
    }
	vFederatedSloServiceConfigAllObj, err := vFederatedSloServiceConfigParent.GetAllSloServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalFederatedSloConfigSloServicesResolver]Error getting SloServices objects %s", err)
        return vGlobalFederatedSloServiceConfigList, nil
    }
	for _, i := range vFederatedSloServiceConfigAllObj {
		vFederatedSloServiceConfig, err := nc.GlobalRoot().Runtime().SloFolder(getParentName(obj.ParentLabels, "slofolders.global.tsm.tanzu.vmware.com")).Slos(getParentName(obj.ParentLabels, "federatedsloconfigs.global.tsm.tanzu.vmware.com")).GetSloServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalFederatedSloConfigSloServicesResolver]Error getting SloServices node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vFederatedSloServiceConfig.DisplayName()
parentLabels := map[string]interface{}{"federatedsloserviceconfigs.global.tsm.tanzu.vmware.com":dn}
vName := string(vFederatedSloServiceConfig.Spec.Name)
vRemainingBudget := int(vFederatedSloServiceConfig.Spec.RemainingBudget)
vLastUpdateTime := string(vFederatedSloServiceConfig.Spec.LastUpdateTime)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalFederatedSloServiceConfig {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	RemainingBudget: &vRemainingBudget,
	LastUpdateTime: &vLastUpdateTime,
	}
		vGlobalFederatedSloServiceConfigList = append(vGlobalFederatedSloServiceConfigList, ret)
	}

	log.Debugf("[getGlobalFederatedSloConfigSloServicesResolver]Output SloServices objects %v", vGlobalFederatedSloServiceConfigList)

	return vGlobalFederatedSloServiceConfigList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Services Node: SvcGroup PKG: Global
//////////////////////////////////////
func getGlobalSvcGroupServicesResolver(obj *model.GlobalSvcGroup, id *string) ([]*model.GlobalService, error) {
	log.Debugf("[getGlobalSvcGroupServicesResolver]Parent Object %+v", obj)
	var vGlobalServiceList []*model.GlobalService
	if id != nil && *id != "" {
		log.Debugf("[getGlobalSvcGroupServicesResolver]Id %q", *id)
		vServiceParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		vService, err := vServiceParent.GetServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalSvcGroupServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)

		log.Debugf("[getGlobalSvcGroupServicesResolver]Output Services objects %v", vGlobalServiceList)

		return vGlobalServiceList, nil
	}

	log.Debug("[getGlobalSvcGroupServicesResolver]Id is empty, process all Servicess")

	vServiceParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupServicesResolver]Error getting parent node %s", err)
        return vGlobalServiceList, nil
    }
	vServiceAllObj, err := vServiceParent.GetAllServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupServicesResolver]Error getting Services %s", err)
        return vGlobalServiceList, nil
    }
	for _, i := range vServiceAllObj {
		vServiceParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupServicesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vService, err := vServiceParent.GetServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalSvcGroupServicesResolver]Error getting Services node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)
	}
	log.Debugf("[getGlobalSvcGroupServicesResolver]List of Services object %v", vGlobalServiceList)
	return vGlobalServiceList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Deployments Node: SvcGroup PKG: Global
//////////////////////////////////////
func getGlobalSvcGroupDeploymentsResolver(obj *model.GlobalSvcGroup, id *string) ([]*model.GlobalServiceDeployment, error) {
	log.Debugf("[getGlobalSvcGroupDeploymentsResolver]Parent Object %+v", obj)
	var vGlobalServiceDeploymentList []*model.GlobalServiceDeployment
	if id != nil && *id != "" {
		log.Debugf("[getGlobalSvcGroupDeploymentsResolver]Id %q", *id)
		vServiceDeploymentParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupDeploymentsResolver]Error getting Deployments %q : %s", *id, err)
			return vGlobalServiceDeploymentList, nil
		}
		vServiceDeployment, err := vServiceDeploymentParent.GetDeployments(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalSvcGroupDeploymentsResolver]Error getting Deployments %q : %s", *id, err)
			return vGlobalServiceDeploymentList, nil
		}
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)

		log.Debugf("[getGlobalSvcGroupDeploymentsResolver]Output Deployments objects %v", vGlobalServiceDeploymentList)

		return vGlobalServiceDeploymentList, nil
	}

	log.Debug("[getGlobalSvcGroupDeploymentsResolver]Id is empty, process all Deploymentss")

	vServiceDeploymentParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupDeploymentsResolver]Error getting parent node %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	vServiceDeploymentAllObj, err := vServiceDeploymentParent.GetAllDeployments(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupDeploymentsResolver]Error getting Deployments %s", err)
        return vGlobalServiceDeploymentList, nil
    }
	for _, i := range vServiceDeploymentAllObj {
		vServiceDeploymentParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupDeploymentsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceDeployment, err := vServiceDeploymentParent.GetDeployments(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalSvcGroupDeploymentsResolver]Error getting Deployments node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceDeployment.DisplayName()
parentLabels := map[string]interface{}{"servicedeployments.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vServiceDeployment.Spec.Metadata)
vSpec := string(vServiceDeployment.Spec.Spec)
vStatus := string(vServiceDeployment.Spec.Status)
vNamespace := string(vServiceDeployment.Spec.Namespace)
vAnnotations := string(vServiceDeployment.Spec.Annotations)
vCreationTimestamp := string(vServiceDeployment.Spec.CreationTimestamp)
vLabels := string(vServiceDeployment.Spec.Labels)
vName := string(vServiceDeployment.Spec.Name)
vApiLink := string(vServiceDeployment.Spec.ApiLink)
vUid := string(vServiceDeployment.Spec.Uid)
vGeneration := int(vServiceDeployment.Spec.Generation)
vSelector := string(vServiceDeployment.Spec.Selector)
vReplicas := int(vServiceDeployment.Spec.Replicas)
vDnsPolicy := string(vServiceDeployment.Spec.DnsPolicy)
vRestartPolicy := string(vServiceDeployment.Spec.RestartPolicy)
vSchedulerName := string(vServiceDeployment.Spec.SchedulerName)
vSecurityContext := string(vServiceDeployment.Spec.SecurityContext)
vServiceAccount := string(vServiceDeployment.Spec.ServiceAccount)
vServiceAccountName := string(vServiceDeployment.Spec.ServiceAccountName)
vTerminationGracePeriodSeconds := int(vServiceDeployment.Spec.TerminationGracePeriodSeconds)
vVolumes := string(vServiceDeployment.Spec.Volumes)
vTemplateLabels := string(vServiceDeployment.Spec.TemplateLabels)
vStatusReplicas := int(vServiceDeployment.Spec.StatusReplicas)
vAvailableReplicas := int(vServiceDeployment.Spec.AvailableReplicas)
vUpdatedReplicas := int(vServiceDeployment.Spec.UpdatedReplicas)
vReadyReplicas := int(vServiceDeployment.Spec.ReadyReplicas)
vObservedGeneration := int(vServiceDeployment.Spec.ObservedGeneration)
vConditions := string(vServiceDeployment.Spec.Conditions)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDeployment {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	Namespace: &vNamespace,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Name: &vName,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Generation: &vGeneration,
	Selector: &vSelector,
	Replicas: &vReplicas,
	DnsPolicy: &vDnsPolicy,
	RestartPolicy: &vRestartPolicy,
	SchedulerName: &vSchedulerName,
	SecurityContext: &vSecurityContext,
	ServiceAccount: &vServiceAccount,
	ServiceAccountName: &vServiceAccountName,
	TerminationGracePeriodSeconds: &vTerminationGracePeriodSeconds,
	Volumes: &vVolumes,
	TemplateLabels: &vTemplateLabels,
	StatusReplicas: &vStatusReplicas,
	AvailableReplicas: &vAvailableReplicas,
	UpdatedReplicas: &vUpdatedReplicas,
	ReadyReplicas: &vReadyReplicas,
	ObservedGeneration: &vObservedGeneration,
	Conditions: &vConditions,
	}
		vGlobalServiceDeploymentList = append(vGlobalServiceDeploymentList, ret)
	}
	log.Debugf("[getGlobalSvcGroupDeploymentsResolver]List of Deployments object %v", vGlobalServiceDeploymentList)
	return vGlobalServiceDeploymentList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Daemonsets Node: SvcGroup PKG: Global
//////////////////////////////////////
func getGlobalSvcGroupDaemonsetsResolver(obj *model.GlobalSvcGroup, id *string) ([]*model.GlobalServiceDaemonSet, error) {
	log.Debugf("[getGlobalSvcGroupDaemonsetsResolver]Parent Object %+v", obj)
	var vGlobalServiceDaemonSetList []*model.GlobalServiceDaemonSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalSvcGroupDaemonsetsResolver]Id %q", *id)
		vServiceDaemonSetParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupDaemonsetsResolver]Error getting Daemonsets %q : %s", *id, err)
			return vGlobalServiceDaemonSetList, nil
		}
		vServiceDaemonSet, err := vServiceDaemonSetParent.GetDaemonsets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalSvcGroupDaemonsetsResolver]Error getting Daemonsets %q : %s", *id, err)
			return vGlobalServiceDaemonSetList, nil
		}
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)

		log.Debugf("[getGlobalSvcGroupDaemonsetsResolver]Output Daemonsets objects %v", vGlobalServiceDaemonSetList)

		return vGlobalServiceDaemonSetList, nil
	}

	log.Debug("[getGlobalSvcGroupDaemonsetsResolver]Id is empty, process all Daemonsetss")

	vServiceDaemonSetParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupDaemonsetsResolver]Error getting parent node %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	vServiceDaemonSetAllObj, err := vServiceDaemonSetParent.GetAllDaemonsets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupDaemonsetsResolver]Error getting Daemonsets %s", err)
        return vGlobalServiceDaemonSetList, nil
    }
	for _, i := range vServiceDaemonSetAllObj {
		vServiceDaemonSetParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupDaemonsetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceDaemonSet, err := vServiceDaemonSetParent.GetDaemonsets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalSvcGroupDaemonsetsResolver]Error getting Daemonsets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceDaemonSet.DisplayName()
parentLabels := map[string]interface{}{"servicedaemonsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceDaemonSet.Spec.Name)
vMetadata := string(vServiceDaemonSet.Spec.Metadata)
vSpec := string(vServiceDaemonSet.Spec.Spec)
vStatus := string(vServiceDaemonSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceDaemonSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceDaemonSetList = append(vGlobalServiceDaemonSetList, ret)
	}
	log.Debugf("[getGlobalSvcGroupDaemonsetsResolver]List of Daemonsets object %v", vGlobalServiceDaemonSetList)
	return vGlobalServiceDaemonSetList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Statefulsets Node: SvcGroup PKG: Global
//////////////////////////////////////
func getGlobalSvcGroupStatefulsetsResolver(obj *model.GlobalSvcGroup, id *string) ([]*model.GlobalServiceStatefulSet, error) {
	log.Debugf("[getGlobalSvcGroupStatefulsetsResolver]Parent Object %+v", obj)
	var vGlobalServiceStatefulSetList []*model.GlobalServiceStatefulSet
	if id != nil && *id != "" {
		log.Debugf("[getGlobalSvcGroupStatefulsetsResolver]Id %q", *id)
		vServiceStatefulSetParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupStatefulsetsResolver]Error getting Statefulsets %q : %s", *id, err)
			return vGlobalServiceStatefulSetList, nil
		}
		vServiceStatefulSet, err := vServiceStatefulSetParent.GetStatefulsets(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalSvcGroupStatefulsetsResolver]Error getting Statefulsets %q : %s", *id, err)
			return vGlobalServiceStatefulSetList, nil
		}
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)

		log.Debugf("[getGlobalSvcGroupStatefulsetsResolver]Output Statefulsets objects %v", vGlobalServiceStatefulSetList)

		return vGlobalServiceStatefulSetList, nil
	}

	log.Debug("[getGlobalSvcGroupStatefulsetsResolver]Id is empty, process all Statefulsetss")

	vServiceStatefulSetParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupStatefulsetsResolver]Error getting parent node %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	vServiceStatefulSetAllObj, err := vServiceStatefulSetParent.GetAllStatefulsets(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupStatefulsetsResolver]Error getting Statefulsets %s", err)
        return vGlobalServiceStatefulSetList, nil
    }
	for _, i := range vServiceStatefulSetAllObj {
		vServiceStatefulSetParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupStatefulsetsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceStatefulSet, err := vServiceStatefulSetParent.GetStatefulsets(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalSvcGroupStatefulsetsResolver]Error getting Statefulsets node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceStatefulSet.DisplayName()
parentLabels := map[string]interface{}{"servicestatefulsets.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceStatefulSet.Spec.Name)
vMetadata := string(vServiceStatefulSet.Spec.Metadata)
vSpec := string(vServiceStatefulSet.Spec.Spec)
vStatus := string(vServiceStatefulSet.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceStatefulSet {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceStatefulSetList = append(vGlobalServiceStatefulSetList, ret)
	}
	log.Debugf("[getGlobalSvcGroupStatefulsetsResolver]List of Statefulsets object %v", vGlobalServiceStatefulSetList)
	return vGlobalServiceStatefulSetList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Jobs Node: SvcGroup PKG: Global
//////////////////////////////////////
func getGlobalSvcGroupJobsResolver(obj *model.GlobalSvcGroup, id *string) ([]*model.GlobalServiceJob, error) {
	log.Debugf("[getGlobalSvcGroupJobsResolver]Parent Object %+v", obj)
	var vGlobalServiceJobList []*model.GlobalServiceJob
	if id != nil && *id != "" {
		log.Debugf("[getGlobalSvcGroupJobsResolver]Id %q", *id)
		vServiceJobParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupJobsResolver]Error getting Jobs %q : %s", *id, err)
			return vGlobalServiceJobList, nil
		}
		vServiceJob, err := vServiceJobParent.GetJobs(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalSvcGroupJobsResolver]Error getting Jobs %q : %s", *id, err)
			return vGlobalServiceJobList, nil
		}
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)

		log.Debugf("[getGlobalSvcGroupJobsResolver]Output Jobs objects %v", vGlobalServiceJobList)

		return vGlobalServiceJobList, nil
	}

	log.Debug("[getGlobalSvcGroupJobsResolver]Id is empty, process all Jobss")

	vServiceJobParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupJobsResolver]Error getting parent node %s", err)
        return vGlobalServiceJobList, nil
    }
	vServiceJobAllObj, err := vServiceJobParent.GetAllJobs(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalSvcGroupJobsResolver]Error getting Jobs %s", err)
        return vGlobalServiceJobList, nil
    }
	for _, i := range vServiceJobAllObj {
		vServiceJobParent, err := nc.GlobalRoot().Config().ResourceGroups(getParentName(obj.ParentLabels, "resourcegroups.global.tsm.tanzu.vmware.com")).GetSvcGroups(context.TODO(), getParentName(obj.ParentLabels, "svcgroups.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalSvcGroupJobsResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vServiceJob, err := vServiceJobParent.GetJobs(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalSvcGroupJobsResolver]Error getting Jobs node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vServiceJob.DisplayName()
parentLabels := map[string]interface{}{"servicejobs.global.tsm.tanzu.vmware.com":dn}
vName := string(vServiceJob.Spec.Name)
vMetadata := string(vServiceJob.Spec.Metadata)
vSpec := string(vServiceJob.Spec.Spec)
vStatus := string(vServiceJob.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceJob {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Status: &vStatus,
	}
		vGlobalServiceJobList = append(vGlobalServiceJobList, ret)
	}
	log.Debugf("[getGlobalSvcGroupJobsResolver]List of Jobs object %v", vGlobalServiceJobList)
	return vGlobalServiceJobList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Template Node: Table PKG: Global
//////////////////////////////////////
func getGlobalTableTemplateResolver(obj *model.GlobalTable) (*model.GlobalTemplate, error) {
    log.Debugf("[getGlobalTableTemplateResolver]Parent Object %+v", obj)
	vTemplateParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetTables(context.TODO(), getParentName(obj.ParentLabels, "tables.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTableTemplateResolver]Error getting parent node %s", err)
        return &model.GlobalTemplate{}, nil
    }
	vTemplate, err := vTemplateParent.GetTemplate(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalTableTemplateResolver]Error getting Template object %s", err)
        return &model.GlobalTemplate{}, nil
    }
	dn := vTemplate.DisplayName()
parentLabels := map[string]interface{}{"templates.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
	log.Debugf("[getGlobalTableTemplateResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Inventory Node: Table PKG: Global
//////////////////////////////////////
func getGlobalTableInventoryResolver(obj *model.GlobalTable) (*model.GlobalInventory, error) {
    log.Debugf("[getGlobalTableInventoryResolver]Parent Object %+v", obj)
	vInventoryParent, err := nc.GlobalRoot().Runtime().DataFolder().Domain(getParentName(obj.ParentLabels, "datafolderdomains.global.tsm.tanzu.vmware.com")).Database().GetTables(context.TODO(), getParentName(obj.ParentLabels, "tables.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTableInventoryResolver]Error getting parent node %s", err)
        return &model.GlobalInventory{}, nil
    }
	vInventory, err := vInventoryParent.GetInventory(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalTableInventoryResolver]Error getting Inventory object %s", err)
        return &model.GlobalInventory{}, nil
    }
	dn := vInventory.DisplayName()
parentLabels := map[string]interface{}{"inventories.global.tsm.tanzu.vmware.com":dn}

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalInventory {
	Id: &dn,
	ParentLabels: parentLabels,
	}
	log.Debugf("[getGlobalTableInventoryResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: DataTemplates Node: TemplateGroup PKG: Global
//////////////////////////////////////
func getGlobalTemplateGroupDataTemplatesResolver(obj *model.GlobalTemplateGroup, id *string) ([]*model.GlobalDataTemplate, error) {
	log.Debugf("[getGlobalTemplateGroupDataTemplatesResolver]Parent Object %+v", obj)
	var vGlobalDataTemplateList []*model.GlobalDataTemplate
	if id != nil && *id != "" {
		log.Debugf("[getGlobalTemplateGroupDataTemplatesResolver]Id %q", *id)
		vDataTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetDataTemplates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalTemplateGroupDataTemplatesResolver]Error getting DataTemplates node %q : %s", *id, err)
            return vGlobalDataTemplateList, nil
        }
		dn := vDataTemplate.DisplayName()
parentLabels := map[string]interface{}{"datatemplates.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDataTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalDataTemplateList = append(vGlobalDataTemplateList, ret)

		log.Debugf("[getGlobalTemplateGroupDataTemplatesResolver]Output DataTemplates objects %v", vGlobalDataTemplateList)

		return vGlobalDataTemplateList, nil
	}

	log.Debug("[getGlobalTemplateGroupDataTemplatesResolver]Id is empty, process all DataTemplatess")

	vDataTemplateParent, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).GetTemplateGroups(context.TODO(), getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupDataTemplatesResolver]Error getting parent node %s", err)
        return vGlobalDataTemplateList, nil
    }
	vDataTemplateAllObj, err := vDataTemplateParent.GetAllDataTemplates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupDataTemplatesResolver]Error getting DataTemplates objects %s", err)
        return vGlobalDataTemplateList, nil
    }
	for _, i := range vDataTemplateAllObj {
		vDataTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetDataTemplates(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalTemplateGroupDataTemplatesResolver]Error getting DataTemplates node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vDataTemplate.DisplayName()
parentLabels := map[string]interface{}{"datatemplates.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDataTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalDataTemplateList = append(vGlobalDataTemplateList, ret)
	}

	log.Debugf("[getGlobalTemplateGroupDataTemplatesResolver]Output DataTemplates objects %v", vGlobalDataTemplateList)

	return vGlobalDataTemplateList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: NodeTemplates Node: TemplateGroup PKG: Global
//////////////////////////////////////
func getGlobalTemplateGroupNodeTemplatesResolver(obj *model.GlobalTemplateGroup, id *string) ([]*model.GlobalNodeTemplate, error) {
	log.Debugf("[getGlobalTemplateGroupNodeTemplatesResolver]Parent Object %+v", obj)
	var vGlobalNodeTemplateList []*model.GlobalNodeTemplate
	if id != nil && *id != "" {
		log.Debugf("[getGlobalTemplateGroupNodeTemplatesResolver]Id %q", *id)
		vNodeTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetNodeTemplates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalTemplateGroupNodeTemplatesResolver]Error getting NodeTemplates node %q : %s", *id, err)
            return vGlobalNodeTemplateList, nil
        }
		dn := vNodeTemplate.DisplayName()
parentLabels := map[string]interface{}{"nodetemplates.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNodeTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalNodeTemplateList = append(vGlobalNodeTemplateList, ret)

		log.Debugf("[getGlobalTemplateGroupNodeTemplatesResolver]Output NodeTemplates objects %v", vGlobalNodeTemplateList)

		return vGlobalNodeTemplateList, nil
	}

	log.Debug("[getGlobalTemplateGroupNodeTemplatesResolver]Id is empty, process all NodeTemplatess")

	vNodeTemplateParent, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).GetTemplateGroups(context.TODO(), getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupNodeTemplatesResolver]Error getting parent node %s", err)
        return vGlobalNodeTemplateList, nil
    }
	vNodeTemplateAllObj, err := vNodeTemplateParent.GetAllNodeTemplates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupNodeTemplatesResolver]Error getting NodeTemplates objects %s", err)
        return vGlobalNodeTemplateList, nil
    }
	for _, i := range vNodeTemplateAllObj {
		vNodeTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetNodeTemplates(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalTemplateGroupNodeTemplatesResolver]Error getting NodeTemplates node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vNodeTemplate.DisplayName()
parentLabels := map[string]interface{}{"nodetemplates.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalNodeTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalNodeTemplateList = append(vGlobalNodeTemplateList, ret)
	}

	log.Debugf("[getGlobalTemplateGroupNodeTemplatesResolver]Output NodeTemplates objects %v", vGlobalNodeTemplateList)

	return vGlobalNodeTemplateList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AppTemplates Node: TemplateGroup PKG: Global
//////////////////////////////////////
func getGlobalTemplateGroupAppTemplatesResolver(obj *model.GlobalTemplateGroup, id *string) ([]*model.GlobalAppTemplate, error) {
	log.Debugf("[getGlobalTemplateGroupAppTemplatesResolver]Parent Object %+v", obj)
	var vGlobalAppTemplateList []*model.GlobalAppTemplate
	if id != nil && *id != "" {
		log.Debugf("[getGlobalTemplateGroupAppTemplatesResolver]Id %q", *id)
		vAppTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetAppTemplates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalTemplateGroupAppTemplatesResolver]Error getting AppTemplates node %q : %s", *id, err)
            return vGlobalAppTemplateList, nil
        }
		dn := vAppTemplate.DisplayName()
parentLabels := map[string]interface{}{"apptemplates.global.tsm.tanzu.vmware.com":dn}
vVersion := string(vAppTemplate.Spec.Version)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAppTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	Version: &vVersion,
	}
		vGlobalAppTemplateList = append(vGlobalAppTemplateList, ret)

		log.Debugf("[getGlobalTemplateGroupAppTemplatesResolver]Output AppTemplates objects %v", vGlobalAppTemplateList)

		return vGlobalAppTemplateList, nil
	}

	log.Debug("[getGlobalTemplateGroupAppTemplatesResolver]Id is empty, process all AppTemplatess")

	vAppTemplateParent, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).GetTemplateGroups(context.TODO(), getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupAppTemplatesResolver]Error getting parent node %s", err)
        return vGlobalAppTemplateList, nil
    }
	vAppTemplateAllObj, err := vAppTemplateParent.GetAllAppTemplates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupAppTemplatesResolver]Error getting AppTemplates objects %s", err)
        return vGlobalAppTemplateList, nil
    }
	for _, i := range vAppTemplateAllObj {
		vAppTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetAppTemplates(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalTemplateGroupAppTemplatesResolver]Error getting AppTemplates node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAppTemplate.DisplayName()
parentLabels := map[string]interface{}{"apptemplates.global.tsm.tanzu.vmware.com":dn}
vVersion := string(vAppTemplate.Spec.Version)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAppTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	Version: &vVersion,
	}
		vGlobalAppTemplateList = append(vGlobalAppTemplateList, ret)
	}

	log.Debugf("[getGlobalTemplateGroupAppTemplatesResolver]Output AppTemplates objects %v", vGlobalAppTemplateList)

	return vGlobalAppTemplateList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: ServiceTemplates Node: TemplateGroup PKG: Global
//////////////////////////////////////
func getGlobalTemplateGroupServiceTemplatesResolver(obj *model.GlobalTemplateGroup, id *string) ([]*model.GlobalServiceTemplate, error) {
	log.Debugf("[getGlobalTemplateGroupServiceTemplatesResolver]Parent Object %+v", obj)
	var vGlobalServiceTemplateList []*model.GlobalServiceTemplate
	if id != nil && *id != "" {
		log.Debugf("[getGlobalTemplateGroupServiceTemplatesResolver]Id %q", *id)
		vServiceTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetServiceTemplates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalTemplateGroupServiceTemplatesResolver]Error getting ServiceTemplates node %q : %s", *id, err)
            return vGlobalServiceTemplateList, nil
        }
		dn := vServiceTemplate.DisplayName()
parentLabels := map[string]interface{}{"servicetemplates.global.tsm.tanzu.vmware.com":dn}
vVersion := string(vServiceTemplate.Spec.Version)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	Version: &vVersion,
	}
		vGlobalServiceTemplateList = append(vGlobalServiceTemplateList, ret)

		log.Debugf("[getGlobalTemplateGroupServiceTemplatesResolver]Output ServiceTemplates objects %v", vGlobalServiceTemplateList)

		return vGlobalServiceTemplateList, nil
	}

	log.Debug("[getGlobalTemplateGroupServiceTemplatesResolver]Id is empty, process all ServiceTemplatess")

	vServiceTemplateParent, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).GetTemplateGroups(context.TODO(), getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupServiceTemplatesResolver]Error getting parent node %s", err)
        return vGlobalServiceTemplateList, nil
    }
	vServiceTemplateAllObj, err := vServiceTemplateParent.GetAllServiceTemplates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupServiceTemplatesResolver]Error getting ServiceTemplates objects %s", err)
        return vGlobalServiceTemplateList, nil
    }
	for _, i := range vServiceTemplateAllObj {
		vServiceTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetServiceTemplates(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalTemplateGroupServiceTemplatesResolver]Error getting ServiceTemplates node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vServiceTemplate.DisplayName()
parentLabels := map[string]interface{}{"servicetemplates.global.tsm.tanzu.vmware.com":dn}
vVersion := string(vServiceTemplate.Spec.Version)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalServiceTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	Version: &vVersion,
	}
		vGlobalServiceTemplateList = append(vGlobalServiceTemplateList, ret)
	}

	log.Debugf("[getGlobalTemplateGroupServiceTemplatesResolver]Output ServiceTemplates objects %v", vGlobalServiceTemplateList)

	return vGlobalServiceTemplateList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: PolicyTemplates Node: TemplateGroup PKG: Global
//////////////////////////////////////
func getGlobalTemplateGroupPolicyTemplatesResolver(obj *model.GlobalTemplateGroup, id *string) ([]*model.GlobalPolicyTemplate, error) {
	log.Debugf("[getGlobalTemplateGroupPolicyTemplatesResolver]Parent Object %+v", obj)
	var vGlobalPolicyTemplateList []*model.GlobalPolicyTemplate
	if id != nil && *id != "" {
		log.Debugf("[getGlobalTemplateGroupPolicyTemplatesResolver]Id %q", *id)
		vPolicyTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetPolicyTemplates(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalTemplateGroupPolicyTemplatesResolver]Error getting PolicyTemplates node %q : %s", *id, err)
            return vGlobalPolicyTemplateList, nil
        }
		dn := vPolicyTemplate.DisplayName()
parentLabels := map[string]interface{}{"policytemplates.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPolicyTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalPolicyTemplateList = append(vGlobalPolicyTemplateList, ret)

		log.Debugf("[getGlobalTemplateGroupPolicyTemplatesResolver]Output PolicyTemplates objects %v", vGlobalPolicyTemplateList)

		return vGlobalPolicyTemplateList, nil
	}

	log.Debug("[getGlobalTemplateGroupPolicyTemplatesResolver]Id is empty, process all PolicyTemplatess")

	vPolicyTemplateParent, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).GetTemplateGroups(context.TODO(), getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupPolicyTemplatesResolver]Error getting parent node %s", err)
        return vGlobalPolicyTemplateList, nil
    }
	vPolicyTemplateAllObj, err := vPolicyTemplateParent.GetAllPolicyTemplates(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalTemplateGroupPolicyTemplatesResolver]Error getting PolicyTemplates objects %s", err)
        return vGlobalPolicyTemplateList, nil
    }
	for _, i := range vPolicyTemplateAllObj {
		vPolicyTemplate, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).TemplateGroups(getParentName(obj.ParentLabels, "templategroups.global.tsm.tanzu.vmware.com")).GetPolicyTemplates(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalTemplateGroupPolicyTemplatesResolver]Error getting PolicyTemplates node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vPolicyTemplate.DisplayName()
parentLabels := map[string]interface{}{"policytemplates.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalPolicyTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalPolicyTemplateList = append(vGlobalPolicyTemplateList, ret)
	}

	log.Debugf("[getGlobalTemplateGroupPolicyTemplatesResolver]Output PolicyTemplates objects %v", vGlobalPolicyTemplateList)

	return vGlobalPolicyTemplateList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: TemplateGroups Node: Template PKG: Global
//////////////////////////////////////
func getGlobalTemplateTemplateGroupsResolver(obj *model.GlobalTemplate, id *string) ([]*model.GlobalTemplateGroup, error) {
	log.Debugf("[getGlobalTemplateTemplateGroupsResolver]Parent Object %+v", obj)
	var vGlobalTemplateGroupList []*model.GlobalTemplateGroup
	if id != nil && *id != "" {
		log.Debugf("[getGlobalTemplateTemplateGroupsResolver]Id %q", *id)
		vTemplateGroup, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).GetTemplateGroups(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalTemplateTemplateGroupsResolver]Error getting TemplateGroups node %q : %s", *id, err)
            return vGlobalTemplateGroupList, nil
        }
		dn := vTemplateGroup.DisplayName()
parentLabels := map[string]interface{}{"templategroups.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vTemplateGroup.Spec.ProjectId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTemplateGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	}
		vGlobalTemplateGroupList = append(vGlobalTemplateGroupList, ret)

		log.Debugf("[getGlobalTemplateTemplateGroupsResolver]Output TemplateGroups objects %v", vGlobalTemplateGroupList)

		return vGlobalTemplateGroupList, nil
	}

	log.Debug("[getGlobalTemplateTemplateGroupsResolver]Id is empty, process all TemplateGroupss")

	vTemplateGroupParent, err := nc.GlobalRoot().Config().GetTemplates(context.TODO(), getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTemplateTemplateGroupsResolver]Error getting parent node %s", err)
        return vGlobalTemplateGroupList, nil
    }
	vTemplateGroupAllObj, err := vTemplateGroupParent.GetAllTemplateGroups(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalTemplateTemplateGroupsResolver]Error getting TemplateGroups objects %s", err)
        return vGlobalTemplateGroupList, nil
    }
	for _, i := range vTemplateGroupAllObj {
		vTemplateGroup, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).GetTemplateGroups(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalTemplateTemplateGroupsResolver]Error getting TemplateGroups node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vTemplateGroup.DisplayName()
parentLabels := map[string]interface{}{"templategroups.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vTemplateGroup.Spec.ProjectId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTemplateGroup {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	}
		vGlobalTemplateGroupList = append(vGlobalTemplateGroupList, ret)
	}

	log.Debugf("[getGlobalTemplateTemplateGroupsResolver]Output TemplateGroups objects %v", vGlobalTemplateGroupList)

	return vGlobalTemplateGroupList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: HealthChecks Node: Template PKG: Global
//////////////////////////////////////
func getGlobalTemplateHealthChecksResolver(obj *model.GlobalTemplate, id *string) ([]*model.GlobalHealthCheckConfigN, error) {
	log.Debugf("[getGlobalTemplateHealthChecksResolver]Parent Object %+v", obj)
	var vGlobalHealthCheckConfigNList []*model.GlobalHealthCheckConfigN
	if id != nil && *id != "" {
		log.Debugf("[getGlobalTemplateHealthChecksResolver]Id %q", *id)
		vHealthCheckConfigN, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).GetHealthChecks(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalTemplateHealthChecksResolver]Error getting HealthChecks node %q : %s", *id, err)
            return vGlobalHealthCheckConfigNList, nil
        }
		dn := vHealthCheckConfigN.DisplayName()
parentLabels := map[string]interface{}{"healthcheckconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vHealthCheckConfigN.Spec.ProjectId)
vConfig := string(vHealthCheckConfigN.Spec.Config)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalHealthCheckConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	Config: &vConfig,
	}
		vGlobalHealthCheckConfigNList = append(vGlobalHealthCheckConfigNList, ret)

		log.Debugf("[getGlobalTemplateHealthChecksResolver]Output HealthChecks objects %v", vGlobalHealthCheckConfigNList)

		return vGlobalHealthCheckConfigNList, nil
	}

	log.Debug("[getGlobalTemplateHealthChecksResolver]Id is empty, process all HealthCheckss")

	vHealthCheckConfigNParent, err := nc.GlobalRoot().Config().GetTemplates(context.TODO(), getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTemplateHealthChecksResolver]Error getting parent node %s", err)
        return vGlobalHealthCheckConfigNList, nil
    }
	vHealthCheckConfigNAllObj, err := vHealthCheckConfigNParent.GetAllHealthChecks(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalTemplateHealthChecksResolver]Error getting HealthChecks objects %s", err)
        return vGlobalHealthCheckConfigNList, nil
    }
	for _, i := range vHealthCheckConfigNAllObj {
		vHealthCheckConfigN, err := nc.GlobalRoot().Config().Templates(getParentName(obj.ParentLabels, "templates.global.tsm.tanzu.vmware.com")).GetHealthChecks(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalTemplateHealthChecksResolver]Error getting HealthChecks node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vHealthCheckConfigN.DisplayName()
parentLabels := map[string]interface{}{"healthcheckconfigns.global.tsm.tanzu.vmware.com":dn}
vProjectId := string(vHealthCheckConfigN.Spec.ProjectId)
vConfig := string(vHealthCheckConfigN.Spec.Config)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalHealthCheckConfigN {
	Id: &dn,
	ParentLabels: parentLabels,
	ProjectId: &vProjectId,
	Config: &vConfig,
	}
		vGlobalHealthCheckConfigNList = append(vGlobalHealthCheckConfigNList, ret)
	}

	log.Debugf("[getGlobalTemplateHealthChecksResolver]Output HealthChecks objects %v", vGlobalHealthCheckConfigNList)

	return vGlobalHealthCheckConfigNList, nil
}

//////////////////////////////////////
// LINK RESOLVER
// FieldName: Template Node: Tenant PKG: Global
//////////////////////////////////////
func getGlobalTenantTemplateResolver(obj *model.GlobalTenant) (*model.GlobalServiceTemplate, error) {
    log.Debugf("[getGlobalTenantTemplateResolver]Parent Object %+v", obj)
	vServiceTemplateParent, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).GetTenants(context.TODO(), getParentName(obj.ParentLabels, "tenants.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTenantTemplateResolver]Error getting parent node %s", err)
        return &model.GlobalServiceTemplate{}, nil
    }
	vServiceTemplate, err := vServiceTemplateParent.GetTemplate(context.TODO())
	if err != nil {
		log.Errorf("[getGlobalTenantTemplateResolver]Error getting Template object %s", err)
        return &model.GlobalServiceTemplate{}, nil
    }
	dn := vServiceTemplate.DisplayName()
parentLabels := map[string]interface{}{"servicetemplates.global.tsm.tanzu.vmware.com":dn}
vVersion := string(vServiceTemplate.Spec.Version)

    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	ret := &model.GlobalServiceTemplate {
	Id: &dn,
	ParentLabels: parentLabels,
	Version: &vVersion,
	}
	log.Debugf("[getGlobalTenantTemplateResolver]Output object %v", ret)

	return ret, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Resources Node: Tenant PKG: Global
//////////////////////////////////////
func getGlobalTenantResourcesResolver(obj *model.GlobalTenant, id *string) ([]*model.GlobalTenantResource, error) {
	log.Debugf("[getGlobalTenantResourcesResolver]Parent Object %+v", obj)
	var vGlobalTenantResourceList []*model.GlobalTenantResource
	if id != nil && *id != "" {
		log.Debugf("[getGlobalTenantResourcesResolver]Id %q", *id)
		vTenantResource, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).Tenants(getParentName(obj.ParentLabels, "tenants.global.tsm.tanzu.vmware.com")).GetResources(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalTenantResourcesResolver]Error getting Resources node %q : %s", *id, err)
            return vGlobalTenantResourceList, nil
        }
		dn := vTenantResource.DisplayName()
parentLabels := map[string]interface{}{"tenantresources.global.tsm.tanzu.vmware.com":dn}
vType := string(vTenantResource.Spec.Type)
vLocation := string(vTenantResource.Spec.Location)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTenantResource {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Location: &vLocation,
	}
		vGlobalTenantResourceList = append(vGlobalTenantResourceList, ret)

		log.Debugf("[getGlobalTenantResourcesResolver]Output Resources objects %v", vGlobalTenantResourceList)

		return vGlobalTenantResourceList, nil
	}

	log.Debug("[getGlobalTenantResourcesResolver]Id is empty, process all Resourcess")

	vTenantResourceParent, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).GetTenants(context.TODO(), getParentName(obj.ParentLabels, "tenants.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTenantResourcesResolver]Error getting parent node %s", err)
        return vGlobalTenantResourceList, nil
    }
	vTenantResourceAllObj, err := vTenantResourceParent.GetAllResources(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalTenantResourcesResolver]Error getting Resources objects %s", err)
        return vGlobalTenantResourceList, nil
    }
	for _, i := range vTenantResourceAllObj {
		vTenantResource, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).Tenants(getParentName(obj.ParentLabels, "tenants.global.tsm.tanzu.vmware.com")).GetResources(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalTenantResourcesResolver]Error getting Resources node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vTenantResource.DisplayName()
parentLabels := map[string]interface{}{"tenantresources.global.tsm.tanzu.vmware.com":dn}
vType := string(vTenantResource.Spec.Type)
vLocation := string(vTenantResource.Spec.Location)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalTenantResource {
	Id: &dn,
	ParentLabels: parentLabels,
	Type: &vType,
	Location: &vLocation,
	}
		vGlobalTenantResourceList = append(vGlobalTenantResourceList, ret)
	}

	log.Debugf("[getGlobalTenantResourcesResolver]Output Resources objects %v", vGlobalTenantResourceList)

	return vGlobalTenantResourceList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Annotations Node: Tenant PKG: Global
//////////////////////////////////////
func getGlobalTenantAnnotationsResolver(obj *model.GlobalTenant, id *string) ([]*model.GlobalAnnotation, error) {
	log.Debugf("[getGlobalTenantAnnotationsResolver]Parent Object %+v", obj)
	var vGlobalAnnotationList []*model.GlobalAnnotation
	if id != nil && *id != "" {
		log.Debugf("[getGlobalTenantAnnotationsResolver]Id %q", *id)
		vAnnotation, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).Tenants(getParentName(obj.ParentLabels, "tenants.global.tsm.tanzu.vmware.com")).GetAnnotations(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalTenantAnnotationsResolver]Error getting Annotations node %q : %s", *id, err)
            return vGlobalAnnotationList, nil
        }
		dn := vAnnotation.DisplayName()
parentLabels := map[string]interface{}{"annotations.global.tsm.tanzu.vmware.com":dn}
vName := string(vAnnotation.Spec.Name)
vData := string(vAnnotation.Spec.Data)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAnnotation {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Data: &vData,
	}
		vGlobalAnnotationList = append(vGlobalAnnotationList, ret)

		log.Debugf("[getGlobalTenantAnnotationsResolver]Output Annotations objects %v", vGlobalAnnotationList)

		return vGlobalAnnotationList, nil
	}

	log.Debug("[getGlobalTenantAnnotationsResolver]Id is empty, process all Annotationss")

	vAnnotationParent, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).GetTenants(context.TODO(), getParentName(obj.ParentLabels, "tenants.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalTenantAnnotationsResolver]Error getting parent node %s", err)
        return vGlobalAnnotationList, nil
    }
	vAnnotationAllObj, err := vAnnotationParent.GetAllAnnotations(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalTenantAnnotationsResolver]Error getting Annotations objects %s", err)
        return vGlobalAnnotationList, nil
    }
	for _, i := range vAnnotationAllObj {
		vAnnotation, err := nc.GlobalRoot().Runtime().AllsparkServices().GlobalRegistrationService(getParentName(obj.ParentLabels, "globalregistrationservices.global.tsm.tanzu.vmware.com")).Tenants(getParentName(obj.ParentLabels, "tenants.global.tsm.tanzu.vmware.com")).GetAnnotations(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalTenantAnnotationsResolver]Error getting Annotations node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAnnotation.DisplayName()
parentLabels := map[string]interface{}{"annotations.global.tsm.tanzu.vmware.com":dn}
vName := string(vAnnotation.Spec.Name)
vData := string(vAnnotation.Spec.Data)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAnnotation {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Data: &vData,
	}
		vGlobalAnnotationList = append(vGlobalAnnotationList, ret)
	}

	log.Debugf("[getGlobalTenantAnnotationsResolver]Output Annotations objects %v", vGlobalAnnotationList)

	return vGlobalAnnotationList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Users Node: UserFolder PKG: Global
//////////////////////////////////////
func getGlobalUserFolderUsersResolver(obj *model.GlobalUserFolder, id *string) ([]*model.GlobalUser, error) {
	log.Debugf("[getGlobalUserFolderUsersResolver]Parent Object %+v", obj)
	var vGlobalUserList []*model.GlobalUser
	if id != nil && *id != "" {
		log.Debugf("[getGlobalUserFolderUsersResolver]Id %q", *id)
		vUser, err := nc.GlobalRoot().Runtime().UserFolder().GetUsers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalUserFolderUsersResolver]Error getting Users node %q : %s", *id, err)
            return vGlobalUserList, nil
        }
		dn := vUser.DisplayName()
parentLabels := map[string]interface{}{"users.global.tsm.tanzu.vmware.com":dn}
vUsername := string(vUser.Spec.Username)
vPassword := string(vUser.Spec.Password)
vEmail := string(vUser.Spec.Email)
AccessTokens, _ := json.Marshal(vUser.Spec.AccessTokens)
AccessTokensData := string(AccessTokens)
vLastActionDate := string(vUser.Spec.LastActionDate)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUser {
	Id: &dn,
	ParentLabels: parentLabels,
	Username: &vUsername,
	Password: &vPassword,
	Email: &vEmail,
	AccessTokens: &AccessTokensData,
	LastActionDate: &vLastActionDate,
	}
		vGlobalUserList = append(vGlobalUserList, ret)

		log.Debugf("[getGlobalUserFolderUsersResolver]Output Users objects %v", vGlobalUserList)

		return vGlobalUserList, nil
	}

	log.Debug("[getGlobalUserFolderUsersResolver]Id is empty, process all Userss")

	vUserParent, err := nc.GlobalRoot().Runtime().GetUserFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalUserFolderUsersResolver]Error getting parent node %s", err)
        return vGlobalUserList, nil
    }
	vUserAllObj, err := vUserParent.GetAllUsers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalUserFolderUsersResolver]Error getting Users objects %s", err)
        return vGlobalUserList, nil
    }
	for _, i := range vUserAllObj {
		vUser, err := nc.GlobalRoot().Runtime().UserFolder().GetUsers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalUserFolderUsersResolver]Error getting Users node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vUser.DisplayName()
parentLabels := map[string]interface{}{"users.global.tsm.tanzu.vmware.com":dn}
vUsername := string(vUser.Spec.Username)
vPassword := string(vUser.Spec.Password)
vEmail := string(vUser.Spec.Email)
AccessTokens, _ := json.Marshal(vUser.Spec.AccessTokens)
AccessTokensData := string(AccessTokens)
vLastActionDate := string(vUser.Spec.LastActionDate)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUser {
	Id: &dn,
	ParentLabels: parentLabels,
	Username: &vUsername,
	Password: &vPassword,
	Email: &vEmail,
	AccessTokens: &AccessTokensData,
	LastActionDate: &vLastActionDate,
	}
		vGlobalUserList = append(vGlobalUserList, ret)
	}

	log.Debugf("[getGlobalUserFolderUsersResolver]Output Users objects %v", vGlobalUserList)

	return vGlobalUserList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AppUsers Node: UserFolder PKG: Global
//////////////////////////////////////
func getGlobalUserFolderAppUsersResolver(obj *model.GlobalUserFolder, id *string) ([]*model.GlobalAppUser, error) {
	log.Debugf("[getGlobalUserFolderAppUsersResolver]Parent Object %+v", obj)
	var vGlobalAppUserList []*model.GlobalAppUser
	if id != nil && *id != "" {
		log.Debugf("[getGlobalUserFolderAppUsersResolver]Id %q", *id)
		vAppUser, err := nc.GlobalRoot().Runtime().UserFolder().GetAppUsers(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalUserFolderAppUsersResolver]Error getting AppUsers node %q : %s", *id, err)
            return vGlobalAppUserList, nil
        }
		dn := vAppUser.DisplayName()
parentLabels := map[string]interface{}{"appusers.global.tsm.tanzu.vmware.com":dn}

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAppUser {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalAppUserList = append(vGlobalAppUserList, ret)

		log.Debugf("[getGlobalUserFolderAppUsersResolver]Output AppUsers objects %v", vGlobalAppUserList)

		return vGlobalAppUserList, nil
	}

	log.Debug("[getGlobalUserFolderAppUsersResolver]Id is empty, process all AppUserss")

	vAppUserParent, err := nc.GlobalRoot().Runtime().GetUserFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalUserFolderAppUsersResolver]Error getting parent node %s", err)
        return vGlobalAppUserList, nil
    }
	vAppUserAllObj, err := vAppUserParent.GetAllAppUsers(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalUserFolderAppUsersResolver]Error getting AppUsers objects %s", err)
        return vGlobalAppUserList, nil
    }
	for _, i := range vAppUserAllObj {
		vAppUser, err := nc.GlobalRoot().Runtime().UserFolder().GetAppUsers(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalUserFolderAppUsersResolver]Error getting AppUsers node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAppUser.DisplayName()
parentLabels := map[string]interface{}{"appusers.global.tsm.tanzu.vmware.com":dn}

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAppUser {
	Id: &dn,
	ParentLabels: parentLabels,
	}
		vGlobalAppUserList = append(vGlobalAppUserList, ret)
	}

	log.Debugf("[getGlobalUserFolderAppUsersResolver]Output AppUsers objects %v", vGlobalAppUserList)

	return vGlobalAppUserList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: AccessToken Node: UserFolder PKG: Global
//////////////////////////////////////
func getGlobalUserFolderAccessTokenResolver(obj *model.GlobalUserFolder, id *string) ([]*model.GlobalAccessToken, error) {
	log.Debugf("[getGlobalUserFolderAccessTokenResolver]Parent Object %+v", obj)
	var vGlobalAccessTokenList []*model.GlobalAccessToken
	if id != nil && *id != "" {
		log.Debugf("[getGlobalUserFolderAccessTokenResolver]Id %q", *id)
		vAccessToken, err := nc.GlobalRoot().Runtime().UserFolder().GetAccessToken(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalUserFolderAccessTokenResolver]Error getting AccessToken node %q : %s", *id, err)
            return vGlobalAccessTokenList, nil
        }
		dn := vAccessToken.DisplayName()
parentLabels := map[string]interface{}{"accesstokens.global.tsm.tanzu.vmware.com":dn}
vTtl := int(vAccessToken.Spec.Ttl)
vCreated := string(vAccessToken.Spec.Created)
vUserId := string(vAccessToken.Spec.UserId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAccessToken {
	Id: &dn,
	ParentLabels: parentLabels,
	Ttl: &vTtl,
	Created: &vCreated,
	UserId: &vUserId,
	}
		vGlobalAccessTokenList = append(vGlobalAccessTokenList, ret)

		log.Debugf("[getGlobalUserFolderAccessTokenResolver]Output AccessToken objects %v", vGlobalAccessTokenList)

		return vGlobalAccessTokenList, nil
	}

	log.Debug("[getGlobalUserFolderAccessTokenResolver]Id is empty, process all AccessTokens")

	vAccessTokenParent, err := nc.GlobalRoot().Runtime().GetUserFolder(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalUserFolderAccessTokenResolver]Error getting parent node %s", err)
        return vGlobalAccessTokenList, nil
    }
	vAccessTokenAllObj, err := vAccessTokenParent.GetAllAccessToken(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalUserFolderAccessTokenResolver]Error getting AccessToken objects %s", err)
        return vGlobalAccessTokenList, nil
    }
	for _, i := range vAccessTokenAllObj {
		vAccessToken, err := nc.GlobalRoot().Runtime().UserFolder().GetAccessToken(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalUserFolderAccessTokenResolver]Error getting AccessToken node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vAccessToken.DisplayName()
parentLabels := map[string]interface{}{"accesstokens.global.tsm.tanzu.vmware.com":dn}
vTtl := int(vAccessToken.Spec.Ttl)
vCreated := string(vAccessToken.Spec.Created)
vUserId := string(vAccessToken.Spec.UserId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalAccessToken {
	Id: &dn,
	ParentLabels: parentLabels,
	Ttl: &vTtl,
	Created: &vCreated,
	UserId: &vUserId,
	}
		vGlobalAccessTokenList = append(vGlobalAccessTokenList, ret)
	}

	log.Debugf("[getGlobalUserFolderAccessTokenResolver]Output AccessToken objects %v", vGlobalAccessTokenList)

	return vGlobalAccessTokenList, nil
}

//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: Preferences Node: User PKG: Global
//////////////////////////////////////
func getGlobalUserPreferencesResolver(obj *model.GlobalUser, id *string) ([]*model.GlobalUserPreference, error) {
	log.Debugf("[getGlobalUserPreferencesResolver]Parent Object %+v", obj)
	var vGlobalUserPreferenceList []*model.GlobalUserPreference
	if id != nil && *id != "" {
		log.Debugf("[getGlobalUserPreferencesResolver]Id %q", *id)
		vUserPreference, err := nc.GlobalRoot().Runtime().UserFolder().Users(getParentName(obj.ParentLabels, "users.global.tsm.tanzu.vmware.com")).GetPreferences(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalUserPreferencesResolver]Error getting Preferences node %q : %s", *id, err)
            return vGlobalUserPreferenceList, nil
        }
		dn := vUserPreference.DisplayName()
parentLabels := map[string]interface{}{"userpreferences.global.tsm.tanzu.vmware.com":dn}
vName := string(vUserPreference.Spec.Name)
vData := string(vUserPreference.Spec.Data)
vUserId := string(vUserPreference.Spec.UserId)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUserPreference {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Data: &vData,
	UserId: &vUserId,
	}
		vGlobalUserPreferenceList = append(vGlobalUserPreferenceList, ret)

		log.Debugf("[getGlobalUserPreferencesResolver]Output Preferences objects %v", vGlobalUserPreferenceList)

		return vGlobalUserPreferenceList, nil
	}

	log.Debug("[getGlobalUserPreferencesResolver]Id is empty, process all Preferencess")

	vUserPreferenceParent, err := nc.GlobalRoot().Runtime().UserFolder().GetUsers(context.TODO(), getParentName(obj.ParentLabels, "users.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalUserPreferencesResolver]Error getting parent node %s", err)
        return vGlobalUserPreferenceList, nil
    }
	vUserPreferenceAllObj, err := vUserPreferenceParent.GetAllPreferences(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalUserPreferencesResolver]Error getting Preferences objects %s", err)
        return vGlobalUserPreferenceList, nil
    }
	for _, i := range vUserPreferenceAllObj {
		vUserPreference, err := nc.GlobalRoot().Runtime().UserFolder().Users(getParentName(obj.ParentLabels, "users.global.tsm.tanzu.vmware.com")).GetPreferences(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalUserPreferencesResolver]Error getting Preferences node %q : %s", i.DisplayName(), err)
            continue
		}
		dn := vUserPreference.DisplayName()
parentLabels := map[string]interface{}{"userpreferences.global.tsm.tanzu.vmware.com":dn}
vName := string(vUserPreference.Spec.Name)
vData := string(vUserPreference.Spec.Data)
vUserId := string(vUserPreference.Spec.UserId)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalUserPreference {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Data: &vData,
	UserId: &vUserId,
	}
		vGlobalUserPreferenceList = append(vGlobalUserPreferenceList, ret)
	}

	log.Debugf("[getGlobalUserPreferencesResolver]Output Preferences objects %v", vGlobalUserPreferenceList)

	return vGlobalUserPreferenceList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: DestinationRules Node: VirtualService PKG: Global
//////////////////////////////////////
func getGlobalVirtualServiceDestinationRulesResolver(obj *model.GlobalVirtualService, id *string) ([]*model.GlobalDestinationRule, error) {
	log.Debugf("[getGlobalVirtualServiceDestinationRulesResolver]Parent Object %+v", obj)
	var vGlobalDestinationRuleList []*model.GlobalDestinationRule
	if id != nil && *id != "" {
		log.Debugf("[getGlobalVirtualServiceDestinationRulesResolver]Id %q", *id)
		vDestinationRuleParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), getParentName(obj.ParentLabels, "virtualservices.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalVirtualServiceDestinationRulesResolver]Error getting DestinationRules %q : %s", *id, err)
			return vGlobalDestinationRuleList, nil
		}
		vDestinationRule, err := vDestinationRuleParent.GetDestinationRules(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalVirtualServiceDestinationRulesResolver]Error getting DestinationRules %q : %s", *id, err)
			return vGlobalDestinationRuleList, nil
		}
		dn := vDestinationRule.DisplayName()
parentLabels := map[string]interface{}{"destinationrules.global.tsm.tanzu.vmware.com":dn}
vName := string(vDestinationRule.Spec.Name)
vAnnotations := string(vDestinationRule.Spec.Annotations)
vLabels := string(vDestinationRule.Spec.Labels)
vCreationTimestamp := string(vDestinationRule.Spec.CreationTimestamp)
vApiLink := string(vDestinationRule.Spec.ApiLink)
vUid := string(vDestinationRule.Spec.Uid)
vHost := string(vDestinationRule.Spec.Host)
vTrafficPolicy := string(vDestinationRule.Spec.TrafficPolicy)
vSubsets := string(vDestinationRule.Spec.Subsets)
ExportTo, _ := json.Marshal(vDestinationRule.Spec.ExportTo)
ExportToData := string(ExportTo)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDestinationRule {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Host: &vHost,
	TrafficPolicy: &vTrafficPolicy,
	Subsets: &vSubsets,
	ExportTo: &ExportToData,
	}
		vGlobalDestinationRuleList = append(vGlobalDestinationRuleList, ret)

		log.Debugf("[getGlobalVirtualServiceDestinationRulesResolver]Output DestinationRules objects %v", vGlobalDestinationRuleList)

		return vGlobalDestinationRuleList, nil
	}

	log.Debug("[getGlobalVirtualServiceDestinationRulesResolver]Id is empty, process all DestinationRuless")

	vDestinationRuleParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), getParentName(obj.ParentLabels, "virtualservices.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalVirtualServiceDestinationRulesResolver]Error getting parent node %s", err)
        return vGlobalDestinationRuleList, nil
    }
	vDestinationRuleAllObj, err := vDestinationRuleParent.GetAllDestinationRules(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalVirtualServiceDestinationRulesResolver]Error getting DestinationRules %s", err)
        return vGlobalDestinationRuleList, nil
    }
	for _, i := range vDestinationRuleAllObj {
		vDestinationRuleParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), getParentName(obj.ParentLabels, "virtualservices.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalVirtualServiceDestinationRulesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vDestinationRule, err := vDestinationRuleParent.GetDestinationRules(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalVirtualServiceDestinationRulesResolver]Error getting DestinationRules node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vDestinationRule.DisplayName()
parentLabels := map[string]interface{}{"destinationrules.global.tsm.tanzu.vmware.com":dn}
vName := string(vDestinationRule.Spec.Name)
vAnnotations := string(vDestinationRule.Spec.Annotations)
vLabels := string(vDestinationRule.Spec.Labels)
vCreationTimestamp := string(vDestinationRule.Spec.CreationTimestamp)
vApiLink := string(vDestinationRule.Spec.ApiLink)
vUid := string(vDestinationRule.Spec.Uid)
vHost := string(vDestinationRule.Spec.Host)
vTrafficPolicy := string(vDestinationRule.Spec.TrafficPolicy)
vSubsets := string(vDestinationRule.Spec.Subsets)
ExportTo, _ := json.Marshal(vDestinationRule.Spec.ExportTo)
ExportToData := string(ExportTo)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalDestinationRule {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Annotations: &vAnnotations,
	Labels: &vLabels,
	CreationTimestamp: &vCreationTimestamp,
	ApiLink: &vApiLink,
	Uid: &vUid,
	Host: &vHost,
	TrafficPolicy: &vTrafficPolicy,
	Subsets: &vSubsets,
	ExportTo: &ExportToData,
	}
		vGlobalDestinationRuleList = append(vGlobalDestinationRuleList, ret)
	}
	log.Debugf("[getGlobalVirtualServiceDestinationRulesResolver]List of DestinationRules object %v", vGlobalDestinationRuleList)
	return vGlobalDestinationRuleList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Services Node: VirtualService PKG: Global
//////////////////////////////////////
func getGlobalVirtualServiceServicesResolver(obj *model.GlobalVirtualService, id *string) ([]*model.GlobalService, error) {
	log.Debugf("[getGlobalVirtualServiceServicesResolver]Parent Object %+v", obj)
	var vGlobalServiceList []*model.GlobalService
	if id != nil && *id != "" {
		log.Debugf("[getGlobalVirtualServiceServicesResolver]Id %q", *id)
		vServiceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), getParentName(obj.ParentLabels, "virtualservices.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalVirtualServiceServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		vService, err := vServiceParent.GetServices(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalVirtualServiceServicesResolver]Error getting Services %q : %s", *id, err)
			return vGlobalServiceList, nil
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)

		log.Debugf("[getGlobalVirtualServiceServicesResolver]Output Services objects %v", vGlobalServiceList)

		return vGlobalServiceList, nil
	}

	log.Debug("[getGlobalVirtualServiceServicesResolver]Id is empty, process all Servicess")

	vServiceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), getParentName(obj.ParentLabels, "virtualservices.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalVirtualServiceServicesResolver]Error getting parent node %s", err)
        return vGlobalServiceList, nil
    }
	vServiceAllObj, err := vServiceParent.GetAllServices(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalVirtualServiceServicesResolver]Error getting Services %s", err)
        return vGlobalServiceList, nil
    }
	for _, i := range vServiceAllObj {
		vServiceParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), getParentName(obj.ParentLabels, "virtualservices.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalVirtualServiceServicesResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vService, err := vServiceParent.GetServices(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalVirtualServiceServicesResolver]Error getting Services node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vService.DisplayName()
parentLabels := map[string]interface{}{"services.global.tsm.tanzu.vmware.com":dn}
vMetadata := string(vService.Spec.Metadata)
vSpec := string(vService.Spec.Spec)
vName := string(vService.Spec.Name)
vNamespace := string(vService.Spec.Namespace)
vApiLink := string(vService.Spec.ApiLink)
vIpAddress := string(vService.Spec.IpAddress)
vAnnotations := string(vService.Spec.Annotations)
vCreationTimestamp := string(vService.Spec.CreationTimestamp)
vLabels := string(vService.Spec.Labels)
vUid := string(vService.Spec.Uid)
vPorts := string(vService.Spec.Ports)
vSelector := string(vService.Spec.Selector)
vType := string(vService.Spec.Type)
vStatus := string(vService.Spec.Status)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalService {
	Id: &dn,
	ParentLabels: parentLabels,
	Metadata: &vMetadata,
	Spec: &vSpec,
	Name: &vName,
	Namespace: &vNamespace,
	ApiLink: &vApiLink,
	IpAddress: &vIpAddress,
	Annotations: &vAnnotations,
	CreationTimestamp: &vCreationTimestamp,
	Labels: &vLabels,
	Uid: &vUid,
	Ports: &vPorts,
	Selector: &vSelector,
	Type: &vType,
	Status: &vStatus,
	}
		vGlobalServiceList = append(vGlobalServiceList, ret)
	}
	log.Debugf("[getGlobalVirtualServiceServicesResolver]List of Services object %v", vGlobalServiceList)
	return vGlobalServiceList, nil
}

//////////////////////////////////////
// LINKS RESOLVER
// FieldName: Gateways Node: VirtualService PKG: Global
//////////////////////////////////////
func getGlobalVirtualServiceGatewaysResolver(obj *model.GlobalVirtualService, id *string) ([]*model.GlobalGateway, error) {
	log.Debugf("[getGlobalVirtualServiceGatewaysResolver]Parent Object %+v", obj)
	var vGlobalGatewayList []*model.GlobalGateway
	if id != nil && *id != "" {
		log.Debugf("[getGlobalVirtualServiceGatewaysResolver]Id %q", *id)
		vGatewayParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), getParentName(obj.ParentLabels, "virtualservices.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalVirtualServiceGatewaysResolver]Error getting Gateways %q : %s", *id, err)
			return vGlobalGatewayList, nil
		}
		vGateway, err := vGatewayParent.GetGateways(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getGlobalVirtualServiceGatewaysResolver]Error getting Gateways %q : %s", *id, err)
			return vGlobalGatewayList, nil
		}
		dn := vGateway.DisplayName()
parentLabels := map[string]interface{}{"gateways.global.tsm.tanzu.vmware.com":dn}
vName := string(vGateway.Spec.Name)
vLabels := string(vGateway.Spec.Labels)
vAnnotations := string(vGateway.Spec.Annotations)
vSpec := string(vGateway.Spec.Spec)

        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGateway {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalGatewayList = append(vGlobalGatewayList, ret)

		log.Debugf("[getGlobalVirtualServiceGatewaysResolver]Output Gateways objects %v", vGlobalGatewayList)

		return vGlobalGatewayList, nil
	}

	log.Debug("[getGlobalVirtualServiceGatewaysResolver]Id is empty, process all Gatewayss")

	vGatewayParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), getParentName(obj.ParentLabels, "virtualservices.global.tsm.tanzu.vmware.com"))
	if err != nil {
	    log.Errorf("[getGlobalVirtualServiceGatewaysResolver]Error getting parent node %s", err)
        return vGlobalGatewayList, nil
    }
	vGatewayAllObj, err := vGatewayParent.GetAllGateways(context.TODO())
	if err != nil {
	    log.Errorf("[getGlobalVirtualServiceGatewaysResolver]Error getting Gateways %s", err)
        return vGlobalGatewayList, nil
    }
	for _, i := range vGatewayAllObj {
		vGatewayParent, err := nc.GlobalRoot().Inventory().Clusters(getParentName(obj.ParentLabels, "clusters.global.tsm.tanzu.vmware.com")).Domains(getParentName(obj.ParentLabels, "domains.global.tsm.tanzu.vmware.com")).GetVirtualServices(context.TODO(), getParentName(obj.ParentLabels, "virtualservices.global.tsm.tanzu.vmware.com"))
		if err != nil {
			log.Errorf("[getGlobalVirtualServiceGatewaysResolver]Error getting parent node %s, skipping...", err)
            continue
		}
		vGateway, err := vGatewayParent.GetGateways(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[getGlobalVirtualServiceGatewaysResolver]Error getting Gateways node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		dn := vGateway.DisplayName()
parentLabels := map[string]interface{}{"gateways.global.tsm.tanzu.vmware.com":dn}
vName := string(vGateway.Spec.Name)
vLabels := string(vGateway.Spec.Labels)
vAnnotations := string(vGateway.Spec.Annotations)
vSpec := string(vGateway.Spec.Spec)

		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		ret := &model.GlobalGateway {
	Id: &dn,
	ParentLabels: parentLabels,
	Name: &vName,
	Labels: &vLabels,
	Annotations: &vAnnotations,
	Spec: &vSpec,
	}
		vGlobalGatewayList = append(vGlobalGatewayList, ret)
	}
	log.Debugf("[getGlobalVirtualServiceGatewaysResolver]List of Gateways object %v", vGlobalGatewayList)
	return vGlobalGatewayList, nil
}


/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "nexustempmodule/apis/global.tsm.tanzu.vmware.com/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourceGroupRTLister helps list ResourceGroupRTs.
// All objects returned here must be treated as read-only.
type ResourceGroupRTLister interface {
	// List lists all ResourceGroupRTs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ResourceGroupRT, err error)
	// Get retrieves the ResourceGroupRT from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ResourceGroupRT, error)
	ResourceGroupRTListerExpansion
}

// resourceGroupRTLister implements the ResourceGroupRTLister interface.
type resourceGroupRTLister struct {
	indexer cache.Indexer
}

// NewResourceGroupRTLister returns a new ResourceGroupRTLister.
func NewResourceGroupRTLister(indexer cache.Indexer) ResourceGroupRTLister {
	return &resourceGroupRTLister{indexer: indexer}
}

// List lists all ResourceGroupRTs in the indexer.
func (s *resourceGroupRTLister) List(selector labels.Selector) (ret []*v1.ResourceGroupRT, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ResourceGroupRT))
	})
	return ret, err
}

// Get retrieves the ResourceGroupRT from the index for a given name.
func (s *resourceGroupRTLister) Get(name string) (*v1.ResourceGroupRT, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("resourcegrouprt"), name)
	}
	return obj.(*v1.ResourceGroupRT), nil
}

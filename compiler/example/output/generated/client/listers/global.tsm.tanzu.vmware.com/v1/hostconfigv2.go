/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "nexustempmodule/apis/global.tsm.tanzu.vmware.com/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HostConfigV2Lister helps list HostConfigV2s.
// All objects returned here must be treated as read-only.
type HostConfigV2Lister interface {
	// List lists all HostConfigV2s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.HostConfigV2, err error)
	// Get retrieves the HostConfigV2 from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.HostConfigV2, error)
	HostConfigV2ListerExpansion
}

// hostConfigV2Lister implements the HostConfigV2Lister interface.
type hostConfigV2Lister struct {
	indexer cache.Indexer
}

// NewHostConfigV2Lister returns a new HostConfigV2Lister.
func NewHostConfigV2Lister(indexer cache.Indexer) HostConfigV2Lister {
	return &hostConfigV2Lister{indexer: indexer}
}

// List lists all HostConfigV2s in the indexer.
func (s *hostConfigV2Lister) List(selector labels.Selector) (ret []*v1.HostConfigV2, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HostConfigV2))
	})
	return ret, err
}

// Get retrieves the HostConfigV2 from the index for a given name.
func (s *hostConfigV2Lister) Get(name string) (*v1.HostConfigV2, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("hostconfigv2"), name)
	}
	return obj.(*v1.HostConfigV2), nil
}

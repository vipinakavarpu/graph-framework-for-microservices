/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	v1 "nexustempmodule/apis/global.tsm.tanzu.vmware.com/v1"
	scheme "nexustempmodule/client/clientset/versioned/scheme"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// HaConfigV2sGetter has a method to return a HaConfigV2Interface.
// A group's client should implement this interface.
type HaConfigV2sGetter interface {
	HaConfigV2s() HaConfigV2Interface
}

// HaConfigV2Interface has methods to work with HaConfigV2 resources.
type HaConfigV2Interface interface {
	Create(ctx context.Context, haConfigV2 *v1.HaConfigV2, opts metav1.CreateOptions) (*v1.HaConfigV2, error)
	Update(ctx context.Context, haConfigV2 *v1.HaConfigV2, opts metav1.UpdateOptions) (*v1.HaConfigV2, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.HaConfigV2, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.HaConfigV2List, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.HaConfigV2, err error)
	HaConfigV2Expansion
}

// haConfigV2s implements HaConfigV2Interface
type haConfigV2s struct {
	client rest.Interface
}

// newHaConfigV2s returns a HaConfigV2s
func newHaConfigV2s(c *GlobalTsmV1Client) *haConfigV2s {
	return &haConfigV2s{
		client: c.RESTClient(),
	}
}

// Get takes name of the haConfigV2, and returns the corresponding haConfigV2 object, and an error if there is any.
func (c *haConfigV2s) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.HaConfigV2, err error) {
	result = &v1.HaConfigV2{}
	err = c.client.Get().
		Resource("haconfigv2s").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of HaConfigV2s that match those selectors.
func (c *haConfigV2s) List(ctx context.Context, opts metav1.ListOptions) (result *v1.HaConfigV2List, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.HaConfigV2List{}
	err = c.client.Get().
		Resource("haconfigv2s").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested haConfigV2s.
func (c *haConfigV2s) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("haconfigv2s").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a haConfigV2 and creates it.  Returns the server's representation of the haConfigV2, and an error, if there is any.
func (c *haConfigV2s) Create(ctx context.Context, haConfigV2 *v1.HaConfigV2, opts metav1.CreateOptions) (result *v1.HaConfigV2, err error) {
	result = &v1.HaConfigV2{}
	err = c.client.Post().
		Resource("haconfigv2s").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(haConfigV2).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a haConfigV2 and updates it. Returns the server's representation of the haConfigV2, and an error, if there is any.
func (c *haConfigV2s) Update(ctx context.Context, haConfigV2 *v1.HaConfigV2, opts metav1.UpdateOptions) (result *v1.HaConfigV2, err error) {
	result = &v1.HaConfigV2{}
	err = c.client.Put().
		Resource("haconfigv2s").
		Name(haConfigV2.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(haConfigV2).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the haConfigV2 and deletes it. Returns an error if one occurs.
func (c *haConfigV2s) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("haconfigv2s").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *haConfigV2s) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("haconfigv2s").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched haConfigV2.
func (c *haConfigV2s) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.HaConfigV2, err error) {
	result = &v1.HaConfigV2{}
	err = c.client.Patch(pt).
		Resource("haconfigv2s").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

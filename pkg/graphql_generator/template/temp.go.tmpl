package graph

import (
	"context"
	"encoding/json"
	"fmt"
	nexus_client "{{.BaseClientsetImport}}nexus-client"
	"{{.BaseClientsetImport}}nexus-gql/graph/model"

	qm "gitlab.eng.vmware.com/nsx-allspark_users/go-protos/pkg/query-manager"
	libgrpc "gitlab.eng.vmware.com/nsx-allspark_users/lib-go/grpc"
	"k8s.io/client-go/rest"
)

var c resolverConfig

type resolverConfig struct {
	{{ range  $key, $node := .Nodes }}{{ if $node.IsSingleton }}v{{$node.SimpleGroupTypeName}}{{$node.BaseNodeName}} *nexus_client.{{$node.SimpleGroupTypeName}}{{$node.BaseNodeName}}
	{{ else }}{{ end }}{{ end }}
}

//////////////////////////////////////
// Nexus K8sAPIEndpointConfig
//////////////////////////////////////
func getK8sAPIEndpointConfig() *rest.Config {

	var config *rest.Config
	config = &rest.Config{
		Host: "http://localhost:45192",
	}

	return config
}

//////////////////////////////////////
// GRPC SERVER CONFIG
//////////////////////////////////////
func grpcServer() qm.ServerClient{
	addr := "localhost:45781"
	conn, err := libgrpc.ClientConn(addr, libgrpc.Config{})
	if err != nil {
		fmt.Printf("Failed to connect to query-manager server, err: %v", err)
	}
	return qm.NewServerClient(conn)
}
********************
1) SimpleGroupTypeName ===> pkg Name
2) BaseNodeName ===> Node Name

//////////////////////////////////////
// Resolver for Parent Node: {{.Node.SimpleGroupTypeName}}
//////////////////////////////////////
func (c *resolverConfig) getRootResolver() (*model.{{.Node.SimpleGroupTypeName}}{{.Node.BaseNodeName}}, error) {
	k8sApiConfig := getK8sAPIEndpointConfig()
	nc, err := nexus_client.NewForConfig(k8sApiConfig)
	if err != nil {
		panic(err)
	}

	v{{.Node.BaseNodeName}}, err := nc.Get{{.Node.SimpleGroupTypeName}}{{.Node.BaseNodeName}}(context.TODO())
	if err != nil {
		panic(err)
	}
	c.v{{.Node.SimpleGroupTypeName}}{{.Node.BaseNodeName}} = v{{.Node.BaseNodeName}}
	ret := &model.{{.Node.SimpleGroupTypeName}}{{.Node.BaseNodeName}} {
	{{.Fields}}
	}
	return ret, nil
}

******************
1) SimpleGroupTypeName ===> pkg Name
2) BaseNodeName ===> Node Name
3) Child.BaseNodeName ---> ChildNode Name
4) Child.SimpleGroupTypeName --> Child Pkg Name
5) Child Fields List


//////////////////////////////////////
// Child/Link Node : {{.Child.FieldName}}
// Resolver for {{.Node.BaseNodeName}}
//////////////////////////////////////
func (c *resolverConfig) get{{.Node.SimpleGroupTypeName}}{{.Node.BaseNodeName}}{{.Child.FieldName}}Resolver() (*model.{{.Child.SimpleGroupTypeName}}{{.Child.BaseNodeName}}, error) {
	v{{.Child.BaseNodeName}}, err := c.v{{.Node.SimpleGroupTypeName}}{{.Node.BaseNodeName}}.Get{{.Child.FieldName}}(context.TODO())
	if err != nil {
		panic(err)
	}
	c.v{{.Child.SimpleGroupTypeName}}{{.Child.BaseNodeName}} = v{{.Child.BaseNodeName}}
	ret := &model.{{.Child.SimpleGroupTypeName}}{{.Child.BaseNodeName}}{
	{{.Fields}}
	}
	return ret, nil
}



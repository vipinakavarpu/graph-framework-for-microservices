// Code generated by nexus. DO NOT EDIT.

// Nexus client is a shim layer working over k8s API meant to simplify graph operation on nexus nodes.
// Features of nexus client:
// - create/get/update/delete/list of nexus nodes,
// - name hashing to avoid name collision between objects with same name but different parents,
// - ability to get, create and delete child of given parent object,
// - ability to add link and remove link to given object,
// - recursive delete of object and all it's children.
// To initialize client use NewForConfig function with Rest Config as a parameter. After that you can start using
// nexus client. You can check example in: https://gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/docs/-/tree/master/example/crudapp

package nexus_client

import (
	"context"
	"encoding/json"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/rest"

	baseClientset "gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/compiler.git/example/output/crd_generated/client/clientset/versioned"
	fakeBaseClienset "gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/compiler.git/example/output/crd_generated/client/clientset/versioned/fake"
	"gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/compiler.git/example/output/crd_generated/common"
	"gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/compiler.git/example/output/crd_generated/helper"

	baseconfigtsmtanzuvmwarecomv1 "gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/compiler.git/example/output/crd_generated/apis/config.tsm.tanzu.vmware.com/v1"
	basegnstsmtanzuvmwarecomv1 "gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/compiler.git/example/output/crd_generated/apis/gns.tsm.tanzu.vmware.com/v1"
	baseroottsmtanzuvmwarecomv1 "gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/compiler.git/example/output/crd_generated/apis/root.tsm.tanzu.vmware.com/v1"
)

type Clientset struct {
	baseClient  baseClientset.Interface
	rootTsmV1   *RootTsmV1
	configTsmV1 *ConfigTsmV1
	gnsTsmV1    *GnsTsmV1
}

// NewForConfig returns Client which can be which can be used to connect to database
func NewForConfig(config *rest.Config) (*Clientset, error) {
	baseClient, err := baseClientset.NewForConfig(config)
	if err != nil {
		return nil, err
	}
	client := &Clientset{}
	client.baseClient = baseClient
	client.rootTsmV1 = newRootTsmV1(client)
	client.configTsmV1 = newConfigTsmV1(client)
	client.gnsTsmV1 = newGnsTsmV1(client)

	return client, nil
}

// NewFakeClient creates simple client which can be used for unit tests
func NewFakeClient() *Clientset {
	client := &Clientset{}
	client.baseClient = fakeBaseClienset.NewSimpleClientset()
	client.rootTsmV1 = newRootTsmV1(client)
	client.configTsmV1 = newConfigTsmV1(client)
	client.gnsTsmV1 = newGnsTsmV1(client)

	return client
}

type PatchOp struct {
	Op    string      `json:"op"`
	Path  string      `json:"path"`
	Value interface{} `json:"value,omitempty"`
}

type Patch []PatchOp

func (p Patch) Marshal() ([]byte, error) {
	return json.Marshal(p)
}

func (c *Clientset) Root() *RootTsmV1 {
	return c.rootTsmV1
}
func (c *Clientset) Config() *ConfigTsmV1 {
	return c.configTsmV1
}
func (c *Clientset) Gns() *GnsTsmV1 {
	return c.gnsTsmV1
}

type RootTsmV1 struct {
	client *Clientset
}

func newRootTsmV1(client *Clientset) *RootTsmV1 {
	return &RootTsmV1{
		client: client,
	}
}

type ConfigTsmV1 struct {
	client *Clientset
}

func newConfigTsmV1(client *Clientset) *ConfigTsmV1 {
	return &ConfigTsmV1{
		client: client,
	}
}

type GnsTsmV1 struct {
	client *Clientset
}

func newGnsTsmV1(client *Clientset) *GnsTsmV1 {
	return &GnsTsmV1{
		client: client,
	}
}

// GetRootByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *RootTsmV1) GetRootByName(ctx context.Context, hashedName string) (*RootRoot, error) {
	result, err := group.client.baseClient.
		RootTsmV1().
		Roots().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	return &RootRoot{
		client: group.client,
		Root:   result,
	}, nil
}

// DeleteRootByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *RootTsmV1) DeleteRootByName(ctx context.Context, hashedName string) (err error) {

	result, err := group.client.baseClient.
		RootTsmV1().
		Roots().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return err
	}

	if result.Spec.ConfigGvk != nil {
		err := group.client.
			Config().
			DeleteConfigByName(ctx, result.Spec.ConfigGvk.Name)
		if err != nil {
			return err
		}
	}

	err = group.client.baseClient.
		RootTsmV1().
		Roots().Delete(ctx, hashedName, metav1.DeleteOptions{})
	if err != nil {
		return err
	}

	return
}

// CreateRootByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *RootTsmV1) CreateRootByName(ctx context.Context,
	objToCreate *baseroottsmtanzuvmwarecomv1.Root) (*RootRoot, error) {
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] == "" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.Labels[common.DISPLAY_NAME_LABEL])
	}

	objToCreate.Spec.ConfigGvk = nil

	result, err := group.client.baseClient.
		RootTsmV1().
		Roots().Create(ctx, objToCreate, metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}

	return &RootRoot{
		client: group.client,
		Root:   result,
	}, nil
}

// UpdateRootByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *RootTsmV1) UpdateRootByName(ctx context.Context,
	objToUpdate *baseroottsmtanzuvmwarecomv1.Root) (*RootRoot, error) {
	if objToUpdate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToUpdate.Labels[common.DISPLAY_NAME_LABEL])
	}
	// ResourceVersion must be set for update
	if objToUpdate.ResourceVersion == "" {
		current, err := group.client.baseClient.
			RootTsmV1().
			Roots().Get(ctx, objToUpdate.GetName(), metav1.GetOptions{})
		if err != nil {
			return nil, err
		}
		objToUpdate.ResourceVersion = current.ResourceVersion
	}

	var patch Patch
	patch = append(patch, PatchOp{
		Op:    "replace",
		Path:  "/metadata",
		Value: objToUpdate.ObjectMeta,
	})

	patchValueDisplayName :=
		objToUpdate.Spec.DisplayName
	patchOpDisplayName := PatchOp{
		Op:    "replace",
		Path:  "/spec/displayName",
		Value: patchValueDisplayName,
	}
	patch = append(patch, patchOpDisplayName)

	patchValueCustomBar :=
		objToUpdate.Spec.CustomBar
	patchOpCustomBar := PatchOp{
		Op:    "replace",
		Path:  "/spec/customBar",
		Value: patchValueCustomBar,
	}
	patch = append(patch, patchOpCustomBar)

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err := group.client.baseClient.
		RootTsmV1().
		Roots().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
	if err != nil {
		return nil, err
	}

	return &RootRoot{
		client: group.client,
		Root:   result,
	}, nil
}

// ListRoots returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *RootTsmV1) ListRoots(ctx context.Context,
	opts metav1.ListOptions) (result []*RootRoot, err error) {
	list, err := group.client.baseClient.RootTsmV1().
		Roots().List(ctx, opts)
	if err != nil {
		return nil, err
	}
	result = make([]*RootRoot, len(list.Items))
	for k, v := range list.Items {
		item := v
		result[k] = &RootRoot{
			client: group.client,
			Root:   &item,
		}
	}
	return
}

type RootRoot struct {
	client *Clientset
	*baseroottsmtanzuvmwarecomv1.Root
}

// Delete removes obj and all it's children from the database.
func (obj *RootRoot) Delete(ctx context.Context) error {
	err := obj.client.Root().DeleteRootByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Root = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *RootRoot) Update(ctx context.Context) error {
	result, err := obj.client.Root().UpdateRootByName(ctx, obj.Root)
	if err != nil {
		return err
	}
	obj.Root = result.Root
	return nil
}

// GetRootRoot calculates the hashed name based on parents and
// returns given object
func (c *Clientset) GetRootRoot(ctx context.Context) (result *RootRoot, err error) {
	hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nil, helper.DEFAULT_KEY)
	return c.Root().GetRootByName(ctx, hashedName)
}

func (c *Clientset) RootRoot() *rootRootTsmV1Chainer {
	parentLabels := make(map[string]string)
	parentLabels["roots.root.tsm.tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &rootRootTsmV1Chainer{
		client:       c,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// AddRootRoot calculates hashed name of the object based on
// parents names and creates it. objToCreate.Name is changed to the hashed name. Original name (helper.DEFAULT_KEY) is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *Clientset) AddRootRoot(ctx context.Context,
	objToCreate *baseroottsmtanzuvmwarecomv1.Root) (result *RootRoot, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), nil, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.Root().CreateRootByName(ctx, objToCreate)
}

// DeleteRootRoot calculates hashedName of object based on
// parents and deletes given object
func (c *Clientset) DeleteRootRoot(ctx context.Context) (err error) {
	hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nil, helper.DEFAULT_KEY)
	return c.Root().DeleteRootByName(ctx, hashedName)
}

// GetConfig returns child of given type
func (obj *RootRoot) GetConfig(ctx context.Context) (
	result *ConfigConfig, err error) {
	if obj.Spec.ConfigGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Root.Root", "Config")
	}
	return obj.client.Config().GetConfigByName(ctx, obj.Spec.ConfigGvk.Name)
}

// AddConfig calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *RootRoot) AddConfig(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (result *ConfigConfig, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["roots.root.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["roots.root.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		if objToCreate.GetName() == "" {
			objToCreate.SetName(helper.DEFAULT_KEY)
		}
		if objToCreate.GetName() != helper.DEFAULT_KEY {
			return nil, NewSingletonNameError(objToCreate.GetName())
		}
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Config().CreateConfigByName(ctx, objToCreate)
	updatedObj, getErr := obj.client.Root().GetRootByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Root = updatedObj.Root
	}
	return
}

// DeleteConfig calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *RootRoot) DeleteConfig(ctx context.Context) (err error) {
	if obj.Spec.ConfigGvk != nil {
		err = obj.client.
			Config().DeleteConfigByName(ctx, obj.Spec.ConfigGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Root().GetRootByName(ctx, obj.GetName())
	if err == nil {
		obj.Root = updatedObj.Root
	}
	return
}

type rootRootTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *rootRootTsmV1Chainer) Config() *configConfigTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["configs.config.tsm.tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &configConfigTsmV1Chainer{
		client:       c.client,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// GetConfig calculates hashed name of the object based on it's parents and returns the object
func (c *rootRootTsmV1Chainer) GetConfig(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", c.parentLabels, helper.DEFAULT_KEY)
	return c.client.Config().GetConfigByName(ctx, hashedName)
}

// AddConfig calculates hashed name of the child to create based on parents names and creates it.
// objToCreate.Name is changed to the hashed name. Original name ('default') is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *rootRootTsmV1Chainer) AddConfig(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (result *ConfigConfig, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Config().CreateConfigByName(ctx, objToCreate)
}

// DeleteConfig calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *rootRootTsmV1Chainer) DeleteConfig(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Config().DeleteConfigByName(ctx, hashedName)
}

// GetConfigByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) GetConfigByName(ctx context.Context, hashedName string) (*ConfigConfig, error) {
	result, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	return &ConfigConfig{
		client: group.client,
		Config: result,
	}, nil
}

// DeleteConfigByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) DeleteConfigByName(ctx context.Context, hashedName string) (err error) {

	result, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return err
	}

	if result.Spec.GNSGvk != nil {
		err := group.client.
			Gns().
			DeleteGnsByName(ctx, result.Spec.GNSGvk.Name)
		if err != nil {
			return err
		}
	}

	err = group.client.baseClient.
		ConfigTsmV1().
		Configs().Delete(ctx, hashedName, metav1.DeleteOptions{})
	if err != nil {
		return err
	}

	var patch Patch

	patchOp := PatchOp{
		Op:   "remove",
		Path: "/spec/configGvk",
	}

	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["roots.root.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if parents[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", parents, parentName)
	}
	_, err = group.client.baseClient.
		RootTsmV1().
		Roots().Patch(ctx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}

	return
}

// CreateConfigByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *ConfigTsmV1) CreateConfigByName(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (*ConfigConfig, error) {
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] == "" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.Labels[common.DISPLAY_NAME_LABEL])
	}

	objToCreate.Spec.GNSGvk = nil

	result, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Create(ctx, objToCreate, metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}

	parentName, ok := objToCreate.GetLabels()["roots.root.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/configGvk",
		Value: baseconfigtsmtanzuvmwarecomv1.Child{
			Group: "config.tsm.tanzu.vmware.com",
			Kind:  "Config",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	_, err = group.client.baseClient.
		RootTsmV1().
		Roots().Patch(ctx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return nil, err
	}

	return &ConfigConfig{
		client: group.client,
		Config: result,
	}, nil
}

// UpdateConfigByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *ConfigTsmV1) UpdateConfigByName(ctx context.Context,
	objToUpdate *baseconfigtsmtanzuvmwarecomv1.Config) (*ConfigConfig, error) {
	if objToUpdate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToUpdate.Labels[common.DISPLAY_NAME_LABEL])
	}
	// ResourceVersion must be set for update
	if objToUpdate.ResourceVersion == "" {
		current, err := group.client.baseClient.
			ConfigTsmV1().
			Configs().Get(ctx, objToUpdate.GetName(), metav1.GetOptions{})
		if err != nil {
			return nil, err
		}
		objToUpdate.ResourceVersion = current.ResourceVersion
	}

	var patch Patch
	patch = append(patch, PatchOp{
		Op:    "replace",
		Path:  "/metadata",
		Value: objToUpdate.ObjectMeta,
	})

	patchValueConfigName :=
		objToUpdate.Spec.ConfigName
	patchOpConfigName := PatchOp{
		Op:    "replace",
		Path:  "/spec/configName",
		Value: patchValueConfigName,
	}
	patch = append(patch, patchOpConfigName)

	patchValueCluster :=
		objToUpdate.Spec.Cluster
	patchOpCluster := PatchOp{
		Op:    "replace",
		Path:  "/spec/cluster",
		Value: patchValueCluster,
	}
	patch = append(patch, patchOpCluster)

	patchValueFooA :=
		objToUpdate.Spec.FooA
	patchOpFooA := PatchOp{
		Op:    "replace",
		Path:  "/spec/fooA",
		Value: patchValueFooA,
	}
	patch = append(patch, patchOpFooA)

	patchValueFooMap :=
		objToUpdate.Spec.FooMap
	patchOpFooMap := PatchOp{
		Op:    "replace",
		Path:  "/spec/fooMap",
		Value: patchValueFooMap,
	}
	patch = append(patch, patchOpFooMap)

	patchValueFooB :=
		objToUpdate.Spec.FooB
	patchOpFooB := PatchOp{
		Op:    "replace",
		Path:  "/spec/fooB",
		Value: patchValueFooB,
	}
	patch = append(patch, patchOpFooB)

	patchValueFooC :=
		objToUpdate.Spec.FooC
	patchOpFooC := PatchOp{
		Op:    "replace",
		Path:  "/spec/fooC",
		Value: patchValueFooC,
	}
	patch = append(patch, patchOpFooC)

	patchValueFooD :=
		objToUpdate.Spec.FooD
	patchOpFooD := PatchOp{
		Op:    "replace",
		Path:  "/spec/fooD",
		Value: patchValueFooD,
	}
	patch = append(patch, patchOpFooD)

	patchValueXYZPort :=
		objToUpdate.Spec.XYZPort
	patchOpXYZPort := PatchOp{
		Op:    "replace",
		Path:  "/spec/xYZPort",
		Value: patchValueXYZPort,
	}
	patch = append(patch, patchOpXYZPort)

	patchValueABCHost :=
		objToUpdate.Spec.ABCHost
	patchOpABCHost := PatchOp{
		Op:    "replace",
		Path:  "/spec/aBCHost",
		Value: patchValueABCHost,
	}
	patch = append(patch, patchOpABCHost)

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
	if err != nil {
		return nil, err
	}

	return &ConfigConfig{
		client: group.client,
		Config: result,
	}, nil
}

// ListConfigs returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *ConfigTsmV1) ListConfigs(ctx context.Context,
	opts metav1.ListOptions) (result []*ConfigConfig, err error) {
	list, err := group.client.baseClient.ConfigTsmV1().
		Configs().List(ctx, opts)
	if err != nil {
		return nil, err
	}
	result = make([]*ConfigConfig, len(list.Items))
	for k, v := range list.Items {
		item := v
		result[k] = &ConfigConfig{
			client: group.client,
			Config: &item,
		}
	}
	return
}

type ConfigConfig struct {
	client *Clientset
	*baseconfigtsmtanzuvmwarecomv1.Config
}

// Delete removes obj and all it's children from the database.
func (obj *ConfigConfig) Delete(ctx context.Context) error {
	err := obj.client.Config().DeleteConfigByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Config = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *ConfigConfig) Update(ctx context.Context) error {
	result, err := obj.client.Config().UpdateConfigByName(ctx, obj.Config)
	if err != nil {
		return err
	}
	obj.Config = result.Config
	return nil
}

func (obj *ConfigConfig) GetParent(ctx context.Context) (result *RootRoot, err error) {
	hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["roots.root.tsm.tanzu.vmware.com"])
	return obj.client.Root().GetRootByName(ctx, hashedName)
}

// GetGNS returns child of given type
func (obj *ConfigConfig) GetGNS(ctx context.Context) (
	result *GnsGns, err error) {
	if obj.Spec.GNSGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Config.Config", "GNS")
	}
	return obj.client.Gns().GetGnsByName(ctx, obj.Spec.GNSGvk.Name)
}

// AddGNS calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *ConfigConfig) AddGNS(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Gns) (result *GnsGns, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["configs.config.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["configs.config.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		if objToCreate.GetName() == "" {
			objToCreate.SetName(helper.DEFAULT_KEY)
		}
		if objToCreate.GetName() != helper.DEFAULT_KEY {
			return nil, NewSingletonNameError(objToCreate.GetName())
		}
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Gns().CreateGnsByName(ctx, objToCreate)
	updatedObj, getErr := obj.client.Config().GetConfigByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Config = updatedObj.Config
	}
	return
}

// DeleteGNS calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *ConfigConfig) DeleteGNS(ctx context.Context) (err error) {
	if obj.Spec.GNSGvk != nil {
		err = obj.client.
			Gns().DeleteGnsByName(ctx, obj.Spec.GNSGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Config().GetConfigByName(ctx, obj.GetName())
	if err == nil {
		obj.Config = updatedObj.Config
	}
	return
}

type configConfigTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *configConfigTsmV1Chainer) GNS() *gnsGnsTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["gnses.gns.tsm.tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &gnsGnsTsmV1Chainer{
		client:       c.client,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// GetGNS calculates hashed name of the object based on it's parents and returns the object
func (c *configConfigTsmV1Chainer) GetGNS(ctx context.Context) (result *GnsGns, err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", c.parentLabels, helper.DEFAULT_KEY)
	return c.client.Gns().GetGnsByName(ctx, hashedName)
}

// AddGNS calculates hashed name of the child to create based on parents names and creates it.
// objToCreate.Name is changed to the hashed name. Original name ('default') is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *configConfigTsmV1Chainer) AddGNS(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Gns) (result *GnsGns, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Gns().CreateGnsByName(ctx, objToCreate)
}

// DeleteGNS calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *configConfigTsmV1Chainer) DeleteGNS(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Gns().DeleteGnsByName(ctx, hashedName)
}

// GetGnsByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) GetGnsByName(ctx context.Context, hashedName string) (*GnsGns, error) {
	result, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	return &GnsGns{
		client: group.client,
		Gns:    result,
	}, nil
}

// DeleteGnsByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) DeleteGnsByName(ctx context.Context, hashedName string) (err error) {

	result, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return err
	}

	if result.Spec.FooChildGvk != nil {
		err := group.client.
			Gns().
			DeleteBarByName(ctx, result.Spec.FooChildGvk.Name)
		if err != nil {
			return err
		}
	}

	for _, v := range result.Spec.FooChildrenGvk {
		err := group.client.
			Gns().DeleteBarByName(ctx, v.Name)
		if err != nil {
			return err
		}
	}

	err = group.client.baseClient.
		GnsTsmV1().
		Gnses().Delete(ctx, hashedName, metav1.DeleteOptions{})
	if err != nil {
		return err
	}

	var patch Patch

	patchOp := PatchOp{
		Op:   "remove",
		Path: "/spec/gNSGvk",
	}

	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if parents[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
	}
	_, err = group.client.baseClient.
		ConfigTsmV1().
		Configs().Patch(ctx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}

	return
}

// CreateGnsByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *GnsTsmV1) CreateGnsByName(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Gns) (*GnsGns, error) {
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] == "" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.Labels[common.DISPLAY_NAME_LABEL])
	}

	objToCreate.Spec.FooChildGvk = nil
	objToCreate.Spec.FooChildrenGvk = nil
	objToCreate.Spec.FooLinkGvk = nil
	objToCreate.Spec.FooLinksGvk = nil

	result, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Create(ctx, objToCreate, metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}

	parentName, ok := objToCreate.GetLabels()["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/gNSGvk",
		Value: basegnstsmtanzuvmwarecomv1.Child{
			Group: "gns.tsm.tanzu.vmware.com",
			Kind:  "Gns",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	_, err = group.client.baseClient.
		ConfigTsmV1().
		Configs().Patch(ctx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return nil, err
	}

	return &GnsGns{
		client: group.client,
		Gns:    result,
	}, nil
}

// UpdateGnsByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *GnsTsmV1) UpdateGnsByName(ctx context.Context,
	objToUpdate *basegnstsmtanzuvmwarecomv1.Gns) (*GnsGns, error) {
	if objToUpdate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToUpdate.Labels[common.DISPLAY_NAME_LABEL])
	}
	// ResourceVersion must be set for update
	if objToUpdate.ResourceVersion == "" {
		current, err := group.client.baseClient.
			GnsTsmV1().
			Gnses().Get(ctx, objToUpdate.GetName(), metav1.GetOptions{})
		if err != nil {
			return nil, err
		}
		objToUpdate.ResourceVersion = current.ResourceVersion
	}

	var patch Patch
	patch = append(patch, PatchOp{
		Op:    "replace",
		Path:  "/metadata",
		Value: objToUpdate.ObjectMeta,
	})

	patchValueDomain :=
		objToUpdate.Spec.Domain
	patchOpDomain := PatchOp{
		Op:    "replace",
		Path:  "/spec/domain",
		Value: patchValueDomain,
	}
	patch = append(patch, patchOpDomain)

	patchValueUseSharedGateway :=
		objToUpdate.Spec.UseSharedGateway
	patchOpUseSharedGateway := PatchOp{
		Op:    "replace",
		Path:  "/spec/useSharedGateway",
		Value: patchValueUseSharedGateway,
	}
	patch = append(patch, patchOpUseSharedGateway)

	patchValueMydesc :=
		objToUpdate.Spec.Mydesc
	patchOpMydesc := PatchOp{
		Op:    "replace",
		Path:  "/spec/mydesc",
		Value: patchValueMydesc,
	}
	patch = append(patch, patchOpMydesc)

	patchValueHostPort :=
		objToUpdate.Spec.HostPort
	patchOpHostPort := PatchOp{
		Op:    "replace",
		Path:  "/spec/hostPort",
		Value: patchValueHostPort,
	}
	patch = append(patch, patchOpHostPort)

	patchValueTestArray :=
		objToUpdate.Spec.TestArray
	patchOpTestArray := PatchOp{
		Op:    "replace",
		Path:  "/spec/testArray",
		Value: patchValueTestArray,
	}
	patch = append(patch, patchOpTestArray)

	patchValueInstance :=
		objToUpdate.Spec.Instance
	patchOpInstance := PatchOp{
		Op:    "replace",
		Path:  "/spec/instance",
		Value: patchValueInstance,
	}
	patch = append(patch, patchOpInstance)

	patchValueArray1 :=
		objToUpdate.Spec.Array1
	patchOpArray1 := PatchOp{
		Op:    "replace",
		Path:  "/spec/array1",
		Value: patchValueArray1,
	}
	patch = append(patch, patchOpArray1)

	patchValueArray2 :=
		objToUpdate.Spec.Array2
	patchOpArray2 := PatchOp{
		Op:    "replace",
		Path:  "/spec/array2",
		Value: patchValueArray2,
	}
	patch = append(patch, patchOpArray2)

	patchValueArray3 :=
		objToUpdate.Spec.Array3
	patchOpArray3 := PatchOp{
		Op:    "replace",
		Path:  "/spec/array3",
		Value: patchValueArray3,
	}
	patch = append(patch, patchOpArray3)

	patchValueArray4 :=
		objToUpdate.Spec.Array4
	patchOpArray4 := PatchOp{
		Op:    "replace",
		Path:  "/spec/array4",
		Value: patchValueArray4,
	}
	patch = append(patch, patchOpArray4)

	patchValueArray5 :=
		objToUpdate.Spec.Array5
	patchOpArray5 := PatchOp{
		Op:    "replace",
		Path:  "/spec/array5",
		Value: patchValueArray5,
	}
	patch = append(patch, patchOpArray5)

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
	if err != nil {
		return nil, err
	}

	return &GnsGns{
		client: group.client,
		Gns:    result,
	}, nil
}

// ListGnses returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *GnsTsmV1) ListGnses(ctx context.Context,
	opts metav1.ListOptions) (result []*GnsGns, err error) {
	list, err := group.client.baseClient.GnsTsmV1().
		Gnses().List(ctx, opts)
	if err != nil {
		return nil, err
	}
	result = make([]*GnsGns, len(list.Items))
	for k, v := range list.Items {
		item := v
		result[k] = &GnsGns{
			client: group.client,
			Gns:    &item,
		}
	}
	return
}

type GnsGns struct {
	client *Clientset
	*basegnstsmtanzuvmwarecomv1.Gns
}

// Delete removes obj and all it's children from the database.
func (obj *GnsGns) Delete(ctx context.Context) error {
	err := obj.client.Gns().DeleteGnsByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Gns = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *GnsGns) Update(ctx context.Context) error {
	result, err := obj.client.Gns().UpdateGnsByName(ctx, obj.Gns)
	if err != nil {
		return err
	}
	obj.Gns = result.Gns
	return nil
}

func (obj *GnsGns) GetParent(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["configs.config.tsm.tanzu.vmware.com"])
	return obj.client.Config().GetConfigByName(ctx, hashedName)
}

// GetFooChild returns child of given type
func (obj *GnsGns) GetFooChild(ctx context.Context) (
	result *GnsBar, err error) {
	if obj.Spec.FooChildGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Gns.Gns", "FooChild")
	}
	return obj.client.Gns().GetBarByName(ctx, obj.Spec.FooChildGvk.Name)
}

// AddFooChild calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *GnsGns) AddFooChild(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Bar) (result *GnsBar, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["gnses.gns.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["gnses.gns.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Gns().CreateBarByName(ctx, objToCreate)
	updatedObj, getErr := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Gns = updatedObj.Gns
	}
	return
}

// DeleteFooChild calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *GnsGns) DeleteFooChild(ctx context.Context) (err error) {
	if obj.Spec.FooChildGvk != nil {
		err = obj.client.
			Gns().DeleteBarByName(ctx, obj.Spec.FooChildGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Gns().GetGnsByName(ctx, obj.GetName())
	if err == nil {
		obj.Gns = updatedObj.Gns
	}
	return
}

// GetAllFooChildren returns all children of given type
func (obj *GnsGns) GetAllFooChildren(ctx context.Context) (
	result []*GnsBar, err error) {
	result = make([]*GnsBar, 0, len(obj.Spec.FooChildrenGvk))
	for _, v := range obj.Spec.FooChildrenGvk {
		l, err := obj.client.Gns().GetBarByName(ctx, v.Name)
		if err != nil {
			return nil, err
		}
		result = append(result, l)
	}
	return
}

// GetFooChildren returns child which has given displayName
func (obj *GnsGns) GetFooChildren(ctx context.Context,
	displayName string) (result *GnsBar, err error) {
	l, ok := obj.Spec.FooChildrenGvk[displayName]
	if !ok {
		return nil, NewChildNotFound(obj.DisplayName(), "Gns.Gns", "FooChildren", displayName)
	}
	result, err = obj.client.Gns().GetBarByName(ctx, l.Name)
	return
}

// AddFooChildren calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *GnsGns) AddFooChildren(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Bar) (result *GnsBar, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["gnses.gns.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["gnses.gns.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Gns().CreateBarByName(ctx, objToCreate)
	updatedObj, getErr := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Gns = updatedObj.Gns
	}
	return
}

// DeleteFooChildren calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *GnsGns) DeleteFooChildren(ctx context.Context, displayName string) (err error) {
	l, ok := obj.Spec.FooChildrenGvk[displayName]
	if !ok {
		return NewChildNotFound(obj.DisplayName(), "Gns.Gns", "FooChildren", displayName)
	}
	err = obj.client.Gns().DeleteBarByName(ctx, l.Name)
	if err != nil {
		return err
	}
	updatedObj, err := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if err == nil {
		obj.Gns = updatedObj.Gns
	}
	return
}

// GetFooLink returns link of given type
func (obj *GnsGns) GetFooLink(ctx context.Context) (
	result *GnsBar, err error) {
	if obj.Spec.FooLinkGvk == nil {
		return nil, NewLinkNotFound(obj.DisplayName(), "Gns.Gns", "FooLink")
	}
	return obj.client.Gns().GetBarByName(ctx, obj.Spec.FooLinkGvk.Name)
}

// LinkFooLink links obj with linkToAdd object. This function doesn't create linked object, it must be
// already created.
func (obj *GnsGns) LinkFooLink(ctx context.Context,
	linkToAdd *GnsBar) error {

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/fooLinkGvk",
		Value: basegnstsmtanzuvmwarecomv1.Child{
			Group: "gns.tsm.tanzu.vmware.com",
			Kind:  "Bar",
			Name:  linkToAdd.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	result, err := obj.client.baseClient.GnsTsmV1().Gnses().Patch(ctx, obj.Name, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}

	obj.Gns = result
	return nil
}

// UnlinkFooLink unlinks linkToRemove object from obj. This function doesn't delete linked object.
func (obj *GnsGns) UnlinkFooLink(ctx context.Context) (err error) {
	var patch Patch

	patchOp := PatchOp{
		Op:   "remove",
		Path: "/spec/fooLinkGvk",
	}

	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	result, err := obj.client.baseClient.GnsTsmV1().Gnses().Patch(ctx, obj.Name, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}
	obj.Gns = result
	return nil

}

// GetAllFooLinks returns all links of given type
func (obj *GnsGns) GetAllFooLinks(ctx context.Context) (
	result []*GnsBar, err error) {
	result = make([]*GnsBar, 0, len(obj.Spec.FooLinksGvk))
	for _, v := range obj.Spec.FooLinksGvk {
		l, err := obj.client.Gns().GetBarByName(ctx, v.Name)
		if err != nil {
			return nil, err
		}
		result = append(result, l)
	}
	return
}

// GetFooLinks returns link which has given displayName
func (obj *GnsGns) GetFooLinks(ctx context.Context,
	displayName string) (result *GnsBar, err error) {
	l, ok := obj.Spec.FooLinksGvk[displayName]
	if !ok {
		return nil, NewLinkNotFound(obj.DisplayName(), "Gns.Gns", "FooLinks", displayName)
	}
	result, err = obj.client.Gns().GetBarByName(ctx, l.Name)
	return
}

// LinkFooLinks links obj with linkToAdd object. This function doesn't create linked object, it must be
// already created.
func (obj *GnsGns) LinkFooLinks(ctx context.Context,
	linkToAdd *GnsBar) error {

	payload := "{\"spec\": {\"fooLinksGvk\": {\"" + linkToAdd.DisplayName() + "\": {\"name\": \"" + linkToAdd.Name + "\",\"kind\": \"Bar\", \"group\": \"gns.tsm.tanzu.vmware.com\"}}}}"
	result, err := obj.client.baseClient.GnsTsmV1().Gnses().Patch(ctx, obj.Name, types.MergePatchType, []byte(payload), metav1.PatchOptions{})
	if err != nil {
		return err
	}

	obj.Gns = result
	return nil
}

// UnlinkFooLinks unlinks linkToRemove object from obj. This function doesn't delete linked object.
func (obj *GnsGns) UnlinkFooLinks(ctx context.Context,
	linkToRemove *GnsBar) (err error) {
	var patch Patch

	patchOp := PatchOp{
		Op:   "remove",
		Path: "/spec/fooLinksGvk/" + linkToRemove.DisplayName(),
	}

	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	result, err := obj.client.baseClient.GnsTsmV1().Gnses().Patch(ctx, obj.Name, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}
	obj.Gns = result
	return nil

}

type gnsGnsTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *gnsGnsTsmV1Chainer) FooChild(name string) *barGnsTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["bars.gns.tsm.tanzu.vmware.com"] = name
	return &barGnsTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetFooChild calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *gnsGnsTsmV1Chainer) GetFooChild(ctx context.Context, displayName string) (result *GnsBar, err error) {
	hashedName := helper.GetHashedName("bars.gns.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Gns().GetBarByName(ctx, hashedName)
}

// AddFooChild calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *gnsGnsTsmV1Chainer) AddFooChild(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Bar) (result *GnsBar, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("bars.gns.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Gns().CreateBarByName(ctx, objToCreate)
}

// DeleteFooChild calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *gnsGnsTsmV1Chainer) DeleteFooChild(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("bars.gns.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Gns().DeleteBarByName(ctx, hashedName)
}

func (c *gnsGnsTsmV1Chainer) FooChildren(name string) *barGnsTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["bars.gns.tsm.tanzu.vmware.com"] = name
	return &barGnsTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetFooChildren calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *gnsGnsTsmV1Chainer) GetFooChildren(ctx context.Context, displayName string) (result *GnsBar, err error) {
	hashedName := helper.GetHashedName("bars.gns.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Gns().GetBarByName(ctx, hashedName)
}

// AddFooChildren calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *gnsGnsTsmV1Chainer) AddFooChildren(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Bar) (result *GnsBar, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("bars.gns.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Gns().CreateBarByName(ctx, objToCreate)
}

// DeleteFooChildren calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *gnsGnsTsmV1Chainer) DeleteFooChildren(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("bars.gns.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Gns().DeleteBarByName(ctx, hashedName)
}

// GetBarByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) GetBarByName(ctx context.Context, hashedName string) (*GnsBar, error) {
	result, err := group.client.baseClient.
		GnsTsmV1().
		Bars().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	return &GnsBar{
		client: group.client,
		Bar:    result,
	}, nil
}

// DeleteBarByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) DeleteBarByName(ctx context.Context, hashedName string) (err error) {

	result, err := group.client.baseClient.
		GnsTsmV1().
		Bars().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return err
	}

	err = group.client.baseClient.
		GnsTsmV1().
		Bars().Delete(ctx, hashedName, metav1.DeleteOptions{})
	if err != nil {
		return err
	}

	var patch Patch

	patchOp := PatchOp{
		Op:   "remove",
		Path: "/spec/fooChildrenGvk/" + result.DisplayName(),
	}

	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if parents[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
	}
	_, err = group.client.baseClient.
		GnsTsmV1().
		Gnses().Patch(ctx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}

	return
}

// CreateBarByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *GnsTsmV1) CreateBarByName(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Bar) (*GnsBar, error) {
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	result, err := group.client.baseClient.
		GnsTsmV1().
		Bars().Create(ctx, objToCreate, metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}

	parentName, ok := objToCreate.GetLabels()["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	payload := "{\"spec\": {\"fooChildrenGvk\": {\"" + objToCreate.DisplayName() + "\": {\"name\": \"" + objToCreate.Name + "\",\"kind\": \"Bar\", \"group\": \"gns.tsm.tanzu.vmware.com\"}}}}"
	_, err = group.client.baseClient.
		GnsTsmV1().
		Gnses().Patch(ctx, parentName, types.MergePatchType, []byte(payload), metav1.PatchOptions{})
	if err != nil {
		return nil, err
	}

	return &GnsBar{
		client: group.client,
		Bar:    result,
	}, nil
}

// UpdateBarByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *GnsTsmV1) UpdateBarByName(ctx context.Context,
	objToUpdate *basegnstsmtanzuvmwarecomv1.Bar) (*GnsBar, error) {

	// ResourceVersion must be set for update
	if objToUpdate.ResourceVersion == "" {
		current, err := group.client.baseClient.
			GnsTsmV1().
			Bars().Get(ctx, objToUpdate.GetName(), metav1.GetOptions{})
		if err != nil {
			return nil, err
		}
		objToUpdate.ResourceVersion = current.ResourceVersion
	}

	var patch Patch
	patch = append(patch, PatchOp{
		Op:    "replace",
		Path:  "/metadata",
		Value: objToUpdate.ObjectMeta,
	})

	patchValueName :=
		objToUpdate.Spec.Name
	patchOpName := PatchOp{
		Op:    "replace",
		Path:  "/spec/name",
		Value: patchValueName,
	}
	patch = append(patch, patchOpName)

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err := group.client.baseClient.
		GnsTsmV1().
		Bars().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
	if err != nil {
		return nil, err
	}

	return &GnsBar{
		client: group.client,
		Bar:    result,
	}, nil
}

// ListBars returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *GnsTsmV1) ListBars(ctx context.Context,
	opts metav1.ListOptions) (result []*GnsBar, err error) {
	list, err := group.client.baseClient.GnsTsmV1().
		Bars().List(ctx, opts)
	if err != nil {
		return nil, err
	}
	result = make([]*GnsBar, len(list.Items))
	for k, v := range list.Items {
		item := v
		result[k] = &GnsBar{
			client: group.client,
			Bar:    &item,
		}
	}
	return
}

type GnsBar struct {
	client *Clientset
	*basegnstsmtanzuvmwarecomv1.Bar
}

// Delete removes obj and all it's children from the database.
func (obj *GnsBar) Delete(ctx context.Context) error {
	err := obj.client.Gns().DeleteBarByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Bar = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *GnsBar) Update(ctx context.Context) error {
	result, err := obj.client.Gns().UpdateBarByName(ctx, obj.Bar)
	if err != nil {
		return err
	}
	obj.Bar = result.Bar
	return nil
}

func (obj *GnsBar) GetParent(ctx context.Context) (result *GnsGns, err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["gnses.gns.tsm.tanzu.vmware.com"])
	return obj.client.Gns().GetGnsByName(ctx, hashedName)
}

type barGnsTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

// GetEmptyDataByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) GetEmptyDataByName(ctx context.Context, hashedName string) (*GnsEmptyData, error) {
	result, err := group.client.baseClient.
		GnsTsmV1().
		EmptyDatas().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	return &GnsEmptyData{
		client:    group.client,
		EmptyData: result,
	}, nil
}

// DeleteEmptyDataByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) DeleteEmptyDataByName(ctx context.Context, hashedName string) (err error) {

	err = group.client.baseClient.
		GnsTsmV1().
		EmptyDatas().Delete(ctx, hashedName, metav1.DeleteOptions{})
	if err != nil {
		return err
	}

	return
}

// CreateEmptyDataByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *GnsTsmV1) CreateEmptyDataByName(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.EmptyData) (*GnsEmptyData, error) {
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	result, err := group.client.baseClient.
		GnsTsmV1().
		EmptyDatas().Create(ctx, objToCreate, metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}

	return &GnsEmptyData{
		client:    group.client,
		EmptyData: result,
	}, nil
}

// UpdateEmptyDataByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *GnsTsmV1) UpdateEmptyDataByName(ctx context.Context,
	objToUpdate *basegnstsmtanzuvmwarecomv1.EmptyData) (*GnsEmptyData, error) {

	// ResourceVersion must be set for update
	if objToUpdate.ResourceVersion == "" {
		current, err := group.client.baseClient.
			GnsTsmV1().
			EmptyDatas().Get(ctx, objToUpdate.GetName(), metav1.GetOptions{})
		if err != nil {
			return nil, err
		}
		objToUpdate.ResourceVersion = current.ResourceVersion
	}

	var patch Patch
	patch = append(patch, PatchOp{
		Op:    "replace",
		Path:  "/metadata",
		Value: objToUpdate.ObjectMeta,
	})

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err := group.client.baseClient.
		GnsTsmV1().
		EmptyDatas().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
	if err != nil {
		return nil, err
	}

	return &GnsEmptyData{
		client:    group.client,
		EmptyData: result,
	}, nil
}

// ListEmptyDatas returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *GnsTsmV1) ListEmptyDatas(ctx context.Context,
	opts metav1.ListOptions) (result []*GnsEmptyData, err error) {
	list, err := group.client.baseClient.GnsTsmV1().
		EmptyDatas().List(ctx, opts)
	if err != nil {
		return nil, err
	}
	result = make([]*GnsEmptyData, len(list.Items))
	for k, v := range list.Items {
		item := v
		result[k] = &GnsEmptyData{
			client:    group.client,
			EmptyData: &item,
		}
	}
	return
}

type GnsEmptyData struct {
	client *Clientset
	*basegnstsmtanzuvmwarecomv1.EmptyData
}

// Delete removes obj and all it's children from the database.
func (obj *GnsEmptyData) Delete(ctx context.Context) error {
	err := obj.client.Gns().DeleteEmptyDataByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.EmptyData = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *GnsEmptyData) Update(ctx context.Context) error {
	result, err := obj.client.Gns().UpdateEmptyDataByName(ctx, obj.EmptyData)
	if err != nil {
		return err
	}
	obj.EmptyData = result.EmptyData
	return nil
}

// GetGnsEmptyData calculates the hashed name based on parents and displayName and
// returns given object
func (c *Clientset) GetGnsEmptyData(ctx context.Context, displayName string) (result *GnsEmptyData, err error) {
	hashedName := helper.GetHashedName("emptydatas.gns.tsm.tanzu.vmware.com", nil, displayName)
	return c.Gns().GetEmptyDataByName(ctx, hashedName)
}

func (c *Clientset) GnsEmptyData(displayName string) *emptydataGnsTsmV1Chainer {
	parentLabels := make(map[string]string)
	parentLabels["emptydatas.gns.tsm.tanzu.vmware.com"] = displayName
	return &emptydataGnsTsmV1Chainer{
		client:       c,
		name:         displayName,
		parentLabels: parentLabels,
	}
}

// AddGnsEmptyData calculates hashed name of the object based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *Clientset) AddGnsEmptyData(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.EmptyData) (result *GnsEmptyData, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), nil, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.Gns().CreateEmptyDataByName(ctx, objToCreate)
}

// DeleteGnsEmptyData calculates hashedName of object based on displayName and
// parents and deletes given object
func (c *Clientset) DeleteGnsEmptyData(ctx context.Context, displayName string) (err error) {
	hashedName := helper.GetHashedName("emptydatas.gns.tsm.tanzu.vmware.com", nil, displayName)
	return c.Gns().DeleteEmptyDataByName(ctx, hashedName)
}

type emptydataGnsTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

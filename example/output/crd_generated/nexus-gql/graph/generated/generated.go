// Code generated by gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/gqlgen.git, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/compiler.git/example/output/crd_generated/nexus-gql/graph/model"

	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/gqlgen.git/graphql"
	"gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/gqlgen.git/graphql/introspection"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
	Config_Config() Config_ConfigResolver
	Gns_Bar() Gns_BarResolver
	Gns_EmptyData() Gns_EmptyDataResolver
	Gns_Gns() Gns_GnsResolver
	Root_Root() Root_RootResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Query struct {
		Root func(childComplexity int) int
	}

	TimeSeriesData struct {
		Code         func(childComplexity int) int
		Data         func(childComplexity int) int
		Last         func(childComplexity int) int
		Message      func(childComplexity int) int
		TotalRecords func(childComplexity int) int
	}

	Config_Cluster struct {
		MyID func(childComplexity int) int
		Name func(childComplexity int) int
	}

	Config_Config struct {
		ABCHost                  func(childComplexity int) int
		Cluster                  func(childComplexity int) int
		ConfigName               func(childComplexity int) int
		FooA                     func(childComplexity int) int
		FooB                     func(childComplexity int, id *string) int
		FooD                     func(childComplexity int) int
		FooMap                   func(childComplexity int) int
		Gns                      func(childComplexity int) int
		Id                       func(childComplexity int) int
		QueryIncomingAPIs        func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) int
		QueryIncomingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryOutgoingAPIs        func(childComplexity int, startTime *string, endTime *string, timeInterval *string, timeZone *string) int
		QueryOutgoingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryServiceTable        func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) int
		QueryServiceTopology     func(childComplexity int, metricStringArray *string, startTime *string, endTime *string) int
		QueryServiceTs           func(childComplexity int, svcMetric *string, startTime *string, endTime *string, timeInterval *string) int
		QueryServiceVersionTable func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) int
		XYZPort                  func(childComplexity int) int
	}

	Gns_Bar struct {
		Id                       func(childComplexity int) int
		Name                     func(childComplexity int) int
		QueryIncomingAPIs        func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) int
		QueryIncomingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryOutgoingAPIs        func(childComplexity int, startTime *string, endTime *string, timeInterval *string, timeZone *string) int
		QueryOutgoingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryServiceTable        func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) int
		QueryServiceTopology     func(childComplexity int, metricStringArray *string, startTime *string, endTime *string) int
		QueryServiceTs           func(childComplexity int, svcMetric *string, startTime *string, endTime *string, timeInterval *string) int
		QueryServiceVersionTable func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) int
	}

	Gns_Description struct {
		Color     func(childComplexity int) int
		Instance  func(childComplexity int) int
		ProjectID func(childComplexity int) int
		Version   func(childComplexity int) int
	}

	Gns_EmptyData struct {
		Id                       func(childComplexity int) int
		QueryIncomingAPIs        func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) int
		QueryIncomingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryOutgoingAPIs        func(childComplexity int, startTime *string, endTime *string, timeInterval *string, timeZone *string) int
		QueryOutgoingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryServiceTable        func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) int
		QueryServiceTopology     func(childComplexity int, metricStringArray *string, startTime *string, endTime *string) int
		QueryServiceTs           func(childComplexity int, svcMetric *string, startTime *string, endTime *string, timeInterval *string) int
		QueryServiceVersionTable func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) int
	}

	Gns_Gns struct {
		Domain                   func(childComplexity int) int
		FooChild                 func(childComplexity int) int
		FooChildren              func(childComplexity int, id *string) int
		FooLink                  func(childComplexity int) int
		FooLinks                 func(childComplexity int, id *string) int
		HostPort                 func(childComplexity int) int
		Id                       func(childComplexity int) int
		Instance                 func(childComplexity int) int
		Mydesc                   func(childComplexity int) int
		QueryIncomingAPIs        func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) int
		QueryIncomingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryOutgoingAPIs        func(childComplexity int, startTime *string, endTime *string, timeInterval *string, timeZone *string) int
		QueryOutgoingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryServiceTable        func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) int
		QueryServiceTopology     func(childComplexity int, metricStringArray *string, startTime *string, endTime *string) int
		QueryServiceTs           func(childComplexity int, svcMetric *string, startTime *string, endTime *string, timeInterval *string) int
		QueryServiceVersionTable func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) int
		TestArray                func(childComplexity int) int
		UseSharedGateway         func(childComplexity int) int
	}

	Gns_HostPort struct {
		Host func(childComplexity int) int
		Port func(childComplexity int) int
	}

	Root_Bar struct {
		Name func(childComplexity int) int
	}

	Root_Root struct {
		Config                   func(childComplexity int) int
		CustomBar                func(childComplexity int) int
		DisplayName              func(childComplexity int) int
		Id                       func(childComplexity int) int
		QueryIncomingAPIs        func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) int
		QueryIncomingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryOutgoingAPIs        func(childComplexity int, startTime *string, endTime *string, timeInterval *string, timeZone *string) int
		QueryOutgoingTcp         func(childComplexity int, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) int
		QueryServiceTable        func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) int
		QueryServiceTopology     func(childComplexity int, metricStringArray *string, startTime *string, endTime *string) int
		QueryServiceTs           func(childComplexity int, svcMetric *string, startTime *string, endTime *string, timeInterval *string) int
		QueryServiceVersionTable func(childComplexity int, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) int
	}
}

type QueryResolver interface {
	Root(ctx context.Context) (*model.RootRoot, error)
}
type Config_ConfigResolver interface {
	QueryServiceTable(ctx context.Context, obj *model.ConfigConfig, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceVersionTable(ctx context.Context, obj *model.ConfigConfig, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceTs(ctx context.Context, obj *model.ConfigConfig, svcMetric *string, startTime *string, endTime *string, timeInterval *string) (*model.TimeSeriesData, error)
	QueryIncomingAPIs(ctx context.Context, obj *model.ConfigConfig, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryOutgoingAPIs(ctx context.Context, obj *model.ConfigConfig, startTime *string, endTime *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryIncomingTcp(ctx context.Context, obj *model.ConfigConfig, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryOutgoingTcp(ctx context.Context, obj *model.ConfigConfig, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryServiceTopology(ctx context.Context, obj *model.ConfigConfig, metricStringArray *string, startTime *string, endTime *string) (*model.TimeSeriesData, error)
	Gns(ctx context.Context, obj *model.ConfigConfig) (*model.GnsGns, error)

	Cluster(ctx context.Context, obj *model.ConfigConfig) (*model.ConfigCluster, error)
}
type Gns_BarResolver interface {
	QueryServiceTable(ctx context.Context, obj *model.GnsBar, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceVersionTable(ctx context.Context, obj *model.GnsBar, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceTs(ctx context.Context, obj *model.GnsBar, svcMetric *string, startTime *string, endTime *string, timeInterval *string) (*model.TimeSeriesData, error)
	QueryIncomingAPIs(ctx context.Context, obj *model.GnsBar, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryOutgoingAPIs(ctx context.Context, obj *model.GnsBar, startTime *string, endTime *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryIncomingTcp(ctx context.Context, obj *model.GnsBar, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryOutgoingTcp(ctx context.Context, obj *model.GnsBar, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryServiceTopology(ctx context.Context, obj *model.GnsBar, metricStringArray *string, startTime *string, endTime *string) (*model.TimeSeriesData, error)
}
type Gns_EmptyDataResolver interface {
	QueryServiceTable(ctx context.Context, obj *model.GnsEmptyData, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceVersionTable(ctx context.Context, obj *model.GnsEmptyData, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceTs(ctx context.Context, obj *model.GnsEmptyData, svcMetric *string, startTime *string, endTime *string, timeInterval *string) (*model.TimeSeriesData, error)
	QueryIncomingAPIs(ctx context.Context, obj *model.GnsEmptyData, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryOutgoingAPIs(ctx context.Context, obj *model.GnsEmptyData, startTime *string, endTime *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryIncomingTcp(ctx context.Context, obj *model.GnsEmptyData, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryOutgoingTcp(ctx context.Context, obj *model.GnsEmptyData, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryServiceTopology(ctx context.Context, obj *model.GnsEmptyData, metricStringArray *string, startTime *string, endTime *string) (*model.TimeSeriesData, error)
}
type Gns_GnsResolver interface {
	QueryServiceTable(ctx context.Context, obj *model.GnsGns, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceVersionTable(ctx context.Context, obj *model.GnsGns, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceTs(ctx context.Context, obj *model.GnsGns, svcMetric *string, startTime *string, endTime *string, timeInterval *string) (*model.TimeSeriesData, error)
	QueryIncomingAPIs(ctx context.Context, obj *model.GnsGns, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryOutgoingAPIs(ctx context.Context, obj *model.GnsGns, startTime *string, endTime *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryIncomingTcp(ctx context.Context, obj *model.GnsGns, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryOutgoingTcp(ctx context.Context, obj *model.GnsGns, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryServiceTopology(ctx context.Context, obj *model.GnsGns, metricStringArray *string, startTime *string, endTime *string) (*model.TimeSeriesData, error)
	FooLink(ctx context.Context, obj *model.GnsGns) (*model.GnsBar, error)
	FooLinks(ctx context.Context, obj *model.GnsGns, id *string) ([]*model.GnsBar, error)
	FooChild(ctx context.Context, obj *model.GnsGns) (*model.GnsBar, error)
	FooChildren(ctx context.Context, obj *model.GnsGns, id *string) ([]*model.GnsBar, error)

	Mydesc(ctx context.Context, obj *model.GnsGns) (*model.GnsDescription, error)
	HostPort(ctx context.Context, obj *model.GnsGns) (*model.GnsHostPort, error)
	TestArray(ctx context.Context, obj *model.GnsGns) (*model.GnsEmptyData, error)
}
type Root_RootResolver interface {
	QueryServiceTable(ctx context.Context, obj *model.RootRoot, startTime *string, endTime *string, systemServices *bool, showGateways *bool, groupby *string, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceVersionTable(ctx context.Context, obj *model.RootRoot, startTime *string, endTime *string, systemServices *bool, showGateways *bool, noMetrics *bool) (*model.TimeSeriesData, error)
	QueryServiceTs(ctx context.Context, obj *model.RootRoot, svcMetric *string, startTime *string, endTime *string, timeInterval *string) (*model.TimeSeriesData, error)
	QueryIncomingAPIs(ctx context.Context, obj *model.RootRoot, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryOutgoingAPIs(ctx context.Context, obj *model.RootRoot, startTime *string, endTime *string, timeInterval *string, timeZone *string) (*model.TimeSeriesData, error)
	QueryIncomingTcp(ctx context.Context, obj *model.RootRoot, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryOutgoingTcp(ctx context.Context, obj *model.RootRoot, startTime *string, endTime *string, destinationService *string, destinationServiceVersion *string) (*model.TimeSeriesData, error)
	QueryServiceTopology(ctx context.Context, obj *model.RootRoot, metricStringArray *string, startTime *string, endTime *string) (*model.TimeSeriesData, error)
	Config(ctx context.Context, obj *model.RootRoot) (*model.ConfigConfig, error)

	CustomBar(ctx context.Context, obj *model.RootRoot) (*model.RootBar, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Query.root":
		if e.complexity.Query.Root == nil {
			break
		}

		return e.complexity.Query.Root(childComplexity), true

	case "TimeSeriesData.Code":
		if e.complexity.TimeSeriesData.Code == nil {
			break
		}

		return e.complexity.TimeSeriesData.Code(childComplexity), true

	case "TimeSeriesData.Data":
		if e.complexity.TimeSeriesData.Data == nil {
			break
		}

		return e.complexity.TimeSeriesData.Data(childComplexity), true

	case "TimeSeriesData.Last":
		if e.complexity.TimeSeriesData.Last == nil {
			break
		}

		return e.complexity.TimeSeriesData.Last(childComplexity), true

	case "TimeSeriesData.Message":
		if e.complexity.TimeSeriesData.Message == nil {
			break
		}

		return e.complexity.TimeSeriesData.Message(childComplexity), true

	case "TimeSeriesData.TotalRecords":
		if e.complexity.TimeSeriesData.TotalRecords == nil {
			break
		}

		return e.complexity.TimeSeriesData.TotalRecords(childComplexity), true

	case "config_Cluster.MyID":
		if e.complexity.Config_Cluster.MyID == nil {
			break
		}

		return e.complexity.Config_Cluster.MyID(childComplexity), true

	case "config_Cluster.Name":
		if e.complexity.Config_Cluster.Name == nil {
			break
		}

		return e.complexity.Config_Cluster.Name(childComplexity), true

	case "config_Config.ABCHost":
		if e.complexity.Config_Config.ABCHost == nil {
			break
		}

		return e.complexity.Config_Config.ABCHost(childComplexity), true

	case "config_Config.Cluster":
		if e.complexity.Config_Config.Cluster == nil {
			break
		}

		return e.complexity.Config_Config.Cluster(childComplexity), true

	case "config_Config.ConfigName":
		if e.complexity.Config_Config.ConfigName == nil {
			break
		}

		return e.complexity.Config_Config.ConfigName(childComplexity), true

	case "config_Config.FooA":
		if e.complexity.Config_Config.FooA == nil {
			break
		}

		return e.complexity.Config_Config.FooA(childComplexity), true

	case "config_Config.FooB":
		if e.complexity.Config_Config.FooB == nil {
			break
		}

		args, err := ec.field_config_Config_FooB_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Config_Config.FooB(childComplexity, args["Id"].(*string)), true

	case "config_Config.FooD":
		if e.complexity.Config_Config.FooD == nil {
			break
		}

		return e.complexity.Config_Config.FooD(childComplexity), true

	case "config_Config.FooMap":
		if e.complexity.Config_Config.FooMap == nil {
			break
		}

		return e.complexity.Config_Config.FooMap(childComplexity), true

	case "config_Config.GNS":
		if e.complexity.Config_Config.Gns == nil {
			break
		}

		return e.complexity.Config_Config.Gns(childComplexity), true

	case "config_Config.Id":
		if e.complexity.Config_Config.Id == nil {
			break
		}

		return e.complexity.Config_Config.Id(childComplexity), true

	case "config_Config.queryIncomingAPIs":
		if e.complexity.Config_Config.QueryIncomingAPIs == nil {
			break
		}

		args, err := ec.field_config_Config_queryIncomingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Config_Config.QueryIncomingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "config_Config.queryIncomingTCP":
		if e.complexity.Config_Config.QueryIncomingTcp == nil {
			break
		}

		args, err := ec.field_config_Config_queryIncomingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Config_Config.QueryIncomingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "config_Config.queryOutgoingAPIs":
		if e.complexity.Config_Config.QueryOutgoingAPIs == nil {
			break
		}

		args, err := ec.field_config_Config_queryOutgoingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Config_Config.QueryOutgoingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "config_Config.queryOutgoingTCP":
		if e.complexity.Config_Config.QueryOutgoingTcp == nil {
			break
		}

		args, err := ec.field_config_Config_queryOutgoingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Config_Config.QueryOutgoingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "config_Config.queryServiceTable":
		if e.complexity.Config_Config.QueryServiceTable == nil {
			break
		}

		args, err := ec.field_config_Config_queryServiceTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Config_Config.QueryServiceTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["Groupby"].(*string), args["noMetrics"].(*bool)), true

	case "config_Config.queryServiceTopology":
		if e.complexity.Config_Config.QueryServiceTopology == nil {
			break
		}

		args, err := ec.field_config_Config_queryServiceTopology_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Config_Config.QueryServiceTopology(childComplexity, args["metricStringArray"].(*string), args["startTime"].(*string), args["endTime"].(*string)), true

	case "config_Config.queryServiceTS":
		if e.complexity.Config_Config.QueryServiceTs == nil {
			break
		}

		args, err := ec.field_config_Config_queryServiceTS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Config_Config.QueryServiceTs(childComplexity, args["svcMetric"].(*string), args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string)), true

	case "config_Config.queryServiceVersionTable":
		if e.complexity.Config_Config.QueryServiceVersionTable == nil {
			break
		}

		args, err := ec.field_config_Config_queryServiceVersionTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Config_Config.QueryServiceVersionTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["noMetrics"].(*bool)), true

	case "config_Config.XYZPort":
		if e.complexity.Config_Config.XYZPort == nil {
			break
		}

		return e.complexity.Config_Config.XYZPort(childComplexity), true

	case "gns_Bar.Id":
		if e.complexity.Gns_Bar.Id == nil {
			break
		}

		return e.complexity.Gns_Bar.Id(childComplexity), true

	case "gns_Bar.Name":
		if e.complexity.Gns_Bar.Name == nil {
			break
		}

		return e.complexity.Gns_Bar.Name(childComplexity), true

	case "gns_Bar.queryIncomingAPIs":
		if e.complexity.Gns_Bar.QueryIncomingAPIs == nil {
			break
		}

		args, err := ec.field_gns_Bar_queryIncomingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Bar.QueryIncomingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "gns_Bar.queryIncomingTCP":
		if e.complexity.Gns_Bar.QueryIncomingTcp == nil {
			break
		}

		args, err := ec.field_gns_Bar_queryIncomingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Bar.QueryIncomingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "gns_Bar.queryOutgoingAPIs":
		if e.complexity.Gns_Bar.QueryOutgoingAPIs == nil {
			break
		}

		args, err := ec.field_gns_Bar_queryOutgoingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Bar.QueryOutgoingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "gns_Bar.queryOutgoingTCP":
		if e.complexity.Gns_Bar.QueryOutgoingTcp == nil {
			break
		}

		args, err := ec.field_gns_Bar_queryOutgoingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Bar.QueryOutgoingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "gns_Bar.queryServiceTable":
		if e.complexity.Gns_Bar.QueryServiceTable == nil {
			break
		}

		args, err := ec.field_gns_Bar_queryServiceTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Bar.QueryServiceTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["Groupby"].(*string), args["noMetrics"].(*bool)), true

	case "gns_Bar.queryServiceTopology":
		if e.complexity.Gns_Bar.QueryServiceTopology == nil {
			break
		}

		args, err := ec.field_gns_Bar_queryServiceTopology_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Bar.QueryServiceTopology(childComplexity, args["metricStringArray"].(*string), args["startTime"].(*string), args["endTime"].(*string)), true

	case "gns_Bar.queryServiceTS":
		if e.complexity.Gns_Bar.QueryServiceTs == nil {
			break
		}

		args, err := ec.field_gns_Bar_queryServiceTS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Bar.QueryServiceTs(childComplexity, args["svcMetric"].(*string), args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string)), true

	case "gns_Bar.queryServiceVersionTable":
		if e.complexity.Gns_Bar.QueryServiceVersionTable == nil {
			break
		}

		args, err := ec.field_gns_Bar_queryServiceVersionTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Bar.QueryServiceVersionTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["noMetrics"].(*bool)), true

	case "gns_Description.Color":
		if e.complexity.Gns_Description.Color == nil {
			break
		}

		return e.complexity.Gns_Description.Color(childComplexity), true

	case "gns_Description.Instance":
		if e.complexity.Gns_Description.Instance == nil {
			break
		}

		return e.complexity.Gns_Description.Instance(childComplexity), true

	case "gns_Description.ProjectID":
		if e.complexity.Gns_Description.ProjectID == nil {
			break
		}

		return e.complexity.Gns_Description.ProjectID(childComplexity), true

	case "gns_Description.Version":
		if e.complexity.Gns_Description.Version == nil {
			break
		}

		return e.complexity.Gns_Description.Version(childComplexity), true

	case "gns_EmptyData.Id":
		if e.complexity.Gns_EmptyData.Id == nil {
			break
		}

		return e.complexity.Gns_EmptyData.Id(childComplexity), true

	case "gns_EmptyData.queryIncomingAPIs":
		if e.complexity.Gns_EmptyData.QueryIncomingAPIs == nil {
			break
		}

		args, err := ec.field_gns_EmptyData_queryIncomingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_EmptyData.QueryIncomingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "gns_EmptyData.queryIncomingTCP":
		if e.complexity.Gns_EmptyData.QueryIncomingTcp == nil {
			break
		}

		args, err := ec.field_gns_EmptyData_queryIncomingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_EmptyData.QueryIncomingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "gns_EmptyData.queryOutgoingAPIs":
		if e.complexity.Gns_EmptyData.QueryOutgoingAPIs == nil {
			break
		}

		args, err := ec.field_gns_EmptyData_queryOutgoingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_EmptyData.QueryOutgoingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "gns_EmptyData.queryOutgoingTCP":
		if e.complexity.Gns_EmptyData.QueryOutgoingTcp == nil {
			break
		}

		args, err := ec.field_gns_EmptyData_queryOutgoingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_EmptyData.QueryOutgoingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "gns_EmptyData.queryServiceTable":
		if e.complexity.Gns_EmptyData.QueryServiceTable == nil {
			break
		}

		args, err := ec.field_gns_EmptyData_queryServiceTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_EmptyData.QueryServiceTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["Groupby"].(*string), args["noMetrics"].(*bool)), true

	case "gns_EmptyData.queryServiceTopology":
		if e.complexity.Gns_EmptyData.QueryServiceTopology == nil {
			break
		}

		args, err := ec.field_gns_EmptyData_queryServiceTopology_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_EmptyData.QueryServiceTopology(childComplexity, args["metricStringArray"].(*string), args["startTime"].(*string), args["endTime"].(*string)), true

	case "gns_EmptyData.queryServiceTS":
		if e.complexity.Gns_EmptyData.QueryServiceTs == nil {
			break
		}

		args, err := ec.field_gns_EmptyData_queryServiceTS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_EmptyData.QueryServiceTs(childComplexity, args["svcMetric"].(*string), args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string)), true

	case "gns_EmptyData.queryServiceVersionTable":
		if e.complexity.Gns_EmptyData.QueryServiceVersionTable == nil {
			break
		}

		args, err := ec.field_gns_EmptyData_queryServiceVersionTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_EmptyData.QueryServiceVersionTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["noMetrics"].(*bool)), true

	case "gns_Gns.Domain":
		if e.complexity.Gns_Gns.Domain == nil {
			break
		}

		return e.complexity.Gns_Gns.Domain(childComplexity), true

	case "gns_Gns.FooChild":
		if e.complexity.Gns_Gns.FooChild == nil {
			break
		}

		return e.complexity.Gns_Gns.FooChild(childComplexity), true

	case "gns_Gns.FooChildren":
		if e.complexity.Gns_Gns.FooChildren == nil {
			break
		}

		args, err := ec.field_gns_Gns_FooChildren_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.FooChildren(childComplexity, args["Id"].(*string)), true

	case "gns_Gns.FooLink":
		if e.complexity.Gns_Gns.FooLink == nil {
			break
		}

		return e.complexity.Gns_Gns.FooLink(childComplexity), true

	case "gns_Gns.FooLinks":
		if e.complexity.Gns_Gns.FooLinks == nil {
			break
		}

		args, err := ec.field_gns_Gns_FooLinks_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.FooLinks(childComplexity, args["Id"].(*string)), true

	case "gns_Gns.HostPort":
		if e.complexity.Gns_Gns.HostPort == nil {
			break
		}

		return e.complexity.Gns_Gns.HostPort(childComplexity), true

	case "gns_Gns.Id":
		if e.complexity.Gns_Gns.Id == nil {
			break
		}

		return e.complexity.Gns_Gns.Id(childComplexity), true

	case "gns_Gns.Instance":
		if e.complexity.Gns_Gns.Instance == nil {
			break
		}

		return e.complexity.Gns_Gns.Instance(childComplexity), true

	case "gns_Gns.Mydesc":
		if e.complexity.Gns_Gns.Mydesc == nil {
			break
		}

		return e.complexity.Gns_Gns.Mydesc(childComplexity), true

	case "gns_Gns.queryIncomingAPIs":
		if e.complexity.Gns_Gns.QueryIncomingAPIs == nil {
			break
		}

		args, err := ec.field_gns_Gns_queryIncomingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.QueryIncomingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "gns_Gns.queryIncomingTCP":
		if e.complexity.Gns_Gns.QueryIncomingTcp == nil {
			break
		}

		args, err := ec.field_gns_Gns_queryIncomingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.QueryIncomingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "gns_Gns.queryOutgoingAPIs":
		if e.complexity.Gns_Gns.QueryOutgoingAPIs == nil {
			break
		}

		args, err := ec.field_gns_Gns_queryOutgoingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.QueryOutgoingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "gns_Gns.queryOutgoingTCP":
		if e.complexity.Gns_Gns.QueryOutgoingTcp == nil {
			break
		}

		args, err := ec.field_gns_Gns_queryOutgoingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.QueryOutgoingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "gns_Gns.queryServiceTable":
		if e.complexity.Gns_Gns.QueryServiceTable == nil {
			break
		}

		args, err := ec.field_gns_Gns_queryServiceTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.QueryServiceTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["Groupby"].(*string), args["noMetrics"].(*bool)), true

	case "gns_Gns.queryServiceTopology":
		if e.complexity.Gns_Gns.QueryServiceTopology == nil {
			break
		}

		args, err := ec.field_gns_Gns_queryServiceTopology_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.QueryServiceTopology(childComplexity, args["metricStringArray"].(*string), args["startTime"].(*string), args["endTime"].(*string)), true

	case "gns_Gns.queryServiceTS":
		if e.complexity.Gns_Gns.QueryServiceTs == nil {
			break
		}

		args, err := ec.field_gns_Gns_queryServiceTS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.QueryServiceTs(childComplexity, args["svcMetric"].(*string), args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string)), true

	case "gns_Gns.queryServiceVersionTable":
		if e.complexity.Gns_Gns.QueryServiceVersionTable == nil {
			break
		}

		args, err := ec.field_gns_Gns_queryServiceVersionTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Gns_Gns.QueryServiceVersionTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["noMetrics"].(*bool)), true

	case "gns_Gns.TestArray":
		if e.complexity.Gns_Gns.TestArray == nil {
			break
		}

		return e.complexity.Gns_Gns.TestArray(childComplexity), true

	case "gns_Gns.UseSharedGateway":
		if e.complexity.Gns_Gns.UseSharedGateway == nil {
			break
		}

		return e.complexity.Gns_Gns.UseSharedGateway(childComplexity), true

	case "gns_HostPort.Host":
		if e.complexity.Gns_HostPort.Host == nil {
			break
		}

		return e.complexity.Gns_HostPort.Host(childComplexity), true

	case "gns_HostPort.Port":
		if e.complexity.Gns_HostPort.Port == nil {
			break
		}

		return e.complexity.Gns_HostPort.Port(childComplexity), true

	case "root_Bar.Name":
		if e.complexity.Root_Bar.Name == nil {
			break
		}

		return e.complexity.Root_Bar.Name(childComplexity), true

	case "root_Root.Config":
		if e.complexity.Root_Root.Config == nil {
			break
		}

		return e.complexity.Root_Root.Config(childComplexity), true

	case "root_Root.CustomBar":
		if e.complexity.Root_Root.CustomBar == nil {
			break
		}

		return e.complexity.Root_Root.CustomBar(childComplexity), true

	case "root_Root.DisplayName":
		if e.complexity.Root_Root.DisplayName == nil {
			break
		}

		return e.complexity.Root_Root.DisplayName(childComplexity), true

	case "root_Root.Id":
		if e.complexity.Root_Root.Id == nil {
			break
		}

		return e.complexity.Root_Root.Id(childComplexity), true

	case "root_Root.queryIncomingAPIs":
		if e.complexity.Root_Root.QueryIncomingAPIs == nil {
			break
		}

		args, err := ec.field_root_Root_queryIncomingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Root_Root.QueryIncomingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "root_Root.queryIncomingTCP":
		if e.complexity.Root_Root.QueryIncomingTcp == nil {
			break
		}

		args, err := ec.field_root_Root_queryIncomingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Root_Root.QueryIncomingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "root_Root.queryOutgoingAPIs":
		if e.complexity.Root_Root.QueryOutgoingAPIs == nil {
			break
		}

		args, err := ec.field_root_Root_queryOutgoingAPIs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Root_Root.QueryOutgoingAPIs(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string), args["timeZone"].(*string)), true

	case "root_Root.queryOutgoingTCP":
		if e.complexity.Root_Root.QueryOutgoingTcp == nil {
			break
		}

		args, err := ec.field_root_Root_queryOutgoingTCP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Root_Root.QueryOutgoingTcp(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["destinationService"].(*string), args["destinationServiceVersion"].(*string)), true

	case "root_Root.queryServiceTable":
		if e.complexity.Root_Root.QueryServiceTable == nil {
			break
		}

		args, err := ec.field_root_Root_queryServiceTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Root_Root.QueryServiceTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["Groupby"].(*string), args["noMetrics"].(*bool)), true

	case "root_Root.queryServiceTopology":
		if e.complexity.Root_Root.QueryServiceTopology == nil {
			break
		}

		args, err := ec.field_root_Root_queryServiceTopology_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Root_Root.QueryServiceTopology(childComplexity, args["metricStringArray"].(*string), args["startTime"].(*string), args["endTime"].(*string)), true

	case "root_Root.queryServiceTS":
		if e.complexity.Root_Root.QueryServiceTs == nil {
			break
		}

		args, err := ec.field_root_Root_queryServiceTS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Root_Root.QueryServiceTs(childComplexity, args["svcMetric"].(*string), args["startTime"].(*string), args["endTime"].(*string), args["timeInterval"].(*string)), true

	case "root_Root.queryServiceVersionTable":
		if e.complexity.Root_Root.QueryServiceVersionTable == nil {
			break
		}

		args, err := ec.field_root_Root_queryServiceVersionTable_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Root_Root.QueryServiceVersionTable(childComplexity, args["startTime"].(*string), args["endTime"].(*string), args["SystemServices"].(*bool), args["ShowGateways"].(*bool), args["noMetrics"].(*bool)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `
type Query {
    root: root_Root
}
 
type root_Root {

    Id: ID
    queryServiceTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        Groupby: String
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceVersionTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceTS(
        svcMetric: String
        startTime: String
        endTime: String
        timeInterval: String
    ): TimeSeriesData
    queryIncomingAPIs(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryOutgoingAPIs(
        startTime: String
        endTime: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryIncomingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryOutgoingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryServiceTopology(
        metricStringArray: String
        startTime: String
        endTime: String
    ): TimeSeriesData

    Config: config_Config!
    DisplayName: String
    CustomBar: root_Bar
}


 
type root_Bar {

    Name: String
}


 
type config_Config {

    Id: ID
    queryServiceTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        Groupby: String
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceVersionTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceTS(
        svcMetric: String
        startTime: String
        endTime: String
        timeInterval: String
    ): TimeSeriesData
    queryIncomingAPIs(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryOutgoingAPIs(
        startTime: String
        endTime: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryIncomingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryOutgoingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryServiceTopology(
        metricStringArray: String
        startTime: String
        endTime: String
    ): TimeSeriesData

    GNS: gns_Gns!
    ConfigName: String
    Cluster: config_Cluster
    FooA: String
    FooMap: String
    FooB(Id: ID): [String!]
    FooD: String
    XYZPort: Int
    ABCHost: String
}


 
type config_Cluster {

    Name: String
    MyID: Int
}


 
type gns_HostPort {

    Host: String
    Port: Int
}


 
type gns_Gns {

    Id: ID
    queryServiceTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        Groupby: String
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceVersionTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceTS(
        svcMetric: String
        startTime: String
        endTime: String
        timeInterval: String
    ): TimeSeriesData
    queryIncomingAPIs(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryOutgoingAPIs(
        startTime: String
        endTime: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryIncomingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryOutgoingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryServiceTopology(
        metricStringArray: String
        startTime: String
        endTime: String
    ): TimeSeriesData

    FooLink: gns_Bar!
    FooLinks(Id: ID): [gns_Bar!]
    FooChild: gns_Bar!
    FooChildren(Id: ID): [gns_Bar!]
    Domain: String
    UseSharedGateway: Boolean
    Mydesc: gns_Description
    HostPort: gns_HostPort
    TestArray: gns_EmptyData
    Instance: String
}


 
type gns_Description {

    Color: String
    Version: String
    ProjectID: String
    Instance: String
}


 
type gns_Bar {

    Id: ID
    queryServiceTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        Groupby: String
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceVersionTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceTS(
        svcMetric: String
        startTime: String
        endTime: String
        timeInterval: String
    ): TimeSeriesData
    queryIncomingAPIs(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryOutgoingAPIs(
        startTime: String
        endTime: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryIncomingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryOutgoingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryServiceTopology(
        metricStringArray: String
        startTime: String
        endTime: String
    ): TimeSeriesData

    Name: String
}


 
type gns_EmptyData {

    Id: ID
    queryServiceTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        Groupby: String
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceVersionTable(
        startTime: String
        endTime: String
        SystemServices: Boolean
        ShowGateways: Boolean
        noMetrics: Boolean
    ): TimeSeriesData
    queryServiceTS(
        svcMetric: String
        startTime: String
        endTime: String
        timeInterval: String
    ): TimeSeriesData
    queryIncomingAPIs(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryOutgoingAPIs(
        startTime: String
        endTime: String
        timeInterval: String
        timeZone: String
    ): TimeSeriesData
    queryIncomingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryOutgoingTCP(
        startTime: String
        endTime: String
        destinationService: String
        destinationServiceVersion: String
    ): TimeSeriesData
    queryServiceTopology(
        metricStringArray: String
        startTime: String
        endTime: String
    ): TimeSeriesData

}


type TimeSeriesData {
  Code: Int
  Message: String
  Data: String
  Last: String
  TotalRecords: Int
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field_config_Config_FooB_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_config_Config_queryIncomingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg5
	return args, nil
}

func (ec *executionContext) field_config_Config_queryIncomingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_config_Config_queryOutgoingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg3
	return args, nil
}

func (ec *executionContext) field_config_Config_queryOutgoingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_config_Config_queryServiceTS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["svcMetric"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svcMetric"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["svcMetric"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg3
	return args, nil
}

func (ec *executionContext) field_config_Config_queryServiceTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Groupby"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Groupby"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Groupby"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg5, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg5
	return args, nil
}

func (ec *executionContext) field_config_Config_queryServiceTopology_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["metricStringArray"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricStringArray"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metricStringArray"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	return args, nil
}

func (ec *executionContext) field_config_Config_queryServiceVersionTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg4, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg4
	return args, nil
}

func (ec *executionContext) field_gns_Bar_queryIncomingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg5
	return args, nil
}

func (ec *executionContext) field_gns_Bar_queryIncomingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_Bar_queryOutgoingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_Bar_queryOutgoingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_Bar_queryServiceTS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["svcMetric"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svcMetric"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["svcMetric"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_Bar_queryServiceTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Groupby"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Groupby"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Groupby"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg5, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg5
	return args, nil
}

func (ec *executionContext) field_gns_Bar_queryServiceTopology_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["metricStringArray"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricStringArray"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metricStringArray"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	return args, nil
}

func (ec *executionContext) field_gns_Bar_queryServiceVersionTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg4, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg4
	return args, nil
}

func (ec *executionContext) field_gns_EmptyData_queryIncomingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg5
	return args, nil
}

func (ec *executionContext) field_gns_EmptyData_queryIncomingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_EmptyData_queryOutgoingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_EmptyData_queryOutgoingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_EmptyData_queryServiceTS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["svcMetric"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svcMetric"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["svcMetric"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_EmptyData_queryServiceTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Groupby"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Groupby"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Groupby"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg5, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg5
	return args, nil
}

func (ec *executionContext) field_gns_EmptyData_queryServiceTopology_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["metricStringArray"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricStringArray"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metricStringArray"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	return args, nil
}

func (ec *executionContext) field_gns_EmptyData_queryServiceVersionTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg4, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg4
	return args, nil
}

func (ec *executionContext) field_gns_Gns_FooChildren_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_gns_Gns_FooLinks_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["Id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Id"] = arg0
	return args, nil
}

func (ec *executionContext) field_gns_Gns_queryIncomingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg5
	return args, nil
}

func (ec *executionContext) field_gns_Gns_queryIncomingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_Gns_queryOutgoingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_Gns_queryOutgoingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_Gns_queryServiceTS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["svcMetric"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svcMetric"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["svcMetric"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg3
	return args, nil
}

func (ec *executionContext) field_gns_Gns_queryServiceTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Groupby"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Groupby"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Groupby"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg5, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg5
	return args, nil
}

func (ec *executionContext) field_gns_Gns_queryServiceTopology_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["metricStringArray"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricStringArray"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metricStringArray"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	return args, nil
}

func (ec *executionContext) field_gns_Gns_queryServiceVersionTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg4, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg4
	return args, nil
}

func (ec *executionContext) field_root_Root_queryIncomingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg5
	return args, nil
}

func (ec *executionContext) field_root_Root_queryIncomingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_root_Root_queryOutgoingAPIs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeZone"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeZone"] = arg3
	return args, nil
}

func (ec *executionContext) field_root_Root_queryOutgoingTCP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["destinationService"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationService"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationService"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["destinationServiceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationServiceVersion"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationServiceVersion"] = arg3
	return args, nil
}

func (ec *executionContext) field_root_Root_queryServiceTS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["svcMetric"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("svcMetric"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["svcMetric"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["timeInterval"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeInterval"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timeInterval"] = arg3
	return args, nil
}

func (ec *executionContext) field_root_Root_queryServiceTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["Groupby"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Groupby"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["Groupby"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg5, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg5
	return args, nil
}

func (ec *executionContext) field_root_Root_queryServiceTopology_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["metricStringArray"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("metricStringArray"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["metricStringArray"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg2
	return args, nil
}

func (ec *executionContext) field_root_Root_queryServiceVersionTable_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endTime"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["SystemServices"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SystemServices"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["SystemServices"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["ShowGateways"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ShowGateways"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ShowGateways"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["noMetrics"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noMetrics"))
		arg4, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noMetrics"] = arg4
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Query_root(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_root(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Root(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RootRoot)
	fc.Result = res
	return ec.marshalOroot_Root2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐRootRoot(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_root(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_root_Root_Id(ctx, field)
			case "queryServiceTable":
				return ec.fieldContext_root_Root_queryServiceTable(ctx, field)
			case "queryServiceVersionTable":
				return ec.fieldContext_root_Root_queryServiceVersionTable(ctx, field)
			case "queryServiceTS":
				return ec.fieldContext_root_Root_queryServiceTS(ctx, field)
			case "queryIncomingAPIs":
				return ec.fieldContext_root_Root_queryIncomingAPIs(ctx, field)
			case "queryOutgoingAPIs":
				return ec.fieldContext_root_Root_queryOutgoingAPIs(ctx, field)
			case "queryIncomingTCP":
				return ec.fieldContext_root_Root_queryIncomingTCP(ctx, field)
			case "queryOutgoingTCP":
				return ec.fieldContext_root_Root_queryOutgoingTCP(ctx, field)
			case "queryServiceTopology":
				return ec.fieldContext_root_Root_queryServiceTopology(ctx, field)
			case "Config":
				return ec.fieldContext_root_Root_Config(ctx, field)
			case "DisplayName":
				return ec.fieldContext_root_Root_DisplayName(ctx, field)
			case "CustomBar":
				return ec.fieldContext_root_Root_CustomBar(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type root_Root", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeSeriesData_Code(ctx context.Context, field graphql.CollectedField, obj *model.TimeSeriesData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeSeriesData_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeSeriesData_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeSeriesData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeSeriesData_Message(ctx context.Context, field graphql.CollectedField, obj *model.TimeSeriesData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeSeriesData_Message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeSeriesData_Message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeSeriesData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeSeriesData_Data(ctx context.Context, field graphql.CollectedField, obj *model.TimeSeriesData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeSeriesData_Data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeSeriesData_Data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeSeriesData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeSeriesData_Last(ctx context.Context, field graphql.CollectedField, obj *model.TimeSeriesData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeSeriesData_Last(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Last, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeSeriesData_Last(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeSeriesData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeSeriesData_TotalRecords(ctx context.Context, field graphql.CollectedField, obj *model.TimeSeriesData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalRecords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeSeriesData_TotalRecords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeSeriesData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Cluster_Name(ctx context.Context, field graphql.CollectedField, obj *model.ConfigCluster) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Cluster_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Cluster_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Cluster",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Cluster_MyID(ctx context.Context, field graphql.CollectedField, obj *model.ConfigCluster) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Cluster_MyID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Cluster_MyID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Cluster",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_Id(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_queryServiceTable(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_queryServiceTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().QueryServiceTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["Groupby"].(*string), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_queryServiceTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_config_Config_queryServiceTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_queryServiceVersionTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().QueryServiceVersionTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_config_Config_queryServiceVersionTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_queryServiceTS(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_queryServiceTS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().QueryServiceTs(rctx, obj, fc.Args["svcMetric"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_queryServiceTS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_config_Config_queryServiceTS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_queryIncomingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().QueryIncomingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_config_Config_queryIncomingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_queryOutgoingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().QueryOutgoingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_config_Config_queryOutgoingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_queryIncomingTCP(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_queryIncomingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().QueryIncomingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_queryIncomingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_config_Config_queryIncomingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_queryOutgoingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().QueryOutgoingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_config_Config_queryOutgoingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_queryServiceTopology(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_queryServiceTopology(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().QueryServiceTopology(rctx, obj, fc.Args["metricStringArray"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_queryServiceTopology(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_config_Config_queryServiceTopology_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_GNS(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_GNS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().Gns(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GnsGns)
	fc.Result = res
	return ec.marshalNgns_Gns2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsGns(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_GNS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_gns_Gns_Id(ctx, field)
			case "queryServiceTable":
				return ec.fieldContext_gns_Gns_queryServiceTable(ctx, field)
			case "queryServiceVersionTable":
				return ec.fieldContext_gns_Gns_queryServiceVersionTable(ctx, field)
			case "queryServiceTS":
				return ec.fieldContext_gns_Gns_queryServiceTS(ctx, field)
			case "queryIncomingAPIs":
				return ec.fieldContext_gns_Gns_queryIncomingAPIs(ctx, field)
			case "queryOutgoingAPIs":
				return ec.fieldContext_gns_Gns_queryOutgoingAPIs(ctx, field)
			case "queryIncomingTCP":
				return ec.fieldContext_gns_Gns_queryIncomingTCP(ctx, field)
			case "queryOutgoingTCP":
				return ec.fieldContext_gns_Gns_queryOutgoingTCP(ctx, field)
			case "queryServiceTopology":
				return ec.fieldContext_gns_Gns_queryServiceTopology(ctx, field)
			case "FooLink":
				return ec.fieldContext_gns_Gns_FooLink(ctx, field)
			case "FooLinks":
				return ec.fieldContext_gns_Gns_FooLinks(ctx, field)
			case "FooChild":
				return ec.fieldContext_gns_Gns_FooChild(ctx, field)
			case "FooChildren":
				return ec.fieldContext_gns_Gns_FooChildren(ctx, field)
			case "Domain":
				return ec.fieldContext_gns_Gns_Domain(ctx, field)
			case "UseSharedGateway":
				return ec.fieldContext_gns_Gns_UseSharedGateway(ctx, field)
			case "Mydesc":
				return ec.fieldContext_gns_Gns_Mydesc(ctx, field)
			case "HostPort":
				return ec.fieldContext_gns_Gns_HostPort(ctx, field)
			case "TestArray":
				return ec.fieldContext_gns_Gns_TestArray(ctx, field)
			case "Instance":
				return ec.fieldContext_gns_Gns_Instance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type gns_Gns", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_ConfigName(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_ConfigName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfigName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_ConfigName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_Cluster(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_Cluster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Config_Config().Cluster(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConfigCluster)
	fc.Result = res
	return ec.marshalOconfig_Cluster2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐConfigCluster(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_Cluster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Name":
				return ec.fieldContext_config_Cluster_Name(ctx, field)
			case "MyID":
				return ec.fieldContext_config_Cluster_MyID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type config_Cluster", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_FooA(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_FooA(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FooA, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_FooA(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_FooMap(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_FooMap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FooMap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_FooMap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_FooB(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_FooB(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FooB, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_FooB(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_config_Config_FooB_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_FooD(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_FooD(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FooD, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_FooD(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_XYZPort(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_XYZPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XYZPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_XYZPort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _config_Config_ABCHost(ctx context.Context, field graphql.CollectedField, obj *model.ConfigConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_config_Config_ABCHost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ABCHost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_config_Config_ABCHost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "config_Config",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_Id(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_queryServiceTable(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_queryServiceTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Bar().QueryServiceTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["Groupby"].(*string), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_queryServiceTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Bar_queryServiceTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_queryServiceVersionTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Bar().QueryServiceVersionTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Bar_queryServiceVersionTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_queryServiceTS(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_queryServiceTS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Bar().QueryServiceTs(rctx, obj, fc.Args["svcMetric"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_queryServiceTS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Bar_queryServiceTS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_queryIncomingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Bar().QueryIncomingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Bar_queryIncomingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_queryOutgoingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Bar().QueryOutgoingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Bar_queryOutgoingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_queryIncomingTCP(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_queryIncomingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Bar().QueryIncomingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_queryIncomingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Bar_queryIncomingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_queryOutgoingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Bar().QueryOutgoingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Bar_queryOutgoingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_queryServiceTopology(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_queryServiceTopology(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Bar().QueryServiceTopology(rctx, obj, fc.Args["metricStringArray"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_queryServiceTopology(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Bar_queryServiceTopology_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Bar_Name(ctx context.Context, field graphql.CollectedField, obj *model.GnsBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Bar_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Bar_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Bar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Description_Color(ctx context.Context, field graphql.CollectedField, obj *model.GnsDescription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Description_Color(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Color, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Description_Color(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Description",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Description_Version(ctx context.Context, field graphql.CollectedField, obj *model.GnsDescription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Description_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Description_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Description",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Description_ProjectID(ctx context.Context, field graphql.CollectedField, obj *model.GnsDescription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Description_ProjectID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Description_ProjectID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Description",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Description_Instance(ctx context.Context, field graphql.CollectedField, obj *model.GnsDescription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Description_Instance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Description_Instance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Description",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_EmptyData_Id(ctx context.Context, field graphql.CollectedField, obj *model.GnsEmptyData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_EmptyData_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_EmptyData_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_EmptyData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_EmptyData_queryServiceTable(ctx context.Context, field graphql.CollectedField, obj *model.GnsEmptyData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_EmptyData_queryServiceTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_EmptyData().QueryServiceTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["Groupby"].(*string), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_EmptyData_queryServiceTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_EmptyData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_EmptyData_queryServiceTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_EmptyData_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField, obj *model.GnsEmptyData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_EmptyData_queryServiceVersionTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_EmptyData().QueryServiceVersionTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_EmptyData_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_EmptyData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_EmptyData_queryServiceVersionTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_EmptyData_queryServiceTS(ctx context.Context, field graphql.CollectedField, obj *model.GnsEmptyData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_EmptyData_queryServiceTS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_EmptyData().QueryServiceTs(rctx, obj, fc.Args["svcMetric"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_EmptyData_queryServiceTS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_EmptyData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_EmptyData_queryServiceTS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_EmptyData_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.GnsEmptyData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_EmptyData_queryIncomingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_EmptyData().QueryIncomingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_EmptyData_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_EmptyData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_EmptyData_queryIncomingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_EmptyData_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.GnsEmptyData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_EmptyData_queryOutgoingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_EmptyData().QueryOutgoingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_EmptyData_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_EmptyData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_EmptyData_queryOutgoingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_EmptyData_queryIncomingTCP(ctx context.Context, field graphql.CollectedField, obj *model.GnsEmptyData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_EmptyData_queryIncomingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_EmptyData().QueryIncomingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_EmptyData_queryIncomingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_EmptyData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_EmptyData_queryIncomingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_EmptyData_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField, obj *model.GnsEmptyData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_EmptyData_queryOutgoingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_EmptyData().QueryOutgoingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_EmptyData_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_EmptyData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_EmptyData_queryOutgoingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_EmptyData_queryServiceTopology(ctx context.Context, field graphql.CollectedField, obj *model.GnsEmptyData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_EmptyData_queryServiceTopology(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_EmptyData().QueryServiceTopology(rctx, obj, fc.Args["metricStringArray"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_EmptyData_queryServiceTopology(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_EmptyData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_EmptyData_queryServiceTopology_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_Id(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_queryServiceTable(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_queryServiceTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().QueryServiceTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["Groupby"].(*string), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_queryServiceTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_queryServiceTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_queryServiceVersionTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().QueryServiceVersionTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_queryServiceVersionTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_queryServiceTS(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_queryServiceTS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().QueryServiceTs(rctx, obj, fc.Args["svcMetric"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_queryServiceTS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_queryServiceTS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_queryIncomingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().QueryIncomingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_queryIncomingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_queryOutgoingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().QueryOutgoingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_queryOutgoingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_queryIncomingTCP(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_queryIncomingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().QueryIncomingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_queryIncomingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_queryIncomingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_queryOutgoingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().QueryOutgoingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_queryOutgoingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_queryServiceTopology(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_queryServiceTopology(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().QueryServiceTopology(rctx, obj, fc.Args["metricStringArray"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_queryServiceTopology(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_queryServiceTopology_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_FooLink(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_FooLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().FooLink(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GnsBar)
	fc.Result = res
	return ec.marshalNgns_Bar2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsBar(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_FooLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_gns_Bar_Id(ctx, field)
			case "queryServiceTable":
				return ec.fieldContext_gns_Bar_queryServiceTable(ctx, field)
			case "queryServiceVersionTable":
				return ec.fieldContext_gns_Bar_queryServiceVersionTable(ctx, field)
			case "queryServiceTS":
				return ec.fieldContext_gns_Bar_queryServiceTS(ctx, field)
			case "queryIncomingAPIs":
				return ec.fieldContext_gns_Bar_queryIncomingAPIs(ctx, field)
			case "queryOutgoingAPIs":
				return ec.fieldContext_gns_Bar_queryOutgoingAPIs(ctx, field)
			case "queryIncomingTCP":
				return ec.fieldContext_gns_Bar_queryIncomingTCP(ctx, field)
			case "queryOutgoingTCP":
				return ec.fieldContext_gns_Bar_queryOutgoingTCP(ctx, field)
			case "queryServiceTopology":
				return ec.fieldContext_gns_Bar_queryServiceTopology(ctx, field)
			case "Name":
				return ec.fieldContext_gns_Bar_Name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type gns_Bar", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_FooLinks(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_FooLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().FooLinks(rctx, obj, fc.Args["Id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GnsBar)
	fc.Result = res
	return ec.marshalOgns_Bar2ᚕᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsBarᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_FooLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_gns_Bar_Id(ctx, field)
			case "queryServiceTable":
				return ec.fieldContext_gns_Bar_queryServiceTable(ctx, field)
			case "queryServiceVersionTable":
				return ec.fieldContext_gns_Bar_queryServiceVersionTable(ctx, field)
			case "queryServiceTS":
				return ec.fieldContext_gns_Bar_queryServiceTS(ctx, field)
			case "queryIncomingAPIs":
				return ec.fieldContext_gns_Bar_queryIncomingAPIs(ctx, field)
			case "queryOutgoingAPIs":
				return ec.fieldContext_gns_Bar_queryOutgoingAPIs(ctx, field)
			case "queryIncomingTCP":
				return ec.fieldContext_gns_Bar_queryIncomingTCP(ctx, field)
			case "queryOutgoingTCP":
				return ec.fieldContext_gns_Bar_queryOutgoingTCP(ctx, field)
			case "queryServiceTopology":
				return ec.fieldContext_gns_Bar_queryServiceTopology(ctx, field)
			case "Name":
				return ec.fieldContext_gns_Bar_Name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type gns_Bar", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_FooLinks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_FooChild(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_FooChild(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().FooChild(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GnsBar)
	fc.Result = res
	return ec.marshalNgns_Bar2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsBar(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_FooChild(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_gns_Bar_Id(ctx, field)
			case "queryServiceTable":
				return ec.fieldContext_gns_Bar_queryServiceTable(ctx, field)
			case "queryServiceVersionTable":
				return ec.fieldContext_gns_Bar_queryServiceVersionTable(ctx, field)
			case "queryServiceTS":
				return ec.fieldContext_gns_Bar_queryServiceTS(ctx, field)
			case "queryIncomingAPIs":
				return ec.fieldContext_gns_Bar_queryIncomingAPIs(ctx, field)
			case "queryOutgoingAPIs":
				return ec.fieldContext_gns_Bar_queryOutgoingAPIs(ctx, field)
			case "queryIncomingTCP":
				return ec.fieldContext_gns_Bar_queryIncomingTCP(ctx, field)
			case "queryOutgoingTCP":
				return ec.fieldContext_gns_Bar_queryOutgoingTCP(ctx, field)
			case "queryServiceTopology":
				return ec.fieldContext_gns_Bar_queryServiceTopology(ctx, field)
			case "Name":
				return ec.fieldContext_gns_Bar_Name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type gns_Bar", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_FooChildren(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_FooChildren(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().FooChildren(rctx, obj, fc.Args["Id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GnsBar)
	fc.Result = res
	return ec.marshalOgns_Bar2ᚕᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsBarᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_FooChildren(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_gns_Bar_Id(ctx, field)
			case "queryServiceTable":
				return ec.fieldContext_gns_Bar_queryServiceTable(ctx, field)
			case "queryServiceVersionTable":
				return ec.fieldContext_gns_Bar_queryServiceVersionTable(ctx, field)
			case "queryServiceTS":
				return ec.fieldContext_gns_Bar_queryServiceTS(ctx, field)
			case "queryIncomingAPIs":
				return ec.fieldContext_gns_Bar_queryIncomingAPIs(ctx, field)
			case "queryOutgoingAPIs":
				return ec.fieldContext_gns_Bar_queryOutgoingAPIs(ctx, field)
			case "queryIncomingTCP":
				return ec.fieldContext_gns_Bar_queryIncomingTCP(ctx, field)
			case "queryOutgoingTCP":
				return ec.fieldContext_gns_Bar_queryOutgoingTCP(ctx, field)
			case "queryServiceTopology":
				return ec.fieldContext_gns_Bar_queryServiceTopology(ctx, field)
			case "Name":
				return ec.fieldContext_gns_Bar_Name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type gns_Bar", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_gns_Gns_FooChildren_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_Domain(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_Domain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_Domain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_UseSharedGateway(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_UseSharedGateway(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseSharedGateway, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_UseSharedGateway(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_Mydesc(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_Mydesc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().Mydesc(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GnsDescription)
	fc.Result = res
	return ec.marshalOgns_Description2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsDescription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_Mydesc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Color":
				return ec.fieldContext_gns_Description_Color(ctx, field)
			case "Version":
				return ec.fieldContext_gns_Description_Version(ctx, field)
			case "ProjectID":
				return ec.fieldContext_gns_Description_ProjectID(ctx, field)
			case "Instance":
				return ec.fieldContext_gns_Description_Instance(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type gns_Description", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_HostPort(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_HostPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().HostPort(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GnsHostPort)
	fc.Result = res
	return ec.marshalOgns_HostPort2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsHostPort(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_HostPort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Host":
				return ec.fieldContext_gns_HostPort_Host(ctx, field)
			case "Port":
				return ec.fieldContext_gns_HostPort_Port(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type gns_HostPort", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_TestArray(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_TestArray(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Gns_Gns().TestArray(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GnsEmptyData)
	fc.Result = res
	return ec.marshalOgns_EmptyData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsEmptyData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_TestArray(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_gns_EmptyData_Id(ctx, field)
			case "queryServiceTable":
				return ec.fieldContext_gns_EmptyData_queryServiceTable(ctx, field)
			case "queryServiceVersionTable":
				return ec.fieldContext_gns_EmptyData_queryServiceVersionTable(ctx, field)
			case "queryServiceTS":
				return ec.fieldContext_gns_EmptyData_queryServiceTS(ctx, field)
			case "queryIncomingAPIs":
				return ec.fieldContext_gns_EmptyData_queryIncomingAPIs(ctx, field)
			case "queryOutgoingAPIs":
				return ec.fieldContext_gns_EmptyData_queryOutgoingAPIs(ctx, field)
			case "queryIncomingTCP":
				return ec.fieldContext_gns_EmptyData_queryIncomingTCP(ctx, field)
			case "queryOutgoingTCP":
				return ec.fieldContext_gns_EmptyData_queryOutgoingTCP(ctx, field)
			case "queryServiceTopology":
				return ec.fieldContext_gns_EmptyData_queryServiceTopology(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type gns_EmptyData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_Gns_Instance(ctx context.Context, field graphql.CollectedField, obj *model.GnsGns) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_Gns_Instance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_Gns_Instance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_Gns",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_HostPort_Host(ctx context.Context, field graphql.CollectedField, obj *model.GnsHostPort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_HostPort_Host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_HostPort_Host(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_HostPort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _gns_HostPort_Port(ctx context.Context, field graphql.CollectedField, obj *model.GnsHostPort) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_gns_HostPort_Port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_gns_HostPort_Port(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "gns_HostPort",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _root_Bar_Name(ctx context.Context, field graphql.CollectedField, obj *model.RootBar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Bar_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Bar_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Bar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_Id(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_Id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_Id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_queryServiceTable(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_queryServiceTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().QueryServiceTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["Groupby"].(*string), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_queryServiceTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_root_Root_queryServiceTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_queryServiceVersionTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().QueryServiceVersionTable(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["SystemServices"].(*bool), fc.Args["ShowGateways"].(*bool), fc.Args["noMetrics"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_queryServiceVersionTable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_root_Root_queryServiceVersionTable_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_queryServiceTS(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_queryServiceTS(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().QueryServiceTs(rctx, obj, fc.Args["svcMetric"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_queryServiceTS(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_root_Root_queryServiceTS_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_queryIncomingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().QueryIncomingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_queryIncomingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_root_Root_queryIncomingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_queryOutgoingAPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().QueryOutgoingAPIs(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["timeInterval"].(*string), fc.Args["timeZone"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_queryOutgoingAPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_root_Root_queryOutgoingAPIs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_queryIncomingTCP(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_queryIncomingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().QueryIncomingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_queryIncomingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_root_Root_queryIncomingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_queryOutgoingTCP(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().QueryOutgoingTcp(rctx, obj, fc.Args["startTime"].(*string), fc.Args["endTime"].(*string), fc.Args["destinationService"].(*string), fc.Args["destinationServiceVersion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_queryOutgoingTCP(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_root_Root_queryOutgoingTCP_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_queryServiceTopology(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_queryServiceTopology(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().QueryServiceTopology(rctx, obj, fc.Args["metricStringArray"].(*string), fc.Args["startTime"].(*string), fc.Args["endTime"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeSeriesData)
	fc.Result = res
	return ec.marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_queryServiceTopology(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Code":
				return ec.fieldContext_TimeSeriesData_Code(ctx, field)
			case "Message":
				return ec.fieldContext_TimeSeriesData_Message(ctx, field)
			case "Data":
				return ec.fieldContext_TimeSeriesData_Data(ctx, field)
			case "Last":
				return ec.fieldContext_TimeSeriesData_Last(ctx, field)
			case "TotalRecords":
				return ec.fieldContext_TimeSeriesData_TotalRecords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeSeriesData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_root_Root_queryServiceTopology_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_Config(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_Config(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().Config(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConfigConfig)
	fc.Result = res
	return ec.marshalNconfig_Config2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐConfigConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_Config(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Id":
				return ec.fieldContext_config_Config_Id(ctx, field)
			case "queryServiceTable":
				return ec.fieldContext_config_Config_queryServiceTable(ctx, field)
			case "queryServiceVersionTable":
				return ec.fieldContext_config_Config_queryServiceVersionTable(ctx, field)
			case "queryServiceTS":
				return ec.fieldContext_config_Config_queryServiceTS(ctx, field)
			case "queryIncomingAPIs":
				return ec.fieldContext_config_Config_queryIncomingAPIs(ctx, field)
			case "queryOutgoingAPIs":
				return ec.fieldContext_config_Config_queryOutgoingAPIs(ctx, field)
			case "queryIncomingTCP":
				return ec.fieldContext_config_Config_queryIncomingTCP(ctx, field)
			case "queryOutgoingTCP":
				return ec.fieldContext_config_Config_queryOutgoingTCP(ctx, field)
			case "queryServiceTopology":
				return ec.fieldContext_config_Config_queryServiceTopology(ctx, field)
			case "GNS":
				return ec.fieldContext_config_Config_GNS(ctx, field)
			case "ConfigName":
				return ec.fieldContext_config_Config_ConfigName(ctx, field)
			case "Cluster":
				return ec.fieldContext_config_Config_Cluster(ctx, field)
			case "FooA":
				return ec.fieldContext_config_Config_FooA(ctx, field)
			case "FooMap":
				return ec.fieldContext_config_Config_FooMap(ctx, field)
			case "FooB":
				return ec.fieldContext_config_Config_FooB(ctx, field)
			case "FooD":
				return ec.fieldContext_config_Config_FooD(ctx, field)
			case "XYZPort":
				return ec.fieldContext_config_Config_XYZPort(ctx, field)
			case "ABCHost":
				return ec.fieldContext_config_Config_ABCHost(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type config_Config", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_DisplayName(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_DisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_DisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _root_Root_CustomBar(ctx context.Context, field graphql.CollectedField, obj *model.RootRoot) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_root_Root_CustomBar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Root_Root().CustomBar(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RootBar)
	fc.Result = res
	return ec.marshalOroot_Bar2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐRootBar(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_root_Root_CustomBar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "root_Root",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Name":
				return ec.fieldContext_root_Bar_Name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type root_Bar", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "root":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_root(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timeSeriesDataImplementors = []string{"TimeSeriesData"}

func (ec *executionContext) _TimeSeriesData(ctx context.Context, sel ast.SelectionSet, obj *model.TimeSeriesData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeSeriesDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeSeriesData")
		case "Code":

			out.Values[i] = ec._TimeSeriesData_Code(ctx, field, obj)

		case "Message":

			out.Values[i] = ec._TimeSeriesData_Message(ctx, field, obj)

		case "Data":

			out.Values[i] = ec._TimeSeriesData_Data(ctx, field, obj)

		case "Last":

			out.Values[i] = ec._TimeSeriesData_Last(ctx, field, obj)

		case "TotalRecords":

			out.Values[i] = ec._TimeSeriesData_TotalRecords(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var config_ClusterImplementors = []string{"config_Cluster"}

func (ec *executionContext) _config_Cluster(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigCluster) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, config_ClusterImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("config_Cluster")
		case "Name":

			out.Values[i] = ec._config_Cluster_Name(ctx, field, obj)

		case "MyID":

			out.Values[i] = ec._config_Cluster_MyID(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var config_ConfigImplementors = []string{"config_Config"}

func (ec *executionContext) _config_Config(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, config_ConfigImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("config_Config")
		case "Id":

			out.Values[i] = ec._config_Config_Id(ctx, field, obj)

		case "queryServiceTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_queryServiceTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceVersionTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_queryServiceVersionTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTS":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_queryServiceTS(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_queryIncomingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_queryOutgoingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_queryIncomingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_queryOutgoingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTopology":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_queryServiceTopology(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "GNS":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_GNS(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "ConfigName":

			out.Values[i] = ec._config_Config_ConfigName(ctx, field, obj)

		case "Cluster":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._config_Config_Cluster(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "FooA":

			out.Values[i] = ec._config_Config_FooA(ctx, field, obj)

		case "FooMap":

			out.Values[i] = ec._config_Config_FooMap(ctx, field, obj)

		case "FooB":

			out.Values[i] = ec._config_Config_FooB(ctx, field, obj)

		case "FooD":

			out.Values[i] = ec._config_Config_FooD(ctx, field, obj)

		case "XYZPort":

			out.Values[i] = ec._config_Config_XYZPort(ctx, field, obj)

		case "ABCHost":

			out.Values[i] = ec._config_Config_ABCHost(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gns_BarImplementors = []string{"gns_Bar"}

func (ec *executionContext) _gns_Bar(ctx context.Context, sel ast.SelectionSet, obj *model.GnsBar) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gns_BarImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("gns_Bar")
		case "Id":

			out.Values[i] = ec._gns_Bar_Id(ctx, field, obj)

		case "queryServiceTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Bar_queryServiceTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceVersionTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Bar_queryServiceVersionTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTS":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Bar_queryServiceTS(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Bar_queryIncomingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Bar_queryOutgoingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Bar_queryIncomingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Bar_queryOutgoingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTopology":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Bar_queryServiceTopology(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "Name":

			out.Values[i] = ec._gns_Bar_Name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gns_DescriptionImplementors = []string{"gns_Description"}

func (ec *executionContext) _gns_Description(ctx context.Context, sel ast.SelectionSet, obj *model.GnsDescription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gns_DescriptionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("gns_Description")
		case "Color":

			out.Values[i] = ec._gns_Description_Color(ctx, field, obj)

		case "Version":

			out.Values[i] = ec._gns_Description_Version(ctx, field, obj)

		case "ProjectID":

			out.Values[i] = ec._gns_Description_ProjectID(ctx, field, obj)

		case "Instance":

			out.Values[i] = ec._gns_Description_Instance(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gns_EmptyDataImplementors = []string{"gns_EmptyData"}

func (ec *executionContext) _gns_EmptyData(ctx context.Context, sel ast.SelectionSet, obj *model.GnsEmptyData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gns_EmptyDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("gns_EmptyData")
		case "Id":

			out.Values[i] = ec._gns_EmptyData_Id(ctx, field, obj)

		case "queryServiceTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_EmptyData_queryServiceTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceVersionTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_EmptyData_queryServiceVersionTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTS":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_EmptyData_queryServiceTS(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_EmptyData_queryIncomingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_EmptyData_queryOutgoingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_EmptyData_queryIncomingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_EmptyData_queryOutgoingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTopology":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_EmptyData_queryServiceTopology(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gns_GnsImplementors = []string{"gns_Gns"}

func (ec *executionContext) _gns_Gns(ctx context.Context, sel ast.SelectionSet, obj *model.GnsGns) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gns_GnsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("gns_Gns")
		case "Id":

			out.Values[i] = ec._gns_Gns_Id(ctx, field, obj)

		case "queryServiceTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_queryServiceTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceVersionTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_queryServiceVersionTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTS":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_queryServiceTS(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_queryIncomingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_queryOutgoingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_queryIncomingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_queryOutgoingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTopology":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_queryServiceTopology(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "FooLink":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_FooLink(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "FooLinks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_FooLinks(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "FooChild":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_FooChild(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "FooChildren":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_FooChildren(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "Domain":

			out.Values[i] = ec._gns_Gns_Domain(ctx, field, obj)

		case "UseSharedGateway":

			out.Values[i] = ec._gns_Gns_UseSharedGateway(ctx, field, obj)

		case "Mydesc":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_Mydesc(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "HostPort":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_HostPort(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "TestArray":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._gns_Gns_TestArray(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "Instance":

			out.Values[i] = ec._gns_Gns_Instance(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var gns_HostPortImplementors = []string{"gns_HostPort"}

func (ec *executionContext) _gns_HostPort(ctx context.Context, sel ast.SelectionSet, obj *model.GnsHostPort) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gns_HostPortImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("gns_HostPort")
		case "Host":

			out.Values[i] = ec._gns_HostPort_Host(ctx, field, obj)

		case "Port":

			out.Values[i] = ec._gns_HostPort_Port(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var root_BarImplementors = []string{"root_Bar"}

func (ec *executionContext) _root_Bar(ctx context.Context, sel ast.SelectionSet, obj *model.RootBar) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, root_BarImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("root_Bar")
		case "Name":

			out.Values[i] = ec._root_Bar_Name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var root_RootImplementors = []string{"root_Root"}

func (ec *executionContext) _root_Root(ctx context.Context, sel ast.SelectionSet, obj *model.RootRoot) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, root_RootImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("root_Root")
		case "Id":

			out.Values[i] = ec._root_Root_Id(ctx, field, obj)

		case "queryServiceTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_queryServiceTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceVersionTable":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_queryServiceVersionTable(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTS":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_queryServiceTS(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_queryIncomingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingAPIs":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_queryOutgoingAPIs(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryIncomingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_queryIncomingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryOutgoingTCP":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_queryOutgoingTCP(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "queryServiceTopology":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_queryServiceTopology(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "Config":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_Config(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "DisplayName":

			out.Values[i] = ec._root_Root_DisplayName(ctx, field, obj)

		case "CustomBar":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._root_Root_CustomBar(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNconfig_Config2nexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐConfigConfig(ctx context.Context, sel ast.SelectionSet, v model.ConfigConfig) graphql.Marshaler {
	return ec._config_Config(ctx, sel, &v)
}

func (ec *executionContext) marshalNconfig_Config2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐConfigConfig(ctx context.Context, sel ast.SelectionSet, v *model.ConfigConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._config_Config(ctx, sel, v)
}

func (ec *executionContext) marshalNgns_Bar2nexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsBar(ctx context.Context, sel ast.SelectionSet, v model.GnsBar) graphql.Marshaler {
	return ec._gns_Bar(ctx, sel, &v)
}

func (ec *executionContext) marshalNgns_Bar2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsBar(ctx context.Context, sel ast.SelectionSet, v *model.GnsBar) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._gns_Bar(ctx, sel, v)
}

func (ec *executionContext) marshalNgns_Gns2nexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsGns(ctx context.Context, sel ast.SelectionSet, v model.GnsGns) graphql.Marshaler {
	return ec._gns_Gns(ctx, sel, &v)
}

func (ec *executionContext) marshalNgns_Gns2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsGns(ctx context.Context, sel ast.SelectionSet, v *model.GnsGns) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._gns_Gns(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTimeSeriesData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐTimeSeriesData(ctx context.Context, sel ast.SelectionSet, v *model.TimeSeriesData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimeSeriesData(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2gitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgitlabᚗengᚗvmwareᚗcomᚋnsxᚑallspark_usersᚋnexusᚑsdkᚋgqlgenᚗgitᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) marshalOconfig_Cluster2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐConfigCluster(ctx context.Context, sel ast.SelectionSet, v *model.ConfigCluster) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._config_Cluster(ctx, sel, v)
}

func (ec *executionContext) marshalOgns_Bar2ᚕᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsBarᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GnsBar) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNgns_Bar2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsBar(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOgns_Description2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsDescription(ctx context.Context, sel ast.SelectionSet, v *model.GnsDescription) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._gns_Description(ctx, sel, v)
}

func (ec *executionContext) marshalOgns_EmptyData2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsEmptyData(ctx context.Context, sel ast.SelectionSet, v *model.GnsEmptyData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._gns_EmptyData(ctx, sel, v)
}

func (ec *executionContext) marshalOgns_HostPort2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐGnsHostPort(ctx context.Context, sel ast.SelectionSet, v *model.GnsHostPort) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._gns_HostPort(ctx, sel, v)
}

func (ec *executionContext) marshalOroot_Bar2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐRootBar(ctx context.Context, sel ast.SelectionSet, v *model.RootBar) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._root_Bar(ctx, sel, v)
}

func (ec *executionContext) marshalOroot_Root2ᚖnexustempmoduleᚋnexusᚑgqlᚋgraphᚋmodelᚐRootRoot(ctx context.Context, sel ast.SelectionSet, v *model.RootRoot) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._root_Root(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
